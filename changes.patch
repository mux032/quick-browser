From 1874fe274c57e8f1a03d70ac2cb81888f01a856c Mon Sep 17 00:00:00 2001
From: Mukesh Makwana <mukeshkumar.makwana@tesco.com>
Date: Fri, 19 Sep 2025 10:23:37 +0530
Subject: [PATCH 1/2] Initial commit

Co-authored-by: Qwen-Coder <qwen-coder@alibabacloud.com>
---
 .github/workflows/build-apk.yml               |   64 +
 .github/workflows/release.yml                 |   75 +
 .gitignore                                    |   12 +
 LICENSE                                       |  674 +++++++
 QWEN.md                                       |   68 +
 README.md                                     |   44 +
 app/build.gradle                              |  170 ++
 app/proguard-rules.pro                        |   29 +
 .../ArticleRepositoryImplIntegrationTest.kt   |  135 ++
 .../SettingsRepositoryImplIntegrationTest.kt  |  135 ++
 .../GetSettingsUseCaseIntegrationTest.kt      |  100 +
 .../BubbleWebViewManagerInstrumentedTest.kt   |   18 +
 .../ui/bubble/BubbleWebViewManagerTest.kt     |   18 +
 app/src/main/AndroidManifest.xml              |  115 ++
 app/src/main/assets/en-sent.bin               |    0
 .../main/assets/summarization_model.tflite    |    0
 .../quick/browser/QuickBrowserApplication.kt  |  128 ++
 .../main/java/com/quick/browser/data/.gitkeep |    0
 .../java/com/quick/browser/data/FolderDao.kt  |  104 +
 .../data/local/EncryptedPreferences.kt        |  284 +++
 .../browser/data/local/dao/SavedArticleDao.kt |   93 +
 .../browser/data/local/dao/SettingsDao.kt     |   37 +
 .../browser/data/local/dao/WebPageDao.kt      |  179 ++
 .../data/local/database/AppDatabase.kt        |   84 +
 .../browser/data/local/database/Converters.kt |   80 +
 .../quick/browser/data/local/entity/Folder.kt |   21 +
 .../data/local/entity/FolderArticle.kt        |   38 +
 .../browser/data/local/entity/SavedArticle.kt |   33 +
 .../browser/data/local/entity/Settings.kt     |   43 +
 .../browser/data/local/entity/WebPage.kt      |  129 ++
 .../browser/data/network/ModelDownloader.kt   |  101 +
 .../data/repository/ArticleRepositoryImpl.kt  |  229 +++
 .../data/repository/BubbleRepositoryImpl.kt   |   70 +
 .../data/repository/FolderRepositoryImpl.kt   |  198 ++
 .../data/repository/HistoryRepositoryImpl.kt  |  186 ++
 .../data/repository/SettingsRepositoryImpl.kt |   97 +
 .../data/security/SecurityPolicyManager.kt    |  193 ++
 .../browser/di/BubbleComponentFactory.kt      |   50 +
 .../com/quick/browser/di/DatabaseModule.kt    |   88 +
 .../com/quick/browser/di/ReadabilityModule.kt |   33 +
 .../com/quick/browser/di/RepositoryModule.kt  |   82 +
 .../com/quick/browser/di/ServiceModule.kt     |  122 ++
 .../com/quick/browser/di/UseCaseModule.kt     |  301 +++
 .../quick/browser/domain/error/DomainError.kt |   37 +
 .../com/quick/browser/domain/model/Bubble.kt  |   32 +
 .../com/quick/browser/domain/model/Folder.kt  |   16 +
 .../browser/domain/model/FolderArticle.kt     |   12 +
 .../quick/browser/domain/model/HistoryItem.kt |   23 +
 .../browser/domain/model/SavedArticle.kt      |   24 +
 .../browser/domain/model/SavedArticleItem.kt  |   23 +
 .../quick/browser/domain/model/Settings.kt    |   40 +
 .../com/quick/browser/domain/model/WebPage.kt |   45 +
 .../domain/repository/ArticleRepository.kt    |   99 +
 .../domain/repository/BubbleRepository.kt     |   49 +
 .../domain/repository/FolderRepository.kt     |   92 +
 .../domain/repository/HistoryRepository.kt    |  100 +
 .../domain/repository/SettingsRepository.kt   |   32 +
 .../com/quick/browser/domain/result/Result.kt |   41 +
 .../domain/service/ArticleSavingService.kt    |  151 ++
 .../service/EncryptedPreferencesService.kt    |  113 ++
 .../domain/service/ModelDownloadService.kt    |   28 +
 .../domain/service/SecurityPolicyService.kt   |   64 +
 .../usecase/AddArticleToFolderUseCase.kt      |   15 +
 .../domain/usecase/CloseBubbleUseCase.kt      |   26 +
 .../domain/usecase/CreateBubbleUseCase.kt     |   27 +
 .../domain/usecase/CreateFolderUseCase.kt     |   16 +
 .../domain/usecase/DeleteAllPagesUseCase.kt   |   15 +
 .../domain/usecase/DeleteArticleUseCase.kt    |   31 +
 .../domain/usecase/DeleteWebPageUseCase.kt    |   16 +
 .../domain/usecase/GetAllFoldersUseCase.kt    |   17 +
 .../usecase/GetArticlesInFolderUseCase.kt     |   18 +
 .../domain/usecase/GetHistoryUseCase.kt       |   27 +
 .../usecase/GetMostVisitedPagesUseCase.kt     |   17 +
 .../domain/usecase/GetRecentPagesUseCase.kt   |   17 +
 .../domain/usecase/GetSavedArticlesUseCase.kt |   21 +
 .../domain/usecase/GetSettingsUseCase.kt      |   34 +
 .../usecase/IncrementVisitCountUseCase.kt     |   30 +
 .../usecase/RemoveArticleFromFolderUseCase.kt |   15 +
 .../domain/usecase/SaveArticleUseCase.kt      |   31 +
 .../domain/usecase/SaveWebPageUseCase.kt      |   31 +
 .../usecase/SearchArticlesInFolderUseCase.kt  |   18 +
 .../domain/usecase/SearchHistoryUseCase.kt    |   17 +
 .../usecase/SearchSavedArticlesUseCase.kt     |   22 +
 .../usecase/UpdateOfflineStatusUseCase.kt     |   31 +
 .../domain/usecase/UpdateSettingsUseCase.kt   |   31 +
 .../presentation/navigation/NavGraph.kt       |   98 +
 .../presentation/ui/base/BaseViewModel.kt     |   34 +
 .../browser/presentation/ui/base/UiAction.kt  |    6 +
 .../browser/presentation/ui/base/UiEvent.kt   |   11 +
 .../browser/presentation/ui/base/UiState.kt   |   10 +
 .../presentation/ui/browser/BrowserUiState.kt |   16 +
 .../presentation/ui/browser/BubbleAnimator.kt | 1047 ++++++++++
 .../ui/browser/BubbleIntentProcessor.kt       |  479 +++++
 .../ui/browser/BubbleReadModeManager.kt       |  658 +++++++
 .../ui/browser/BubbleResizeBarHandler.kt      |  164 ++
 .../ui/browser/BubbleSettingsPanel.kt         |  566 ++++++
 .../ui/browser/BubbleStateManager.kt          |  434 +++++
 .../ui/browser/BubbleSummaryManager.kt        |  438 +++++
 .../ui/browser/BubbleTouchHandler.kt          |  414 ++++
 .../ui/browser/BubbleUIManager.kt             |  497 +++++
 .../presentation/ui/browser/BubbleView.kt     | 1734 +++++++++++++++++
 .../ui/browser/BubbleViewModel.kt             |  132 ++
 .../ui/browser/BubbleWebViewManager.kt        |  672 +++++++
 .../browser/BubbleWebViewManagerInterface.kt  |   68 +
 .../ui/browser/OfflineArticleSaver.kt         |  135 ++
 .../ui/browser/ScrollAwareWebViewClient.kt    |  186 ++
 .../presentation/ui/browser/UrlBarView.kt     |  176 ++
 .../ui/browser/WebViewClientEx.kt             |  215 ++
 .../presentation/ui/browser/WebViewModel.kt   |  450 +++++
 .../ui/components/BaseActivity.kt             |   51 +
 .../HorizontalSwipeRefreshLayout.kt           |  160 ++
 .../ui/history/HistoryActivity.kt             |  387 ++++
 .../presentation/ui/history/HistoryAdapter.kt |  404 ++++
 .../presentation/ui/history/HistoryUiState.kt |   13 +
 .../ui/history/HistoryViewModel.kt            |  203 ++
 .../presentation/ui/main/MainActivity.kt      |  504 +++++
 .../presentation/ui/main/MainUiState.kt       |   10 +
 .../presentation/ui/main/MainViewModel.kt     |   74 +
 .../ui/reader/OfflineReaderActivity.kt        |  440 +++++
 .../presentation/ui/saved/FolderItem.kt       |   14 +
 .../ui/saved/FolderSelectionAdapter.kt        |   69 +
 .../presentation/ui/saved/FoldersAdapter.kt   |   69 +
 .../ui/saved/SavedArticlesActivity.kt         |  466 +++++
 .../ui/saved/SavedArticlesAdapter.kt          |  338 ++++
 .../ui/saved/SavedArticlesUiState.kt          |   12 +
 .../ui/saved/SavedArticlesViewModel.kt        |  162 ++
 .../ui/settings/SettingsActivity.kt           |  178 ++
 .../ui/settings/SettingsUiState.kt            |   12 +
 .../ui/settings/SettingsViewModel.kt          |   83 +
 .../browser/presentation/ui/theme/Color.kt    |  151 ++
 .../browser/presentation/ui/theme/Theme.kt    |   99 +
 .../ui/theme/ThemeColorPalatte.kt             |   41 +
 .../presentation/ui/theme/Typography.kt       |   81 +
 .../browser/service/AdBlockUpdateService.kt   |   95 +
 .../browser/service/AdBlockingService.kt      |  358 ++++
 .../browser/service/AuthenticationService.kt  |  282 +++
 .../browser/service/BubbleDisplayManager.kt   |  193 ++
 .../quick/browser/service/BubbleManager.kt    |   88 +
 .../service/BubbleNotificationManager.kt      |   93 +
 .../quick/browser/service/BubbleService.kt    |  212 ++
 .../browser/service/ReadabilityService.kt     |  299 +++
 .../quick/browser/service/SettingsService.kt  |  453 +++++
 .../browser/service/SummarizationService.kt   |  337 ++++
 .../java/com/quick/browser/utils/Constants.kt |   35 +
 .../com/quick/browser/utils/ErrorHandler.kt   |  342 ++++
 .../browser/utils/JavaScriptSanitizer.kt      |  139 ++
 .../java/com/quick/browser/utils/Logger.kt    |   98 +
 .../com/quick/browser/utils/LoggingTag.kt     |   20 +
 .../browser/utils/QuickBrowserGlideModule.kt  |   74 +
 .../java/com/quick/browser/utils/UrlUtils.kt  |  186 ++
 .../com/quick/browser/utils/ViewExtensions.kt |  152 ++
 .../browser/utils/network/ModelDownloader.kt  |  113 ++
 .../utils/security/SecurityPolicyManager.kt   |  218 +++
 .../drawable-night/address_bar_background.xml |    9 +
 .../address_bar_container_background.xml      |    9 +
 .../res/drawable/address_bar_background.xml   |    9 +
 .../address_bar_container_background.xml      |    9 +
 .../main/res/drawable/bubble_background.xml   |   12 +
 .../main/res/drawable/color_item_ripple.xml   |    9 +
 .../res/drawable/delete_button_background.xml |    8 +
 .../main/res/drawable/dialog_background.xml   |    6 +
 .../main/res/drawable/favicon_background.xml  |    5 +
 .../main/res/drawable/gradient_overlay.xml    |    8 +
 app/src/main/res/drawable/ic_add.xml          |   10 +
 app/src/main/res/drawable/ic_arrow_back.xml   |   10 +
 .../res/drawable/ic_arrow_right_circle.xml    |   10 +
 app/src/main/res/drawable/ic_article.xml      |   10 +
 .../main/res/drawable/ic_article_saved.xml    |   16 +
 app/src/main/res/drawable/ic_back_arrow.xml   |   13 +
 app/src/main/res/drawable/ic_block_ads.xml    |   11 +
 .../main/res/drawable/ic_calendar_month.xml   |   13 +
 app/src/main/res/drawable/ic_check.xml        |   10 +
 app/src/main/res/drawable/ic_chevron_left.xml |   11 +
 .../main/res/drawable/ic_chevron_right.xml    |   11 +
 app/src/main/res/drawable/ic_clear_all.xml    |   10 +
 app/src/main/res/drawable/ic_close.xml        |   10 +
 app/src/main/res/drawable/ic_delete.xml       |   11 +
 app/src/main/res/drawable/ic_download.xml     |   13 +
 app/src/main/res/drawable/ic_folder.xml       |   10 +
 .../res/drawable/ic_format_align_center.xml   |   11 +
 .../res/drawable/ic_format_align_justify.xml  |   11 +
 .../res/drawable/ic_format_align_left.xml     |   11 +
 .../res/drawable/ic_format_align_right.xml    |   11 +
 .../main/res/drawable/ic_forward_arrow.xml    |   13 +
 app/src/main/res/drawable/ic_globe.xml        |   30 +
 app/src/main/res/drawable/ic_history.xml      |   11 +
 .../main/res/drawable/ic_history_empty.xml    |   13 +
 app/src/main/res/drawable/ic_javascript.xml   |   11 +
 app/src/main/res/drawable/ic_launch.xml       |   10 +
 .../res/drawable/ic_launcher_background.xml   |   10 +
 .../res/drawable/ic_launcher_foreground.xml   |   97 +
 app/src/main/res/drawable/ic_menu.xml         |   10 +
 app/src/main/res/drawable/ic_minimize.xml     |   13 +
 app/src/main/res/drawable/ic_more_vert.xml    |   12 +
 app/src/main/res/drawable/ic_offline.xml      |   11 +
 app/src/main/res/drawable/ic_open_full.xml    |   16 +
 app/src/main/res/drawable/ic_read_mode.xml    |   29 +
 app/src/main/res/drawable/ic_save.xml         |   11 +
 app/src/main/res/drawable/ic_save_article.xml |   28 +
 app/src/main/res/drawable/ic_search.xml       |   10 +
 app/src/main/res/drawable/ic_settings.xml     |   11 +
 app/src/main/res/drawable/ic_share.xml        |   12 +
 app/src/main/res/drawable/ic_summarize.xml    |   25 +
 app/src/main/res/drawable/ic_today.xml        |   10 +
 app/src/main/res/drawable/ic_web_page.xml     |   11 +
 app/src/main/res/drawable/ic_website.xml      |   10 +
 .../res/drawable/pill_background_selector.xml |   26 +
 app/src/main/res/drawable/progress_circle.xml |   23 +
 .../res/drawable/resize_bar_background.xml    |    6 +
 .../drawable/resize_corner_bottom_left.xml    |   21 +
 .../drawable/resize_corner_bottom_right.xml   |   21 +
 .../res/drawable/resize_corner_top_left.xml   |   21 +
 .../res/drawable/resize_corner_top_right.xml  |   21 +
 app/src/main/res/layout/activity_history.xml  |  114 ++
 app/src/main/res/layout/activity_main.xml     |  127 ++
 .../res/layout/activity_offline_reader.xml    |   58 +
 .../res/layout/activity_saved_articles.xml    |  135 ++
 app/src/main/res/layout/activity_settings.xml |  309 +++
 app/src/main/res/layout/bubble_layout.xml     |  767 ++++++++
 .../main/res/layout/dialog_create_folder.xml  |   54 +
 .../main/res/layout/dialog_delete_options.xml |   77 +
 .../main/res/layout/dialog_select_folder.xml  |   55 +
 app/src/main/res/layout/item_folder.xml       |   37 +
 .../main/res/layout/item_folder_selection.xml |   27 +
 app/src/main/res/layout/item_history.xml      |   81 +
 app/src/main/res/layout/item_history_card.xml |  186 ++
 .../main/res/layout/item_history_header.xml   |   28 +
 .../main/res/layout/item_saved_article.xml    |   81 +
 app/src/main/res/layout/layout_side_panel.xml |  110 ++
 app/src/main/res/layout/toolbar_custom.xml    |   63 +
 .../res/layout/toolbar_custom_history.xml     |   49 +
 .../main/res/layout/toolbar_custom_reader.xml |   21 +
 .../main/res/layout/toolbar_custom_saved.xml  |   63 +
 .../layout/toolbar_custom_saved_search.xml    |   35 +
 .../res/layout/toolbar_custom_settings.xml    |   21 +
 app/src/main/res/layout/url_bar_layout.xml    |   98 +
 app/src/main/res/menu/history_menu.xml        |   20 +
 app/src/main/res/menu/main_menu.xml           |   19 +
 app/src/main/res/mipmap-hdpi/ic_launcher.xml  |    5 +
 .../res/mipmap-hdpi/ic_launcher_round.xml     |    5 +
 app/src/main/res/mipmap-mdpi/ic_launcher.xml  |    5 +
 .../res/mipmap-mdpi/ic_launcher_round.xml     |    5 +
 app/src/main/res/mipmap-xhdpi/ic_launcher.xml |    5 +
 .../res/mipmap-xhdpi/ic_launcher_round.xml    |    5 +
 .../main/res/mipmap-xxhdpi/ic_launcher.xml    |    5 +
 .../res/mipmap-xxhdpi/ic_launcher_round.xml   |    5 +
 .../main/res/mipmap-xxxhdpi/ic_launcher.xml   |    5 +
 .../res/mipmap-xxxhdpi/ic_launcher_round.xml  |    5 +
 app/src/main/res/values-night/colors.xml      |   18 +
 app/src/main/res/values-night/themes.xml      |   35 +
 app/src/main/res/values/colors.xml            |  147 ++
 app/src/main/res/values/dimens.xml            |    9 +
 app/src/main/res/values/ids.xml               |    5 +
 app/src/main/res/values/strings.xml           |  223 +++
 app/src/main/res/values/styles.xml            |   73 +
 app/src/main/res/values/themes.xml            |   35 +
 app/src/main/res/xml/file_paths.xml           |   17 +
 .../browser/data/local/dao/WebPageDaoTest.kt  |   13 +
 .../repository/SettingsRepositoryImplTest.kt  |  111 ++
 .../domain/usecase/GetSettingsUseCaseTest.kt  |   54 +
 .../domain/usecase/SaveArticleUseCaseTest.kt  |   50 +
 .../browser/service/AdBlockingServiceTest.kt  |   76 +
 .../browser/service/SettingsServiceTest.kt    |   81 +
 .../browser/utils/JavaScriptSanitizerTest.kt  |   48 +
 .../com/quick/browser/utils/UrlUtilsTest.kt   |   15 +
 build.gradle                                  |   47 +
 gradle.properties                             |   42 +
 gradle/wrapper/gradle-wrapper.jar             |  Bin 0 -> 63375 bytes
 gradle/wrapper/gradle-wrapper.properties      |    7 +
 gradlew                                       |  248 +++
 gradlew.bat                                   |   92 +
 local.properties                              |    5 +
 replace_logs.py                               |   49 +
 settings.gradle                               |   25 +
 274 files changed, 27722 insertions(+)
 create mode 100644 .github/workflows/build-apk.yml
 create mode 100644 .github/workflows/release.yml
 create mode 100644 .gitignore
 create mode 100644 LICENSE
 create mode 100644 QWEN.md
 create mode 100644 README.md
 create mode 100644 app/build.gradle
 create mode 100644 app/proguard-rules.pro
 create mode 100644 app/src/androidTest/java/com/quick/browser/data/repository/ArticleRepositoryImplIntegrationTest.kt
 create mode 100644 app/src/androidTest/java/com/quick/browser/data/repository/SettingsRepositoryImplIntegrationTest.kt
 create mode 100644 app/src/androidTest/java/com/quick/browser/domain/usecase/GetSettingsUseCaseIntegrationTest.kt
 create mode 100644 app/src/androidTest/java/com/quick/browser/ui/bubble/BubbleWebViewManagerInstrumentedTest.kt
 create mode 100644 app/src/androidTest/java/com/quick/browser/ui/bubble/BubbleWebViewManagerTest.kt
 create mode 100644 app/src/main/AndroidManifest.xml
 create mode 100644 app/src/main/assets/en-sent.bin
 create mode 100644 app/src/main/assets/summarization_model.tflite
 create mode 100644 app/src/main/java/com/quick/browser/QuickBrowserApplication.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/.gitkeep
 create mode 100644 app/src/main/java/com/quick/browser/data/FolderDao.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/local/EncryptedPreferences.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/local/dao/SavedArticleDao.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/local/dao/SettingsDao.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/local/dao/WebPageDao.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/local/database/AppDatabase.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/local/database/Converters.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/local/entity/Folder.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/local/entity/FolderArticle.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/local/entity/SavedArticle.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/local/entity/Settings.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/local/entity/WebPage.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/network/ModelDownloader.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/repository/ArticleRepositoryImpl.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/repository/BubbleRepositoryImpl.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/repository/FolderRepositoryImpl.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/repository/HistoryRepositoryImpl.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/repository/SettingsRepositoryImpl.kt
 create mode 100644 app/src/main/java/com/quick/browser/data/security/SecurityPolicyManager.kt
 create mode 100644 app/src/main/java/com/quick/browser/di/BubbleComponentFactory.kt
 create mode 100644 app/src/main/java/com/quick/browser/di/DatabaseModule.kt
 create mode 100644 app/src/main/java/com/quick/browser/di/ReadabilityModule.kt
 create mode 100644 app/src/main/java/com/quick/browser/di/RepositoryModule.kt
 create mode 100644 app/src/main/java/com/quick/browser/di/ServiceModule.kt
 create mode 100644 app/src/main/java/com/quick/browser/di/UseCaseModule.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/error/DomainError.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/model/Bubble.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/model/Folder.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/model/FolderArticle.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/model/HistoryItem.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/model/SavedArticle.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/model/SavedArticleItem.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/model/Settings.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/model/WebPage.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/repository/ArticleRepository.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/repository/BubbleRepository.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/repository/FolderRepository.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/repository/HistoryRepository.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/repository/SettingsRepository.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/result/Result.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/service/ArticleSavingService.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/service/EncryptedPreferencesService.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/service/ModelDownloadService.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/service/SecurityPolicyService.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/AddArticleToFolderUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/CloseBubbleUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/CreateBubbleUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/CreateFolderUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/DeleteAllPagesUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/DeleteArticleUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/DeleteWebPageUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/GetAllFoldersUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/GetArticlesInFolderUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/GetHistoryUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/GetMostVisitedPagesUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/GetRecentPagesUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/GetSavedArticlesUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/GetSettingsUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/IncrementVisitCountUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/RemoveArticleFromFolderUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/SaveArticleUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/SaveWebPageUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/SearchArticlesInFolderUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/SearchHistoryUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/SearchSavedArticlesUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/UpdateOfflineStatusUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/domain/usecase/UpdateSettingsUseCase.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/navigation/NavGraph.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/base/BaseViewModel.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/base/UiAction.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/base/UiEvent.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/base/UiState.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/BrowserUiState.kt
 create mode 100755 app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleAnimator.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleIntentProcessor.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleReadModeManager.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleResizeBarHandler.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleSettingsPanel.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleStateManager.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleSummaryManager.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleTouchHandler.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleUIManager.kt
 create mode 100755 app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleView.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleViewModel.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleWebViewManager.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleWebViewManagerInterface.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/OfflineArticleSaver.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/ScrollAwareWebViewClient.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/UrlBarView.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/WebViewClientEx.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/browser/WebViewModel.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/components/BaseActivity.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/components/HorizontalSwipeRefreshLayout.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/history/HistoryActivity.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/history/HistoryAdapter.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/history/HistoryUiState.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/history/HistoryViewModel.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/main/MainActivity.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/main/MainUiState.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/main/MainViewModel.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/reader/OfflineReaderActivity.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/saved/FolderItem.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/saved/FolderSelectionAdapter.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/saved/FoldersAdapter.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/saved/SavedArticlesActivity.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/saved/SavedArticlesAdapter.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/saved/SavedArticlesUiState.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/saved/SavedArticlesViewModel.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/settings/SettingsActivity.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/settings/SettingsUiState.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/settings/SettingsViewModel.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/theme/Color.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/theme/Theme.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/theme/ThemeColorPalatte.kt
 create mode 100644 app/src/main/java/com/quick/browser/presentation/ui/theme/Typography.kt
 create mode 100644 app/src/main/java/com/quick/browser/service/AdBlockUpdateService.kt
 create mode 100644 app/src/main/java/com/quick/browser/service/AdBlockingService.kt
 create mode 100644 app/src/main/java/com/quick/browser/service/AuthenticationService.kt
 create mode 100644 app/src/main/java/com/quick/browser/service/BubbleDisplayManager.kt
 create mode 100644 app/src/main/java/com/quick/browser/service/BubbleManager.kt
 create mode 100644 app/src/main/java/com/quick/browser/service/BubbleNotificationManager.kt
 create mode 100755 app/src/main/java/com/quick/browser/service/BubbleService.kt
 create mode 100644 app/src/main/java/com/quick/browser/service/ReadabilityService.kt
 create mode 100644 app/src/main/java/com/quick/browser/service/SettingsService.kt
 create mode 100644 app/src/main/java/com/quick/browser/service/SummarizationService.kt
 create mode 100644 app/src/main/java/com/quick/browser/utils/Constants.kt
 create mode 100644 app/src/main/java/com/quick/browser/utils/ErrorHandler.kt
 create mode 100644 app/src/main/java/com/quick/browser/utils/JavaScriptSanitizer.kt
 create mode 100644 app/src/main/java/com/quick/browser/utils/Logger.kt
 create mode 100644 app/src/main/java/com/quick/browser/utils/LoggingTag.kt
 create mode 100644 app/src/main/java/com/quick/browser/utils/QuickBrowserGlideModule.kt
 create mode 100644 app/src/main/java/com/quick/browser/utils/UrlUtils.kt
 create mode 100644 app/src/main/java/com/quick/browser/utils/ViewExtensions.kt
 create mode 100644 app/src/main/java/com/quick/browser/utils/network/ModelDownloader.kt
 create mode 100644 app/src/main/java/com/quick/browser/utils/security/SecurityPolicyManager.kt
 create mode 100644 app/src/main/res/drawable-night/address_bar_background.xml
 create mode 100644 app/src/main/res/drawable-night/address_bar_container_background.xml
 create mode 100644 app/src/main/res/drawable/address_bar_background.xml
 create mode 100644 app/src/main/res/drawable/address_bar_container_background.xml
 create mode 100644 app/src/main/res/drawable/bubble_background.xml
 create mode 100644 app/src/main/res/drawable/color_item_ripple.xml
 create mode 100644 app/src/main/res/drawable/delete_button_background.xml
 create mode 100644 app/src/main/res/drawable/dialog_background.xml
 create mode 100644 app/src/main/res/drawable/favicon_background.xml
 create mode 100644 app/src/main/res/drawable/gradient_overlay.xml
 create mode 100644 app/src/main/res/drawable/ic_add.xml
 create mode 100644 app/src/main/res/drawable/ic_arrow_back.xml
 create mode 100644 app/src/main/res/drawable/ic_arrow_right_circle.xml
 create mode 100644 app/src/main/res/drawable/ic_article.xml
 create mode 100644 app/src/main/res/drawable/ic_article_saved.xml
 create mode 100644 app/src/main/res/drawable/ic_back_arrow.xml
 create mode 100644 app/src/main/res/drawable/ic_block_ads.xml
 create mode 100644 app/src/main/res/drawable/ic_calendar_month.xml
 create mode 100644 app/src/main/res/drawable/ic_check.xml
 create mode 100644 app/src/main/res/drawable/ic_chevron_left.xml
 create mode 100644 app/src/main/res/drawable/ic_chevron_right.xml
 create mode 100644 app/src/main/res/drawable/ic_clear_all.xml
 create mode 100644 app/src/main/res/drawable/ic_close.xml
 create mode 100644 app/src/main/res/drawable/ic_delete.xml
 create mode 100644 app/src/main/res/drawable/ic_download.xml
 create mode 100644 app/src/main/res/drawable/ic_folder.xml
 create mode 100644 app/src/main/res/drawable/ic_format_align_center.xml
 create mode 100644 app/src/main/res/drawable/ic_format_align_justify.xml
 create mode 100644 app/src/main/res/drawable/ic_format_align_left.xml
 create mode 100644 app/src/main/res/drawable/ic_format_align_right.xml
 create mode 100644 app/src/main/res/drawable/ic_forward_arrow.xml
 create mode 100644 app/src/main/res/drawable/ic_globe.xml
 create mode 100644 app/src/main/res/drawable/ic_history.xml
 create mode 100644 app/src/main/res/drawable/ic_history_empty.xml
 create mode 100644 app/src/main/res/drawable/ic_javascript.xml
 create mode 100644 app/src/main/res/drawable/ic_launch.xml
 create mode 100644 app/src/main/res/drawable/ic_launcher_background.xml
 create mode 100644 app/src/main/res/drawable/ic_launcher_foreground.xml
 create mode 100644 app/src/main/res/drawable/ic_menu.xml
 create mode 100644 app/src/main/res/drawable/ic_minimize.xml
 create mode 100644 app/src/main/res/drawable/ic_more_vert.xml
 create mode 100644 app/src/main/res/drawable/ic_offline.xml
 create mode 100644 app/src/main/res/drawable/ic_open_full.xml
 create mode 100644 app/src/main/res/drawable/ic_read_mode.xml
 create mode 100644 app/src/main/res/drawable/ic_save.xml
 create mode 100644 app/src/main/res/drawable/ic_save_article.xml
 create mode 100644 app/src/main/res/drawable/ic_search.xml
 create mode 100644 app/src/main/res/drawable/ic_settings.xml
 create mode 100644 app/src/main/res/drawable/ic_share.xml
 create mode 100644 app/src/main/res/drawable/ic_summarize.xml
 create mode 100644 app/src/main/res/drawable/ic_today.xml
 create mode 100644 app/src/main/res/drawable/ic_web_page.xml
 create mode 100644 app/src/main/res/drawable/ic_website.xml
 create mode 100644 app/src/main/res/drawable/pill_background_selector.xml
 create mode 100644 app/src/main/res/drawable/progress_circle.xml
 create mode 100644 app/src/main/res/drawable/resize_bar_background.xml
 create mode 100644 app/src/main/res/drawable/resize_corner_bottom_left.xml
 create mode 100644 app/src/main/res/drawable/resize_corner_bottom_right.xml
 create mode 100644 app/src/main/res/drawable/resize_corner_top_left.xml
 create mode 100644 app/src/main/res/drawable/resize_corner_top_right.xml
 create mode 100644 app/src/main/res/layout/activity_history.xml
 create mode 100644 app/src/main/res/layout/activity_main.xml
 create mode 100644 app/src/main/res/layout/activity_offline_reader.xml
 create mode 100644 app/src/main/res/layout/activity_saved_articles.xml
 create mode 100644 app/src/main/res/layout/activity_settings.xml
 create mode 100644 app/src/main/res/layout/bubble_layout.xml
 create mode 100644 app/src/main/res/layout/dialog_create_folder.xml
 create mode 100644 app/src/main/res/layout/dialog_delete_options.xml
 create mode 100644 app/src/main/res/layout/dialog_select_folder.xml
 create mode 100644 app/src/main/res/layout/item_folder.xml
 create mode 100644 app/src/main/res/layout/item_folder_selection.xml
 create mode 100644 app/src/main/res/layout/item_history.xml
 create mode 100644 app/src/main/res/layout/item_history_card.xml
 create mode 100644 app/src/main/res/layout/item_history_header.xml
 create mode 100644 app/src/main/res/layout/item_saved_article.xml
 create mode 100644 app/src/main/res/layout/layout_side_panel.xml
 create mode 100644 app/src/main/res/layout/toolbar_custom.xml
 create mode 100644 app/src/main/res/layout/toolbar_custom_history.xml
 create mode 100644 app/src/main/res/layout/toolbar_custom_reader.xml
 create mode 100644 app/src/main/res/layout/toolbar_custom_saved.xml
 create mode 100644 app/src/main/res/layout/toolbar_custom_saved_search.xml
 create mode 100644 app/src/main/res/layout/toolbar_custom_settings.xml
 create mode 100644 app/src/main/res/layout/url_bar_layout.xml
 create mode 100644 app/src/main/res/menu/history_menu.xml
 create mode 100644 app/src/main/res/menu/main_menu.xml
 create mode 100644 app/src/main/res/mipmap-hdpi/ic_launcher.xml
 create mode 100644 app/src/main/res/mipmap-hdpi/ic_launcher_round.xml
 create mode 100644 app/src/main/res/mipmap-mdpi/ic_launcher.xml
 create mode 100644 app/src/main/res/mipmap-mdpi/ic_launcher_round.xml
 create mode 100644 app/src/main/res/mipmap-xhdpi/ic_launcher.xml
 create mode 100644 app/src/main/res/mipmap-xhdpi/ic_launcher_round.xml
 create mode 100644 app/src/main/res/mipmap-xxhdpi/ic_launcher.xml
 create mode 100644 app/src/main/res/mipmap-xxhdpi/ic_launcher_round.xml
 create mode 100644 app/src/main/res/mipmap-xxxhdpi/ic_launcher.xml
 create mode 100644 app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.xml
 create mode 100644 app/src/main/res/values-night/colors.xml
 create mode 100644 app/src/main/res/values-night/themes.xml
 create mode 100755 app/src/main/res/values/colors.xml
 create mode 100644 app/src/main/res/values/dimens.xml
 create mode 100644 app/src/main/res/values/ids.xml
 create mode 100644 app/src/main/res/values/strings.xml
 create mode 100644 app/src/main/res/values/styles.xml
 create mode 100644 app/src/main/res/values/themes.xml
 create mode 100644 app/src/main/res/xml/file_paths.xml
 create mode 100644 app/src/test/java/com/quick/browser/data/local/dao/WebPageDaoTest.kt
 create mode 100644 app/src/test/java/com/quick/browser/data/repository/SettingsRepositoryImplTest.kt
 create mode 100644 app/src/test/java/com/quick/browser/domain/usecase/GetSettingsUseCaseTest.kt
 create mode 100644 app/src/test/java/com/quick/browser/domain/usecase/SaveArticleUseCaseTest.kt
 create mode 100644 app/src/test/java/com/quick/browser/service/AdBlockingServiceTest.kt
 create mode 100644 app/src/test/java/com/quick/browser/service/SettingsServiceTest.kt
 create mode 100644 app/src/test/java/com/quick/browser/utils/JavaScriptSanitizerTest.kt
 create mode 100644 app/src/test/java/com/quick/browser/utils/UrlUtilsTest.kt
 create mode 100644 build.gradle
 create mode 100644 gradle.properties
 create mode 100644 gradle/wrapper/gradle-wrapper.jar
 create mode 100644 gradle/wrapper/gradle-wrapper.properties
 create mode 100755 gradlew
 create mode 100644 gradlew.bat
 create mode 100644 local.properties
 create mode 100644 replace_logs.py
 create mode 100644 settings.gradle

diff --git a/.github/workflows/build-apk.yml b/.github/workflows/build-apk.yml
new file mode 100644
index 0000000..8f88802
--- /dev/null
+++ b/.github/workflows/build-apk.yml
@@ -0,0 +1,64 @@
+name: Build APK
+
+on:
+  push:
+    branches: [ main, master, develop ]
+  pull_request:
+    branches: [ main, master, develop ]
+  workflow_dispatch:
+
+jobs:
+  build:
+    runs-on: ubuntu-latest
+    
+    steps:
+    - name: Checkout code
+      uses: actions/checkout@v4
+      
+    - name: Set up JDK 21
+      uses: actions/setup-java@v4
+      with:
+        java-version: '21.0.7'
+        distribution: 'oracle'
+        architecture: 'x64'
+        
+    - name: Cache Gradle packages
+      uses: actions/cache@v4
+      with:
+        path: |
+          ~/.gradle/caches
+          ~/.gradle/wrapper
+        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
+        restore-keys: |
+          ${{ runner.os }}-gradle-
+          
+    - name: Make gradlew executable
+      run: chmod +x ./gradlew
+      
+    - name: Run tests
+      run: ./gradlew test
+      
+    - name: Build with Gradle
+      run: ./gradlew build
+      
+    - name: Build Debug APK
+      run: ./gradlew assembleDebug
+      
+    - name: Upload Debug APK
+      uses: actions/upload-artifact@v4
+      with:
+        name: quick-browser-debug
+        path: app/build/outputs/apk/debug/app-debug.apk
+        retention-days: 30
+        
+    - name: Build Release APK (if not PR)
+      if: github.event_name != 'pull_request'
+      run: ./gradlew assembleRelease
+      
+    - name: Upload Release APK (if not PR)
+      if: github.event_name != 'pull_request'
+      uses: actions/upload-artifact@v4
+      with:
+        name: quick-browser-release
+        path: app/build/outputs/apk/release/app-release.apk
+        retention-days: 30
\ No newline at end of file
diff --git a/.github/workflows/release.yml b/.github/workflows/release.yml
new file mode 100644
index 0000000..6511781
--- /dev/null
+++ b/.github/workflows/release.yml
@@ -0,0 +1,75 @@
+name: Release APK
+
+permissions:
+  contents: write
+
+on:
+  push:
+    tags:
+      - 'v*'
+  workflow_dispatch:
+
+jobs:
+  release:
+    runs-on: ubuntu-latest
+    
+    steps:
+    - name: Checkout code
+      uses: actions/checkout@v4
+      
+    - name: Set up JDK 21
+      uses: actions/setup-java@v4
+      with:
+        java-version: '21.0.7'
+        distribution: 'oracle'
+        architecture: 'x64'
+        
+    - name: Cache Gradle packages
+      uses: actions/cache@v4
+      with:
+        path: |
+          ~/.gradle/caches
+          ~/.gradle/wrapper
+        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
+        restore-keys: |
+          ${{ runner.os }}-gradle-
+          
+    - name: Make gradlew executable
+      run: chmod +x ./gradlew
+      
+    - name: Run tests
+      run: ./gradlew test
+      
+    - name: Build Release APK
+      run: ./gradlew assembleRelease
+      
+    - name: Sign APK (if keystore available)
+      if: env.KEYSTORE_FILE != ''
+      run: |
+        echo ${{ secrets.KEYSTORE_FILE }} | base64 -d > keystore.jks
+        ./gradlew assembleRelease \
+          -Pandroid.injected.signing.store.file=$(pwd)/keystore.jks \
+          -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} \
+          -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} \
+          -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}
+      env:
+        KEYSTORE_FILE: ${{ secrets.KEYSTORE_FILE }}
+        
+    - name: Get version from tag
+      id: get_version
+      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
+      
+    - name: Rename APK with tag
+      run: |
+        cp app/build/outputs/apk/release/app-release.apk quick-browser-${{ github.ref_name }}.apk
+
+    - name: Create GitHub Release and Upload Assets
+      uses: softprops/action-gh-release@v1
+      with:
+        tag_name: ${{ github.ref_name }}
+        name: Quick Browser ${{ github.ref_name }}
+        generate_release_notes: true
+        files: |
+          quick-browser-${{ github.ref_name }}.apk
+      env:
+        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
\ No newline at end of file
diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..f6e6851
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,12 @@
+# Files
+.java-version
+
+# Folders
+.idea/
+.gradle/
+.vscode/
+.DS_Store
+.kotlin/
+build/
+app/build/
+extras/
\ No newline at end of file
diff --git a/LICENSE b/LICENSE
new file mode 100644
index 0000000..e7c8bea
--- /dev/null
+++ b/LICENSE
@@ -0,0 +1,674 @@
+GNU GENERAL PUBLIC LICENSE
+                       Version 3, 29 June 2007
+
+ Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The GNU General Public License is a free, copyleft license for
+software and other kinds of works.
+
+  The licenses for most software and other practical works are designed
+to take away your freedom to share and change the works.  By contrast,
+the GNU General Public License is intended to guarantee your freedom to
+share and change all versions of a program--to make sure it remains free
+software for all its users.  We, the Free Software Foundation, use the
+GNU General Public License for most of our software; it applies also to
+any other work released this way by its authors.  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+them if you wish), that you receive source code or can get it if you
+want it, that you can change the software or use pieces of it in new
+free programs, and that you know you can do these things.
+
+  To protect your rights, we need to prevent others from denying you
+these rights or asking you to surrender the rights.  Therefore, you have
+certain responsibilities if you distribute copies of the software, or if
+you modify it: responsibilities to respect the freedom of others.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must pass on to the recipients the same
+freedoms that you received.  You must make sure that they, too, receive
+or can get the source code.  And you must show them these terms so they
+know their rights.
+
+  Developers that use the GNU GPL protect your rights with two steps:
+(1) assert copyright on the software, and (2) offer you this License
+giving you legal permission to copy, distribute and/or modify it.
+
+  For the developers' and authors' protection, the GPL clearly explains
+that there is no warranty for this free software.  For both users' and
+authors' sake, the GPL requires that modified versions be marked as
+changed, so that their problems will not be attributed erroneously to
+authors of previous versions.
+
+  Some devices are designed to deny users access to install or run
+modified versions of the software inside them, although the manufacturer
+can do so.  This is fundamentally incompatible with the aim of
+protecting users' freedom to change the software.  The systematic
+pattern of such abuse occurs in the area of products for individuals to
+use, which is precisely where it is most unacceptable.  Therefore, we
+have designed this version of the GPL to prohibit the practice for those
+products.  If such problems arise substantially in other domains, we
+stand ready to extend this provision to those domains in future versions
+of the GPL, as needed to protect the freedom of users.
+
+  Finally, every program is threatened constantly by software patents.
+States should not allow patents to restrict development and use of
+software on general-purpose computers, but in those that do, we wish to
+avoid the special danger that patents applied to a free program could
+make it effectively proprietary.  To prevent this, the GPL assures that
+patents cannot be used to render the program non-free.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                       TERMS AND CONDITIONS
+
+  0. Definitions.
+
+  "This License" refers to version 3 of the GNU General Public License.
+
+  "Copyright" also means copyright-like laws that apply to other kinds of
+works, such as semiconductor masks.
+
+  "The Program" refers to any copyrightable work licensed under this
+License.  Each licensee is addressed as "you".  "Licensees" and
+"recipients" may be individuals or organizations.
+
+  To "modify" a work means to copy from or adapt all or part of the work
+in a fashion requiring copyright permission, other than the making of an
+exact copy.  The resulting work is called a "modified version" of the
+earlier work or a work "based on" the earlier work.
+
+  A "covered work" means either the unmodified Program or a work based
+on the Program.
+
+  To "propagate" a work means to do anything with it that, without
+permission, would make you directly or secondarily liable for
+infringement under applicable copyright law, except executing it on a
+computer or modifying a private copy.  Propagation includes copying,
+distribution (with or without modification), making available to the
+public, and in some countries other activities as well.
+
+  To "convey" a work means any kind of propagation that enables other
+parties to make or receive copies.  Mere interaction with a user through
+a computer network, with no transfer of a copy, is not conveying.
+
+  An interactive user interface displays "Appropriate Legal Notices"
+to the extent that it includes a convenient and prominently visible
+feature that (1) displays an appropriate copyright notice, and (2)
+tells the user that there is no warranty for the work (except to the
+extent that warranties are provided), that licensees may convey the
+work under this License, and how to view a copy of this License.  If
+the interface presents a list of user commands or options, such as a
+menu, a prominent item in the list meets this criterion.
+
+  1. Source Code.
+
+  The "source code" for a work means the preferred form of the work
+for making modifications to it.  "Object code" means any non-source
+form of a work.
+
+  A "Standard Interface" means an interface that either is an official
+standard defined by a recognized standards body, or, in the case of
+interfaces specified for a particular programming language, one that
+is widely used among developers working in that language.
+
+  The "System Libraries" of an executable work include anything, other
+than the work as a whole, that (a) is included in the normal form of
+packaging a Major Component, but which is not part of that Major
+Component, and (b) serves only to enable use of the work with that
+Major Component, or to implement a Standard Interface for which an
+implementation is available to the public in source code form.  A
+"Major Component", in this context, means a major essential component
+(kernel, window system, and so on) of the specific operating system
+(if any) on which the executable work runs, or a compiler used to
+produce the work, or an object code interpreter used to run it.
+
+  The "Corresponding Source" for a work in object code form means all
+the source code needed to generate, install, and (for an executable
+work) run the object code and to modify the work, including scripts to
+control those activities.  However, it does not include the work's
+System Libraries, or general-purpose tools or generally available free
+programs which are used unmodified in performing those activities but
+which are not part of the work.  For example, Corresponding Source
+includes interface definition files associated with source files for
+the work, and the source code for shared libraries and dynamically
+linked subprograms that the work is specifically designed to require,
+such as by intimate data communication or control flow between those
+subprograms and other parts of the work.
+
+  The Corresponding Source need not include anything that users
+can regenerate automatically from other parts of the Corresponding
+Source.
+
+  The Corresponding Source for a work in source code form is that
+same work.
+
+  2. Basic Permissions.
+
+  All rights granted under this License are granted for the term of
+copyright on the Program, and are irrevocable provided the stated
+conditions are met.  This License explicitly affirms your unlimited
+permission to run the unmodified Program.  The output from running a
+covered work is covered by this License only if the output, given its
+content, constitutes a covered work.  This License acknowledges your
+rights of fair use or other equivalent, as provided by copyright law.
+
+  You may make, run and propagate covered works that you do not
+convey, without conditions so long as your license otherwise remains
+in force.  You may convey covered works to others for the sole purpose
+of having them make modifications exclusively for you, or provide you
+with facilities for running those works, provided that you comply with
+the terms of this License in conveying all material for which you do
+not control copyright.  Those thus making or running the covered works
+for you must do so exclusively on your behalf, under your direction
+and control, on terms that prohibit them from making any copies of
+your copyrighted material outside their relationship with you.
+
+  Conveying under any other circumstances is permitted solely under
+the conditions stated below.  Sublicensing is not allowed; section 10
+makes it unnecessary.
+
+  3. Protecting Users' Legal Rights From Anti-Circumvention Law.
+
+  No covered work shall be deemed part of an effective technological
+measure under any applicable law fulfilling obligations under article
+11 of the WIPO copyright treaty adopted on 20 December 1996, or
+similar laws prohibiting or restricting circumvention of such
+measures.
+
+  When you convey a covered work, you waive any legal power to forbid
+circumvention of technological measures to the extent such circumvention
+is effected by exercising rights under this License with respect to
+the covered work, and you disclaim any intention to limit operation or
+modification of the work as a means of enforcing, against the work's
+users, your or third parties' legal rights to forbid circumvention of
+technological measures.
+
+  4. Conveying Verbatim Copies.
+
+  You may convey verbatim copies of the Program's source code as you
+receive it, in any medium, provided that you conspicuously and
+appropriately publish on each copy an appropriate copyright notice;
+keep intact all notices stating that this License and any
+non-permissive terms added in accord with section 7 apply to the code;
+keep intact all notices of the absence of any warranty; and give all
+recipients a copy of this License along with the Program.
+
+  You may charge any price or no price for each copy that you convey,
+and you may offer support or warranty protection for a fee.
+
+  5. Conveying Modified Source Versions.
+
+  You may convey a work based on the Program, or the modifications to
+produce it from the Program, in the form of source code under the
+terms of section 4, provided that you also meet all of these conditions:
+
+    a) The work must carry prominent notices stating that you modified
+    it, and giving a relevant date.
+
+    b) The work must carry prominent notices stating that it is
+    released under this License and any conditions added under section
+    7.  This requirement modifies the requirement in section 4 to
+    "keep intact all notices".
+
+    c) You must license the entire work, as a whole, under this
+    License to anyone who comes into possession of a copy.  This
+    License will therefore apply, along with any applicable section 7
+    additional terms, to the whole of the work, and all its parts,
+    regardless of how they are packaged.  This License gives no
+    permission to license the work in any other way, but it does not
+    invalidate such permission if you have separately received it.
+
+    d) If the work has interactive user interfaces, each must display
+    Appropriate Legal Notices; however, if the Program has interactive
+    interfaces that do not display Appropriate Legal Notices, your
+    work need not make them do so.
+
+  A compilation of a covered work with other separate and independent
+works, which are not by their nature extensions of the covered work,
+and which are not combined with it such as to form a larger program,
+in or on a volume of a storage or distribution medium, is called an
+"aggregate" if the compilation and its resulting copyright are not
+used to limit the access or legal rights of the compilation's users
+beyond what the individual works permit.  Inclusion of a covered work
+in an aggregate does not cause this License to apply to the other
+parts of the aggregate.
+
+  6. Conveying Non-Source Forms.
+
+  You may convey a covered work in object code form under the terms
+of sections 4 and 5, provided that you also convey the
+machine-readable Corresponding Source under the terms of this License,
+in one of these ways:
+
+    a) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by the
+    Corresponding Source fixed on a durable physical medium
+    customarily used for software interchange.
+
+    b) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by a
+    written offer, valid for at least three years and valid for as
+    long as you offer spare parts or customer support for that product
+    model, to give anyone who possesses the object code either (1) a
+    copy of the Corresponding Source for all the software in the
+    product that is covered by this License, on a durable physical
+    medium customarily used for software interchange, for a price no
+    more than your reasonable cost of physically performing this
+    conveying of source, or (2) access to copy the
+    Corresponding Source from a network server at no charge.
+
+    c) Convey individual copies of the object code with a copy of the
+    written offer to provide the Corresponding Source.  This
+    alternative is allowed only occasionally and noncommercially, and
+    only if you received the object code with such an offer, in accord
+    with subsection 6b.
+
+    d) Convey the object code by offering access from a designated
+    place (gratis or for a charge), and offer equivalent access to the
+    Corresponding Source in the same way through the same place at no
+    further charge.  You need not require recipients to copy the
+    Corresponding Source along with the object code.  If the place to
+    copy the object code is a network server, the Corresponding Source
+    may be on a different server (operated by you or a third party)
+    that supports equivalent copying facilities, provided you maintain
+    clear directions next to the object code saying where to find the
+    Corresponding Source.  Regardless of what server hosts the
+    Corresponding Source, you remain obligated to ensure that it is
+    available for as long as needed to satisfy these requirements.
+
+    e) Convey the object code using peer-to-peer transmission, provided
+    you inform other peers where the object code and Corresponding
+    Source of the work are being offered to the general public at no
+    charge under subsection 6d.
+
+  A separable portion of the object code, whose source code is excluded
+from the Corresponding Source as a System Library, need not be
+included in conveying the object code work.
+
+  A "User Product" is either (1) a "consumer product", which means any
+tangible personal property which is normally used for personal, family,
+or household purposes, or (2) anything designed or sold for incorporation
+into a dwelling.  In determining whether a product is a consumer product,
+doubtful cases shall be resolved in favor of coverage.  For a particular
+product received by a particular user, "normally used" refers to a
+typical or common use of that class of product, regardless of the status
+of the particular user or of the way in which the particular user
+actually uses, or expects or is expected to use, the product.  A product
+is a consumer product regardless of whether the product has substantial
+commercial, industrial or non-consumer uses, unless such uses represent
+the only significant mode of use of the product.
+
+  "Installation Information" for a User Product means any methods,
+procedures, authorization keys, or other information required to install
+and execute modified versions of a covered work in that User Product from
+a modified version of its Corresponding Source.  The information must
+suffice to ensure that the continued functioning of the modified object
+code is in no case prevented or interfered with solely because
+modification has been made.
+
+  If you convey an object code work under this section in, or with, or
+specifically for use in, a User Product, and the conveying occurs as
+part of a transaction in which the right of possession and use of the
+User Product is transferred to the recipient in perpetuity or for a
+fixed term (regardless of how the transaction is characterized), the
+Corresponding Source conveyed under this section must be accompanied
+by the Installation Information.  But this requirement does not apply
+if neither you nor any third party retains the ability to install
+modified object code on the User Product (for example, the work has
+been installed in ROM).
+
+  The requirement to provide Installation Information does not include a
+requirement to continue to provide support service, warranty, or updates
+for a work that has been modified or installed by the recipient, or for
+the User Product in which it has been modified or installed.  Access to a
+network may be denied when the modification itself materially and
+adversely affects the operation of the network or violates the rules and
+protocols for communication across the network.
+
+  Corresponding Source conveyed, and Installation Information provided,
+in accord with this section must be in a format that is publicly
+documented (and with an implementation available to the public in
+source code form), and must require no special password or key for
+unpacking, reading or copying.
+
+  7. Additional Terms.
+
+  "Additional permissions" are terms that supplement the terms of this
+License by making exceptions from one or more of its conditions.
+Additional permissions that are applicable to the entire Program shall
+be treated as though they were included in this License, to the extent
+that they are valid under applicable law.  If additional permissions
+apply only to part of the Program, that part may be used separately
+under those permissions, but the entire Program remains governed by
+this License without regard to the additional permissions.
+
+  When you convey a copy of a covered work, you may at your option
+remove any additional permissions from that copy, or from any part of
+it.  (Additional permissions may be written to require their own
+removal in certain cases when you modify the work.)  You may place
+additional permissions on material, added by you to a covered work,
+for which you have or can give appropriate copyright permission.
+
+  Notwithstanding any other provision of this License, for material you
+add to a covered work, you may (if authorized by the copyright holders of
+that material) supplement the terms of this License with terms:
+
+    a) Disclaiming warranty or limiting liability differently from the
+    terms of sections 15 and 16 of this License; or
+
+    b) Requiring preservation of specified reasonable legal notices or
+    author attributions in that material or in the Appropriate Legal
+    Notices displayed by works containing it; or
+
+    c) Prohibiting misrepresentation of the origin of that material, or
+    requiring that modified versions of such material be marked in
+    reasonable ways as different from the original version; or
+
+    d) Limiting the use for publicity purposes of names of licensors or
+    authors of the material; or
+
+    e) Declining to grant rights under trademark law for use of some
+    trade names, trademarks, or service marks; or
+
+    f) Requiring indemnification of licensors and authors of that
+    material by anyone who conveys the material (or modified versions of
+    it) with contractual assumptions of liability to the recipient, for
+    any liability that these contractual assumptions directly impose on
+    those licensors and authors.
+
+  All other non-permissive additional terms are considered "further
+restrictions" within the meaning of section 10.  If the Program as you
+received it, or any part of it, contains a notice stating that it is
+governed by this License along with a term that is a further
+restriction, you may remove that term.  If a license document contains
+a further restriction but permits relicensing or conveying under this
+License, you may add to a covered work material governed by the terms
+of that license document, provided that the further restriction does
+not survive such relicensing or conveying.
+
+  If you add terms to a covered work in accord with this section, you
+must place, in the relevant source files, a statement of the
+additional terms that apply to those files, or a notice indicating
+where to find the applicable terms.
+
+  Additional terms, permissive or non-permissive, may be stated in the
+form of a separately written license, or stated as exceptions;
+the above requirements apply either way.
+
+  8. Termination.
+
+  You may not propagate or modify a covered work except as expressly
+provided under this License.  Any attempt otherwise to propagate or
+modify it is void, and will automatically terminate your rights under
+this License (including any patent licenses granted under the third
+paragraph of section 11).
+
+  However, if you cease all violation of this License, then your
+license from a particular copyright holder is reinstated (a)
+provisionally, unless and until the copyright holder explicitly and
+finally terminates your license, and (b) permanently, if the copyright
+holder fails to notify you of the violation by some reasonable means
+prior to 60 days after the cessation.
+
+  Moreover, your license from a particular copyright holder is
+reinstated permanently if the copyright holder notifies you of the
+violation by some reasonable means, this is the first time you have
+received notice of violation of this License (for any work) from that
+copyright holder, and you cure the violation prior to 30 days after
+your receipt of the notice.
+
+  Termination of your rights under this section does not terminate the
+licenses of parties who have received copies or rights from you under
+this License.  If your rights have been terminated and not permanently
+reinstated, you do not qualify to receive new licenses for the same
+material under section 10.
+
+  9. Acceptance Not Required for Having Copies.
+
+  You are not required to accept this License in order to receive or
+run a copy of the Program.  Ancillary propagation of a covered work
+occurring solely as a consequence of using peer-to-peer transmission
+to receive a copy likewise does not require acceptance.  However,
+nothing other than this License grants you permission to propagate or
+modify any covered work.  These actions infringe copyright if you do
+not accept this License.  Therefore, by modifying or propagating a
+covered work, you indicate your acceptance of this License to do so.
+
+  10. Automatic Licensing of Downstream Recipients.
+
+  Each time you convey a covered work, the recipient automatically
+receives a license from the original licensors, to run, modify and
+propagate that work, subject to this License.  You are not responsible
+for enforcing compliance by third parties with this License.
+
+  An "entity transaction" is a transaction transferring control of an
+organization, or substantially all assets of one, or subdividing an
+organization, or merging organizations.  If propagation of a covered
+work results from an entity transaction, each party to that transaction
+who receives a copy of the work also receives whatever licenses to the
+work the party's predecessor in interest had or could give under the
+previous paragraph, plus a right to possession of the Corresponding
+Source of the work from the predecessor in interest, if the predecessor
+has it or can get it with reasonable efforts.
+
+  You may not impose any further restrictions on the exercise of the
+rights granted or affirmed under this License.  For example, you may
+not impose a license fee, royalty, or other charge for exercise of
+rights granted under this License, and you may not initiate litigation
+(including a cross-claim or counterclaim in a lawsuit) alleging that
+any patent claim is infringed by making, using, selling, offering for
+sale, or importing the Program or any portion of it.
+
+  11. Patents.
+
+  A "contributor" is a copyright holder who authorizes use under this
+License of the Program or a work on which the Program is based.  The
+work thus licensed is called the contributor's "contributor version".
+
+  A contributor's "essential patent claims" are all patent claims
+owned or controlled by the contributor, whether already acquired or
+hereafter acquired, that would be infringed by some manner, permitted
+by this License, of making, using, or selling its contributor version,
+but do not include claims that would be infringed only as a
+consequence of further modification of the contributor version.  For
+purposes of this definition, "control" includes the right to grant
+patent sublicenses in a manner consistent with the requirements of
+this License.
+
+  Each contributor grants you a non-exclusive, worldwide, royalty-free
+patent license under the contributor's essential patent claims, to
+make, use, sell, offer for sale, import and otherwise run, modify and
+propagate the contents of its contributor version.
+
+  In the following three paragraphs, a "patent license" is any express
+agreement or commitment, however denominated, not to enforce a patent
+(such as an express permission to practice a patent or covenant not to
+sue for patent infringement).  To "grant" such a patent license to a
+party means to make such an agreement or commitment not to enforce a
+patent against the party.
+
+  If you convey a covered work, knowingly relying on a patent license,
+and the Corresponding Source of the work is not available for anyone
+to copy, free of charge and under the terms of this License, through
+a publicly available network server or other readily accessible means,
+then you must either (1) cause the Corresponding Source to be so
+available, or (2) arrange to deprive yourself of the benefit of the
+patent license for this particular work, or (3) arrange, in a manner
+consistent with the requirements of this License, to extend the patent
+license to downstream recipients.  "Knowingly relying" means you have
+actual knowledge that, but for the patent license, your conveying the
+covered work in a country, or your recipient's use of the covered work
+in a country, would infringe one or more identifiable patents in that
+country that you have reason to believe are valid.
+
+  If, pursuant to or in connection with a single transaction or
+arrangement, you convey, or propagate by procuring conveyance of, a
+covered work, and grant a patent license to some of the parties
+receiving the covered work authorizing them to use, propagate, modify
+or convey a specific copy of the covered work, then the patent license
+you grant is automatically extended to all recipients of the covered
+work and works based on it.
+
+  A patent license is "discriminatory" if it does not include within
+the scope of its coverage, prohibits the exercise of, or is
+conditioned on the non-exercise of one or more of the rights that are
+specifically granted under this License.  You may not convey a covered
+work if you are a party to an arrangement with a third party that is
+in the business of distributing software, under which you make payment
+to the third party based on the extent of your activity of conveying
+the work, and under which the third party grants, to any of the parties
+who would receive the covered work from you, a discriminatory patent
+license (a) in connection with copies of the covered work conveyed by
+you (or copies made from those copies), or (b) primarily for and in
+connection with specific products or compilations that contain the
+covered work, unless you entered into that arrangement, or that patent
+license was granted, prior to 28 March 2007.
+
+  Nothing in this License shall be construed as excluding or limiting
+any implied license or other defenses to infringement that may
+otherwise be available to you under applicable patent law.
+
+  12. No Surrender of Others' Freedom.
+
+  If conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot convey a
+covered work so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you may
+not convey it at all.  For example, if you agree to terms that obligate
+you to collect a royalty for further conveying from those to whom you
+convey the Program, the only way you could satisfy both those terms and
+this License would be to refrain entirely from conveying the Program.
+
+  13. Use with the GNU Affero General Public License.
+
+  Notwithstanding any other provision of this License, you have
+permission to link or combine any covered work with a work licensed
+under version 3 of the GNU Affero General Public License into a single
+combined work, and to convey the resulting work.  The terms of this
+License will continue to apply to the part which is the covered work,
+but the special requirements of the GNU Affero General Public License,
+section 13, concerning interaction through a network will apply to the
+combination as such.
+
+  14. Revised Versions of this License.
+
+  The Free Software Foundation may publish revised and/or new versions of
+the GNU General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+  Each version is given a distinguishing version number.  If the
+Program specifies that a certain numbered version of the GNU General
+Public License "or any later version" applies to it, you have the
+option of following the terms and conditions either of that numbered
+version or of any later version published by the Free Software
+Foundation.  If the Program does not specify a version number of the
+GNU General Public License, you may choose any version ever published
+by the Free Software Foundation.
+
+  If the Program specifies that a proxy can decide which future
+versions of the GNU General Public License can be used, that proxy's
+public statement of acceptance of a version permanently authorizes you
+to choose that version for the Program.
+
+  Later license versions may give you additional or different
+permissions.  However, no additional obligations are imposed on any
+author or copyright holder as a result of your choosing to follow a
+later version.
+
+  15. Disclaimer of Warranty.
+
+  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
+APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
+HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
+OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE
+PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME
+THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. Limitation of Liability.
+
+  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
+THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
+GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
+USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
+DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
+PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
+EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGES.
+
+  17. Interpretation of Sections 15 and 16.
+
+  If the disclaimer of warranty and limitation of liability provided
+above cannot be given local legal effect according to their terms,
+reviewing courts shall apply local law that most closely approximates
+an absolute waiver of all civil liability in connection with the
+Program, unless a warranty or assumption of liability accompanies a
+copy of the Program in return for a fee.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+state the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <https://www.gnu.org/licenses/>.
+
+Also add information on how to contact you by electronic and paper mail.
+
+  If the program does terminal interaction, make it output a short
+notice like this when it starts in an interactive mode:
+
+    <program>  Copyright (C) <year>  <name of author>
+    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, your program's commands
+might be different; for a GUI interface, you would use an "about box".
+
+  You should also get your employer (if you work as a programmer) or school,
+if any, to sign a "copyright disclaimer" for the program, if necessary.
+For more information on this, and how to apply and follow the GNU GPL, see
+<https://www.gnu.org/licenses/>.
+
+  The GNU General Public License does not permit incorporating your program
+into proprietary programs.  If your program is a subroutine library, you
+may consider it more useful to permit linking proprietary applications with
+the library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.  But first, please read
+<https://www.gnu.org/licenses/why-not-lgpl.html>.
\ No newline at end of file
diff --git a/QWEN.md b/QWEN.md
new file mode 100644
index 0000000..cd80c30
--- /dev/null
+++ b/QWEN.md
@@ -0,0 +1,68 @@
+# Quick Browser - Android Project Context
+
+## Project Overview
+
+Quick Browser is an Android application that provides a floating, draggable browser bubble interface. Users can browse the web in a small overlay window that can be moved around the screen and resized. The app includes features like web content summarization, read mode for better text readability, and settings for customization.
+
+Key technologies and architecture:
+- **Language**: Kotlin
+- **Framework**: Android with Android Jetpack components
+- **Architecture**: MVVM (Model-View-ViewModel) with dependency injection
+- **Dependency Injection**: Hilt
+- **Database**: Room
+- **Build System**: Gradle with Kotlin DSL
+- **Min SDK**: Not explicitly stated in explored files, but uses modern Android features
+- **Target SDK**: Not explicitly stated in explored files
+
+## Project Structure
+
+The project follows a standard Android application structure with a focus on separation of concerns:
+
+- `app/src/main/java/com/quick/browser/`
+  - `data/`: Data layer including local storage (Room DAOs, database), network, repository implementations, and security utilities.
+  - `domain/`: Domain layer containing models, repository interfaces, use cases, errors, and results.
+  - `di/`: Dependency injection modules (Hilt).
+  - `presentation/`: Presentation layer with UI components (Activities, ViewModels, custom Views) organized by feature.
+  - `service/`: Background services, primarily the `BubbleService` which manages the floating bubbles.
+  - `utils/`: Utility classes and constants.
+
+## Core Components
+
+1.  **BubbleService (`service/BubbleService.kt`)**: The core foreground service responsible for managing the lifecycle of floating bubbles. It coordinates various managers and runs in the foreground to ensure bubbles remain visible.
+2.  **BubbleView (`presentation/ui/browser/BubbleView.kt`)**: The custom View that represents a single floating bubble. It handles UI, touch events (dragging, resizing), WebView management, and interactions like summarization and read mode.
+3.  **MainActivity (`presentation/ui/main/MainActivity.kt`)**: The main entry point Activity of the application. It provides an address bar and menu for user interaction before launching the bubble service.
+4.  **Data Layer**: Uses Room for local data persistence (history, settings, saved articles) with DAOs (`data/local/dao/`) and repositories (`data/repository/`).
+5.  **Domain Layer**: Encapsulates business logic in use cases (`domain/usecase/`) and defines contracts through repository interfaces (`domain/repository/`).
+
+## Building and Running
+
+Based on the `build.gradle` files:
+
+1.  **Setup**:
+    *   Ensure you have the Android SDK installed.
+    *   The project uses Kotlin version 2.0.0.
+    *   It targets Java compatibility version 21.
+
+2.  **Build**:
+    *   Use the standard Android Gradle commands:
+        *   `./gradlew assembleDebug` (Build debug APK)
+        *   `./gradlew assembleRelease` (Build release APK)
+
+3.  **Run**:
+    *   `./gradlew installDebug` (Install debug build on a connected device/emulator)
+    *   The app can then be launched from the device's app drawer.
+
+4.  **Development**:
+    *   Open the project in Android Studio.
+    *   Sync the project with Gradle files.
+    *   Run the 'app' configuration.
+
+## Development Conventions
+
+- **Kotlin**: The primary language, utilizing coroutines for asynchronous operations.
+- **Hilt**: Used for dependency injection across the application, reducing boilerplate and improving testability.
+- **MVVM**: ViewModels (`presentation/ui/*/...ViewModel.kt`) handle UI-related data and logic, separating it from the Views (Activities, Fragments, custom Views).
+- **Use Cases**: Business logic is encapsulated in domain use cases (`domain/usecase/`) for better modularity and testability.
+- **Room**: Used for local data persistence with LiveData for reactive UI updates.
+- **Constants**: Centralized in `utils/Constants.kt`.
+- **Logging**: Custom logger utility `utils/Logger.kt`.
\ No newline at end of file
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..415c90b
--- /dev/null
+++ b/README.md
@@ -0,0 +1,44 @@
+# Quick Browser
+
+A floating quick browser for Android that allows you to browse the web in a draggable, expandable bubble overlay.
+
+## Features
+
+- Floating bubble interface that can be dragged around the screen
+- Resizable bubble window
+- Web content summarization
+- Read mode for better text readability
+- Settings panel for customization
+
+## License
+
+This project is licensed under the GNU General Public License v3.0 (GPL-3.0).
+
+### What this means:
+
+- **Freedom to use**: You can use this software for any purpose
+- **Freedom to study**: You can study how the program works and modify it
+- **Freedom to share**: You can redistribute copies of the original program
+- **Freedom to improve**: You can distribute modified versions
+
+### Requirements:
+
+- If you distribute this software, you must provide the source code
+- Any modifications must also be licensed under GPL-3.0
+- You must include the original copyright notice and license
+
+See the [LICENSE](LICENSE) file for the full license text.
+
+## Contributing
+
+This project is open source and welcomes contributions. By contributing to this project, you agree that your contributions will be licensed under the same GPL-3.0 license.
+
+## Copyright
+
+Copyright (C) 2024 Quick Browser Contributors
+
+This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.
+
+This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
+
+You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.
\ No newline at end of file
diff --git a/app/build.gradle b/app/build.gradle
new file mode 100644
index 0000000..ec151d0
--- /dev/null
+++ b/app/build.gradle
@@ -0,0 +1,170 @@
+plugins {
+    id 'com.android.application'
+    id 'kotlin-android'
+    id 'kotlin-parcelize'
+    id 'com.google.devtools.ksp'
+    id 'dagger.hilt.android.plugin'
+    id 'org.jetbrains.kotlin.plugin.compose' version '2.0.0'
+}
+
+// Force specific versions to avoid conflicts
+configurations.configureEach {
+    resolutionStrategy {
+        force 'androidx.fragment:fragment:1.3.6'
+        force 'androidx.fragment:fragment-ktx:1.3.6'
+        // Force consistent versions across all dependencies
+        eachDependency { details ->
+            if (details.requested.group == 'androidx.fragment') {
+                details.useVersion '1.3.6'
+            }
+        }
+    }
+}
+
+android {
+    compileSdk 36
+
+    defaultConfig {
+        applicationId "com.quick.browser"
+        minSdk 26
+        targetSdk 36
+        versionCode 33
+        versionName "0.2.7"
+
+        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
+
+        // Handle TensorFlow Lite namespace conflicts
+        ndk {
+            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
+        }
+    }
+
+    // Add packaging options to handle duplicate files
+    packagingOptions {
+        exclude 'META-INF/DEPENDENCIES'
+        exclude 'META-INF/LICENSE'
+        exclude 'META-INF/LICENSE.txt'
+        exclude 'META-INF/license.txt'
+        exclude 'META-INF/NOTICE'
+        exclude 'META-INF/NOTICE.txt'
+        exclude 'META-INF/notice.txt'
+        exclude 'META-INF/ASL2.0'
+        exclude 'META-INF/*.kotlin_module'
+        pickFirst 'lib/armeabi-v7a/libtensorflowlite_jni.so'
+        pickFirst 'lib/arm64-v8a/libtensorflowlite_jni.so'
+        pickFirst 'lib/x86/libtensorflowlite_jni.so'
+        pickFirst 'lib/x86_64/libtensorflowlite_jni.so'
+    }
+
+    buildTypes {
+        release {
+            minifyEnabled true
+            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
+        }
+        debug {
+            testCoverageEnabled true
+        }
+    }
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_21
+        targetCompatibility JavaVersion.VERSION_21
+    }
+
+    kotlinOptions {
+        jvmTarget = '21'
+        freeCompilerArgs += [
+                "-opt-in=kotlin.RequiresOptIn"
+        ]
+    }
+
+    buildFeatures {
+        compose true
+    }
+    
+    composeOptions {
+        kotlinCompilerExtensionVersion = "1.5.14"
+    }
+
+    namespace 'com.quick.browser'
+}
+
+dependencies {
+    // Compose dependencies
+    implementation platform("androidx.compose:compose-bom:2025.07.00")
+    implementation "androidx.compose.ui:ui"
+    implementation "androidx.compose.material:material"
+    implementation "androidx.compose.material3:material3:1.3.2"
+    implementation "androidx.compose.ui:ui-tooling-preview"
+    debugImplementation "androidx.compose.ui:ui-tooling"
+
+    // AndroidX core libraries (updated versions)
+    implementation 'androidx.core:core-ktx:1.16.0'
+    implementation 'androidx.appcompat:appcompat:1.7.1'
+    implementation 'androidx.multidex:multidex:2.0.1'
+    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
+    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
+    implementation 'androidx.webkit:webkit:1.14.0'
+    implementation 'androidx.dynamicanimation:dynamicanimation-ktx:1.1.0'
+    implementation 'androidx.preference:preference-ktx:1.2.1'
+
+    // Material Design components (single version)
+    implementation 'com.google.android.material:material:1.12.0'
+
+    // Lifecycle components (standardized version)
+    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.9.2"
+    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.9.2"
+    implementation "androidx.lifecycle:lifecycle-livedata-ktx:2.9.2"
+    implementation "androidx.lifecycle:lifecycle-service:2.9.2"
+
+    // WorkManager for background tasks
+    implementation 'androidx.work:work-runtime-ktx:2.10.2'
+
+    // Room database
+    def room_version = "2.7.2"
+    implementation "androidx.room:room-runtime:$room_version"
+    implementation "androidx.room:room-ktx:$room_version"
+    ksp "androidx.room:room-compiler:$room_version"
+
+    // Coroutines (updated version)
+    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1'
+
+    // JSoup for HTML parsing (for read mode)
+    implementation 'org.jsoup:jsoup:1.17.2'
+
+    // Natural language processing libraries
+    implementation 'org.apache.opennlp:opennlp-tools:2.1.0'
+
+    // Gson for JSON serialization/deserialization
+    implementation 'com.google.code.gson:gson:2.11.0'
+
+    // Chrome Custom Tabs for secure authentication
+    implementation 'androidx.browser:browser:1.8.0'
+
+    // Fragment dependencies (required for AppCompatActivity) - force specific version
+    implementation 'androidx.fragment:fragment-ktx:1.8.8'
+
+    // Glide for image loading
+    implementation 'com.github.bumptech.glide:glide:4.16.0'
+    ksp 'com.github.bumptech.glide:ksp:4.16.0'
+
+    // Hilt for dependency injection
+    def hilt_version = "2.56"
+    implementation "com.google.dagger:hilt-android:$hilt_version"
+    ksp "com.google.dagger:hilt-compiler:$hilt_version"
+
+    // Testing
+    testImplementation 'junit:junit:4.13.2'
+    testImplementation 'org.robolectric:robolectric:4.13'
+    testImplementation 'org.mockito:mockito-core:5.12.0'
+    testImplementation 'org.jacoco:org.jacoco.core:0.8.7'
+    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
+    androidTestImplementation 'androidx.test.espresso:espresso-core:3.6.1'
+    androidTestImplementation 'org.mockito:mockito-android:5.12.0'
+
+    // Hilt testing
+    testImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
+    kspTest "com.google.dagger:hilt-compiler:$hilt_version"
+    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
+    kspAndroidTest "com.google.dagger:hilt-compiler:$hilt_version"
+}
\ No newline at end of file
diff --git a/app/proguard-rules.pro b/app/proguard-rules.pro
new file mode 100644
index 0000000..e86d369
--- /dev/null
+++ b/app/proguard-rules.pro
@@ -0,0 +1,29 @@
+# ProGuard rules for the QuickBrowser app
+# Suppress warnings for missing annotations
+-dontwarn javax.annotation.Nullable
+-dontwarn javax.annotation.ParametersAreNonnullByDefault
+
+# OpenNLP related rules
+-dontwarn org.osgi.framework.**
+-dontwarn org.osgi.util.tracker.**
+-keep class opennlp.tools.** { *; }
+-keepclassmembers class opennlp.tools.** { *; }
+
+# Glide
+-keep public class * implements com.bumptech.glide.module.GlideModule
+-keep public class * extends com.bumptech.glide.module.AppGlideModule
+-keep public enum com.bumptech.glide.load.ResourceDecoder$* {
+    **[] $VALUES;
+    public *;
+}
+-keep class com.bumptech.glide.load.data.ParcelFileDescriptorRewinder$InternalRewinder {
+    *** rewind();
+}
+
+# Allow loading resources from assets
+-keep class com.bumptech.glide.load.data.AssetPathFetcher
+-keep class com.bumptech.glide.load.data.LocalUriFetcher
+
+# Allow loading resources from raw folder
+-keep class com.bumptech.glide.load.data.StreamLocalUriFetcher
+-keep class com.bumptech.glide.load.data.FileDescriptorLocalUriFetcher
\ No newline at end of file
diff --git a/app/src/androidTest/java/com/quick/browser/data/repository/ArticleRepositoryImplIntegrationTest.kt b/app/src/androidTest/java/com/quick/browser/data/repository/ArticleRepositoryImplIntegrationTest.kt
new file mode 100644
index 0000000..1f2e498
--- /dev/null
+++ b/app/src/androidTest/java/com/quick/browser/data/repository/ArticleRepositoryImplIntegrationTest.kt
@@ -0,0 +1,135 @@
+package com.quick.browser.data.repository
+
+import androidx.room.Room
+import androidx.test.core.app.ApplicationProvider
+import androidx.test.ext.junit.runners.AndroidJUnit4
+import com.quick.browser.data.local.database.AppDatabase
+import com.quick.browser.domain.model.SavedArticle
+import com.quick.browser.service.ReadabilityService
+import kotlinx.coroutines.runBlocking
+import org.junit.After
+import org.junit.Before
+import org.junit.Test
+import org.junit.runner.RunWith
+
+@RunWith(AndroidJUnit4::class)
+class ArticleRepositoryImplIntegrationTest {
+
+    private lateinit var database: AppDatabase
+    private lateinit var articleRepositoryImpl: ArticleRepositoryImpl
+
+    @Before
+    fun setup() {
+        // Create an in-memory database for testing
+        database = Room.inMemoryDatabaseBuilder(
+            ApplicationProvider.getApplicationContext(),
+            AppDatabase::class.java
+        ).allowMainThreadQueries().build()
+
+        val context = ApplicationProvider.getApplicationContext<android.content.Context>()
+        val readabilityService = ReadabilityService(context)
+        articleRepositoryImpl = ArticleRepositoryImpl(database.savedArticleDao(), readabilityService)
+    }
+
+    @After
+    fun teardown() {
+        database.close()
+    }
+
+    @Test
+    fun saveArticle_shouldSaveArticleToDatabase() = runBlocking {
+        // Given
+        val article = SavedArticle(
+            url = "https://example.com",
+            title = "Example Article",
+            content = "This is an example article",
+            savedDate = System.currentTimeMillis(),
+            author = "Author Name",
+            siteName = "Example Site",
+            publishDate = "2023-01-01",
+            excerpt = "This is an excerpt"
+        )
+
+        // When
+        articleRepositoryImpl.saveArticle(article)
+
+        // Then
+        // Note: We're not testing the getAllArticles method here because it's not part of the ArticleRepository interface
+        // Instead, we'll verify the article was saved by trying to retrieve it by URL
+        val savedArticle = articleRepositoryImpl.getSavedArticleByUrl(article.url)
+        assert(savedArticle != null)
+        assert(savedArticle?.url == article.url)
+        assert(savedArticle?.title == article.title)
+        assert(savedArticle?.content == article.content)
+        assert(savedArticle?.savedDate == article.savedDate)
+        assert(savedArticle?.author == article.author)
+        assert(savedArticle?.siteName == article.siteName)
+        assert(savedArticle?.publishDate == article.publishDate)
+        assert(savedArticle?.excerpt == article.excerpt)
+    }
+
+    @Test
+    fun deleteArticle_shouldRemoveArticleFromDatabase() = runBlocking {
+        // Given
+        val article = SavedArticle(
+            url = "https://example.com",
+            title = "Example Article",
+            content = "This is an example article",
+            savedDate = System.currentTimeMillis(),
+            author = "Author Name",
+            siteName = "Example Site",
+            publishDate = "2023-01-01",
+            excerpt = "This is an excerpt"
+        )
+
+        // When
+        articleRepositoryImpl.saveArticle(article)
+        articleRepositoryImpl.deleteArticle(article)
+
+        // Then
+        // Note: We're not testing the getAllArticles method here because it's not part of the ArticleRepository interface
+        // Instead, we'll verify the article was deleted by trying to retrieve it by URL
+        val savedArticle = articleRepositoryImpl.getSavedArticleByUrl(article.url)
+        assert(savedArticle == null)
+    }
+
+    @Test
+    fun getSavedArticleByUrl_shouldReturnSavedArticle() = runBlocking {
+        // Given
+        val article1 = SavedArticle(
+            url = "https://example.com/1",
+            title = "Example Article 1",
+            content = "This is an example article 1",
+            savedDate = System.currentTimeMillis(),
+            author = "Author Name",
+            siteName = "Example Site",
+            publishDate = "2023-01-01",
+            excerpt = "This is an excerpt 1"
+        )
+
+        val article2 = SavedArticle(
+            url = "https://example.com/2",
+            title = "Example Article 2",
+            content = "This is an example article 2",
+            savedDate = System.currentTimeMillis(),
+            author = "Author Name",
+            siteName = "Example Site",
+            publishDate = "2023-01-02",
+            excerpt = "This is an excerpt 2"
+        )
+
+        // When
+        articleRepositoryImpl.saveArticle(article1)
+        articleRepositoryImpl.saveArticle(article2)
+
+        // Then
+        val savedArticle1 = articleRepositoryImpl.getSavedArticleByUrl(article1.url)
+        val savedArticle2 = articleRepositoryImpl.getSavedArticleByUrl(article2.url)
+        
+        assert(savedArticle1 != null)
+        assert(savedArticle1?.url == article1.url)
+        
+        assert(savedArticle2 != null)
+        assert(savedArticle2?.url == article2.url)
+    }
+}
\ No newline at end of file
diff --git a/app/src/androidTest/java/com/quick/browser/data/repository/SettingsRepositoryImplIntegrationTest.kt b/app/src/androidTest/java/com/quick/browser/data/repository/SettingsRepositoryImplIntegrationTest.kt
new file mode 100644
index 0000000..7e06dbc
--- /dev/null
+++ b/app/src/androidTest/java/com/quick/browser/data/repository/SettingsRepositoryImplIntegrationTest.kt
@@ -0,0 +1,135 @@
+package com.quick.browser.data.repository
+
+import androidx.room.Room
+import androidx.test.core.app.ApplicationProvider
+import androidx.test.ext.junit.runners.AndroidJUnit4
+import com.quick.browser.data.local.database.AppDatabase
+import kotlinx.coroutines.runBlocking
+import org.junit.After
+import org.junit.Before
+import org.junit.Test
+import org.junit.runner.RunWith
+import com.quick.browser.domain.model.Settings as DomainSettings
+
+@RunWith(AndroidJUnit4::class)
+class SettingsRepositoryImplIntegrationTest {
+
+    private lateinit var database: AppDatabase
+    private lateinit var settingsRepositoryImpl: SettingsRepositoryImpl
+
+    @Before
+    fun setup() {
+        // Create an in-memory database for testing
+        database = Room.inMemoryDatabaseBuilder(
+            ApplicationProvider.getApplicationContext(),
+            AppDatabase::class.java
+        ).allowMainThreadQueries().build()
+
+        settingsRepositoryImpl = SettingsRepositoryImpl(database.settingsDao())
+    }
+
+    @After
+    fun teardown() {
+        database.close()
+    }
+
+    @Test
+    fun saveSettings_shouldSaveSettingsToDatabase() = runBlocking {
+        // Given
+        val settings = DomainSettings(
+            id = 1,
+            size = "medium",
+            animationSpeed = "medium",
+            savePositions = true,
+            blockAds = true,
+            defaultColor = "#2196F3",
+            javascriptEnabled = true,
+            darkTheme = false,
+            bubbleSize = 1.0f,
+            expandedBubbleSize = 1.5f,
+            animSpeed = 1.0f,
+            saveHistory = true,
+            encryptData = true,
+            bubblePositionRight = false
+        )
+
+        // When
+        settingsRepositoryImpl.saveSettings(settings)
+
+        // Then
+        val savedSettings = settingsRepositoryImpl.getSettings()
+        assert(savedSettings?.id == settings.id)
+        assert(savedSettings?.size == settings.size)
+        assert(savedSettings?.animationSpeed == settings.animationSpeed)
+        assert(savedSettings?.savePositions == settings.savePositions)
+        assert(savedSettings?.blockAds == settings.blockAds)
+        assert(savedSettings?.defaultColor == settings.defaultColor)
+        assert(savedSettings?.javascriptEnabled == settings.javascriptEnabled)
+        assert(savedSettings?.darkTheme == settings.darkTheme)
+        assert(savedSettings?.bubbleSize == settings.bubbleSize)
+        assert(savedSettings?.expandedBubbleSize == settings.expandedBubbleSize)
+        assert(savedSettings?.animSpeed == settings.animSpeed)
+        assert(savedSettings?.saveHistory == settings.saveHistory)
+        assert(savedSettings?.encryptData == settings.encryptData)
+        assert(savedSettings?.bubblePositionRight == settings.bubblePositionRight)
+    }
+
+    @Test
+    fun updateSettings_shouldUpdateExistingSettings() = runBlocking {
+        // Given
+        val initialSettings = DomainSettings(
+            id = 1,
+            size = "medium",
+            animationSpeed = "medium",
+            savePositions = true,
+            blockAds = true,
+            defaultColor = "#2196F3",
+            javascriptEnabled = true,
+            darkTheme = false,
+            bubbleSize = 1.0f,
+            expandedBubbleSize = 1.5f,
+            animSpeed = 1.0f,
+            saveHistory = true,
+            encryptData = true,
+            bubblePositionRight = false
+        )
+
+        val updatedSettings = DomainSettings(
+            id = 1,
+            size = "large",
+            animationSpeed = "fast",
+            savePositions = false,
+            blockAds = false,
+            defaultColor = "#FF0000",
+            javascriptEnabled = false,
+            darkTheme = true,
+            bubbleSize = 2.0f,
+            expandedBubbleSize = 3.0f,
+            animSpeed = 2.0f,
+            saveHistory = false,
+            encryptData = false,
+            bubblePositionRight = true
+        )
+
+        // When
+        settingsRepositoryImpl.saveSettings(initialSettings)
+        settingsRepositoryImpl.updateSettings(updatedSettings)
+
+        // Then
+        val savedSettings = settingsRepositoryImpl.getSettings()
+        assert(savedSettings?.id == updatedSettings.id)
+        assert(savedSettings?.size == updatedSettings.size)
+        assert(savedSettings?.animationSpeed == updatedSettings.animationSpeed)
+        assert(savedSettings?.savePositions == updatedSettings.savePositions)
+        assert(savedSettings?.blockAds == updatedSettings.blockAds)
+        assert(savedSettings?.defaultColor == updatedSettings.defaultColor)
+        assert(savedSettings?.javascriptEnabled == updatedSettings.javascriptEnabled)
+        assert(savedSettings?.darkTheme == updatedSettings.darkTheme)
+        assert(savedSettings?.bubbleSize == updatedSettings.bubbleSize)
+        assert(savedSettings?.expandedBubbleSize == updatedSettings.expandedBubbleSize)
+        assert(savedSettings?.animSpeed == updatedSettings.animSpeed)
+        assert(savedSettings?.saveHistory == updatedSettings.saveHistory)
+        assert(savedSettings?.encryptData == updatedSettings.encryptData)
+        assert(savedSettings?.bubblePositionRight == updatedSettings.bubblePositionRight)
+    }
+}
\ No newline at end of file
diff --git a/app/src/androidTest/java/com/quick/browser/domain/usecase/GetSettingsUseCaseIntegrationTest.kt b/app/src/androidTest/java/com/quick/browser/domain/usecase/GetSettingsUseCaseIntegrationTest.kt
new file mode 100644
index 0000000..c556c39
--- /dev/null
+++ b/app/src/androidTest/java/com/quick/browser/domain/usecase/GetSettingsUseCaseIntegrationTest.kt
@@ -0,0 +1,100 @@
+package com.quick.browser.domain.usecase
+
+import androidx.room.Room
+import androidx.test.core.app.ApplicationProvider
+import androidx.test.ext.junit.runners.AndroidJUnit4
+import com.quick.browser.data.local.database.AppDatabase
+import com.quick.browser.data.repository.SettingsRepositoryImpl
+import com.quick.browser.domain.model.Settings
+import com.quick.browser.domain.result.Result
+import kotlinx.coroutines.runBlocking
+import org.junit.After
+import org.junit.Before
+import org.junit.Test
+import org.junit.runner.RunWith
+
+@RunWith(AndroidJUnit4::class)
+class GetSettingsUseCaseIntegrationTest {
+
+    private lateinit var database: AppDatabase
+    private lateinit var getSettingsUseCase: GetSettingsUseCase
+
+    @Before
+    fun setup() {
+        // Create an in-memory database for testing
+        database = Room.inMemoryDatabaseBuilder(
+            ApplicationProvider.getApplicationContext(),
+            AppDatabase::class.java
+        ).allowMainThreadQueries().build()
+
+        val settingsRepository = SettingsRepositoryImpl(database.settingsDao())
+        getSettingsUseCase = GetSettingsUseCase(settingsRepository)
+    }
+
+    @After
+    fun teardown() {
+        database.close()
+    }
+
+    @Test
+    fun invoke_shouldReturnSettingsFromRepository() = runBlocking {
+        // Given
+        val expectedSettings = Settings(
+            id = 1,
+            size = "medium",
+            animationSpeed = "medium",
+            savePositions = true,
+            blockAds = true,
+            defaultColor = "#2196F3",
+            javascriptEnabled = true,
+            darkTheme = false,
+            bubbleSize = 1.0f,
+            expandedBubbleSize = 1.5f,
+            animSpeed = 1.0f,
+            saveHistory = true,
+            encryptData = true,
+            bubblePositionRight = false
+        )
+
+        // Save settings to database
+        database.settingsDao().insertSettings(
+            com.quick.browser.data.local.entity.Settings(
+                id = expectedSettings.id,
+                size = expectedSettings.size,
+                animationSpeed = expectedSettings.animationSpeed,
+                savePositions = expectedSettings.savePositions,
+                blockAds = expectedSettings.blockAds,
+                defaultColor = expectedSettings.defaultColor,
+                javascriptEnabled = expectedSettings.javascriptEnabled,
+                darkTheme = expectedSettings.darkTheme,
+                bubbleSize = expectedSettings.bubbleSize,
+                expandedBubbleSize = expectedSettings.expandedBubbleSize,
+                animSpeed = expectedSettings.animSpeed,
+                saveHistory = expectedSettings.saveHistory,
+                encryptData = expectedSettings.encryptData,
+                bubblePositionRight = expectedSettings.bubblePositionRight
+            )
+        )
+
+        // When
+        val result = getSettingsUseCase()
+
+        // Then
+        assert(result is Result.Success)
+        val settings = (result as Result.Success).data
+        assert(settings.id == expectedSettings.id)
+        assert(settings.size == expectedSettings.size)
+        assert(settings.animationSpeed == expectedSettings.animationSpeed)
+        assert(settings.savePositions == expectedSettings.savePositions)
+        assert(settings.blockAds == expectedSettings.blockAds)
+        assert(settings.defaultColor == expectedSettings.defaultColor)
+        assert(settings.javascriptEnabled == expectedSettings.javascriptEnabled)
+        assert(settings.darkTheme == expectedSettings.darkTheme)
+        assert(settings.bubbleSize == expectedSettings.bubbleSize)
+        assert(settings.expandedBubbleSize == expectedSettings.expandedBubbleSize)
+        assert(settings.animSpeed == expectedSettings.animSpeed)
+        assert(settings.saveHistory == expectedSettings.saveHistory)
+        assert(settings.encryptData == expectedSettings.encryptData)
+        assert(settings.bubblePositionRight == expectedSettings.bubblePositionRight)
+    }
+}
\ No newline at end of file
diff --git a/app/src/androidTest/java/com/quick/browser/ui/bubble/BubbleWebViewManagerInstrumentedTest.kt b/app/src/androidTest/java/com/quick/browser/ui/bubble/BubbleWebViewManagerInstrumentedTest.kt
new file mode 100644
index 0000000..f451fcf
--- /dev/null
+++ b/app/src/androidTest/java/com/quick/browser/ui/bubble/BubbleWebViewManagerInstrumentedTest.kt
@@ -0,0 +1,18 @@
+package com.quick.browser.ui.bubble
+
+import androidx.test.ext.junit.runners.AndroidJUnit4
+import org.junit.Test
+import org.junit.runner.RunWith
+
+/**
+ * Instrumented test for BubbleWebViewManager
+ */
+@RunWith(AndroidJUnit4::class)
+class BubbleWebViewManagerInstrumentedTest {
+
+    @Test
+    fun testUrlFormatting() {
+        // This is a placeholder test to verify our testing infrastructure works
+        assert(true)
+    }
+}
\ No newline at end of file
diff --git a/app/src/androidTest/java/com/quick/browser/ui/bubble/BubbleWebViewManagerTest.kt b/app/src/androidTest/java/com/quick/browser/ui/bubble/BubbleWebViewManagerTest.kt
new file mode 100644
index 0000000..7e8a284
--- /dev/null
+++ b/app/src/androidTest/java/com/quick/browser/ui/bubble/BubbleWebViewManagerTest.kt
@@ -0,0 +1,18 @@
+package com.quick.browser.ui.bubble
+
+import androidx.test.ext.junit.runners.AndroidJUnit4
+import org.junit.Test
+import org.junit.runner.RunWith
+
+/**
+ * Instrumented test for BubbleWebViewManager
+ */
+@RunWith(AndroidJUnit4::class)
+class BubbleWebViewManagerTest {
+
+    @Test
+    fun testUrlFormatting() {
+        // This is a placeholder test to verify our testing infrastructure works
+        assert(true)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
new file mode 100644
index 0000000..5d00945
--- /dev/null
+++ b/app/src/main/AndroidManifest.xml
@@ -0,0 +1,115 @@
+<?xml version="1.0" encoding="utf-8"?>
+<manifest
+    xmlns:android="http://schemas.android.com/apk/res/android">
+    <!-- Removed package attribute as it is no longer supported -->
+
+    <!-- Essential permissions -->
+    <uses-permission android:name="android.permission.INTERNET" />
+    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+    <uses-permission android:name="android.permission.POST_NOTIFICATIONS"/>
+    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
+    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
+    <uses-permission android:name="android.permission.FOREGROUND_SERVICE_DATA_SYNC" />
+    
+    <!-- Storage permissions -->
+    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" android:maxSdkVersion="32"/>
+
+    <!-- Background operation -->
+    <uses-permission android:name="android.permission.WAKE_LOCK" />
+
+    <application
+        android:name=".QuickBrowserApplication"
+        android:allowBackup="true"
+        android:icon="@mipmap/ic_launcher"
+        android:roundIcon="@mipmap/ic_launcher_round"
+        android:label="@string/app_name"
+        android:supportsRtl="true"
+        android:theme="@style/Theme.QBrowser"
+        android:usesCleartextTraffic="true">
+
+        <activity
+            android:name=".presentation.ui.main.MainActivity"
+            android:exported="true"
+            android:launchMode="singleTask">
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN" />
+                <category android:name="android.intent.category.LAUNCHER" />
+            </intent-filter>
+            
+            <!-- Handle URLs and text sharing -->
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:scheme="http" />
+                <data android:scheme="https" />
+            </intent-filter>
+            
+            <!-- Handle custom scheme for authentication callback -->
+            <intent-filter>
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:scheme="quick_browser" android:host="auth-callback" />
+            </intent-filter>
+            
+            <intent-filter>
+                <action android:name="android.intent.action.SEND" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <data android:mimeType="text/plain" />
+            </intent-filter>
+        </activity>
+
+        <activity
+            android:name=".presentation.ui.settings.SettingsActivity"
+            android:label="@string/settings"
+            android:theme="@style/Theme.QBrowser" />
+
+        <activity
+            android:name=".presentation.ui.history.HistoryActivity"
+            android:label="@string/history_title"
+            android:theme="@style/Theme.QBrowser"
+            android:parentActivityName=".presentation.ui.main.MainActivity" />
+        
+        <activity
+            android:name=".presentation.ui.saved.SavedArticlesActivity"
+            android:label="@string/saved_articles"
+            android:theme="@style/Theme.QBrowser"
+            android:parentActivityName=".presentation.ui.main.MainActivity" />
+        
+        <activity
+            android:name=".presentation.ui.reader.OfflineReaderActivity"
+            android:label="@string/offline_reader"
+            android:theme="@style/Theme.QBrowser"
+            android:parentActivityName=".presentation.ui.saved.SavedArticlesActivity" />
+        
+
+        <service
+            android:name=".service.BubbleService"
+            android:enabled="true"
+            android:exported="false"
+            android:foregroundServiceType="dataSync">
+            
+            <intent-filter>
+                <action android:name="com.quick.browser.action.CREATE_BUBBLE" />
+                <action android:name="com.quick.browser.action.CLOSE_BUBBLE" />
+                <action android:name="com.quick.browser.action.TOGGLE_BUBBLES" />
+                <action android:name="com.quick.browser.action.OPEN_URL" />
+                <action android:name="com.quick.browser.action.ACTIVATE_BUBBLE" />
+            </intent-filter>
+        </service>
+
+        <!-- FileProvider for sharing content -->
+        <provider
+            android:name="androidx.core.content.FileProvider"
+            android:authorities="${applicationId}.fileprovider"
+            android:exported="false"
+            android:grantUriPermissions="true">
+            <meta-data
+                android:name="android.support.FILE_PROVIDER_PATHS"
+                android:resource="@xml/file_paths" />
+        </provider>
+
+    </application>
+
+</manifest>
diff --git a/app/src/main/assets/en-sent.bin b/app/src/main/assets/en-sent.bin
new file mode 100644
index 0000000..e69de29
diff --git a/app/src/main/assets/summarization_model.tflite b/app/src/main/assets/summarization_model.tflite
new file mode 100644
index 0000000..e69de29
diff --git a/app/src/main/java/com/quick/browser/QuickBrowserApplication.kt b/app/src/main/java/com/quick/browser/QuickBrowserApplication.kt
new file mode 100644
index 0000000..2ba04e3
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/QuickBrowserApplication.kt
@@ -0,0 +1,128 @@
+package com.quick.browser
+
+import android.app.Application
+import android.os.Build
+import android.os.StrictMode
+import androidx.appcompat.app.AppCompatDelegate
+import com.google.android.material.color.DynamicColors
+import com.quick.browser.service.BubbleService
+import com.quick.browser.service.SettingsService
+import dagger.hilt.android.HiltAndroidApp
+import javax.inject.Inject
+
+/**
+ * Main application class for the Quick Browser
+ *
+ * This class serves as the entry point for the application and handles
+ * global initialization tasks such as dependency injection setup,
+ * theme configuration, and debug mode configuration.
+ *
+ * It also maintains a reference to the BubbleService for easy access
+ * from other parts of the application.
+ */
+@HiltAndroidApp
+class QuickBrowserApplication : Application() {
+
+    @Inject
+    lateinit var settingsService: SettingsService
+
+    /**
+     * Reference to the BubbleService
+     *
+     * This property holds a reference to the active BubbleService instance,
+     * allowing other components to interact with the bubble functionality.
+     */
+    var bubbleService: BubbleService? = null
+
+    companion object {
+        private var isDebugBuild: Boolean? = null
+
+        /**
+         * Checks if the application is running in debug mode
+         *
+         * @return true if running in debug mode, false otherwise
+         */
+        fun isDebugBuild(): Boolean {
+            if (isDebugBuild == null) {
+                try {
+                    // Try to get the BuildConfig.DEBUG value through reflection
+                    val buildConfigClass = Class.forName("com.quick.browser.BuildConfig")
+                    val debugField = buildConfigClass.getField("DEBUG")
+                    isDebugBuild = debugField.getBoolean(null)
+                } catch (e: Exception) {
+                    // Default to false if we can't determine
+                    isDebugBuild = false
+                }
+            }
+            return isDebugBuild!!
+        }
+    }
+
+    /**
+     * Called when the application is starting
+     *
+     * This method performs global initialization tasks including:
+     * - Configuring StrictMode for debug builds
+     * - Applying theme settings
+     */
+    override fun onCreate() {
+        super.onCreate()
+
+        // Configure StrictMode for detecting violations during development
+        configureStrictMode()
+
+        // Apply dynamic colors if enabled
+        applyThemeSettings()
+    }
+
+    /**
+     * Configure StrictMode to detect potential performance issues during development
+     *
+     * This method sets up StrictMode policies to help identify accidental disk or
+     * network operations on the main thread, which can cause UI jank or ANRs.
+     */
+    private fun configureStrictMode() {
+        if (isDebugBuild()) {
+            // Thread policy for detecting network and disk operations on main thread
+            StrictMode.setThreadPolicy(
+                StrictMode.ThreadPolicy.Builder()
+                    .detectDiskReads()
+                    .detectDiskWrites()
+                    .detectNetwork()
+                    .penaltyLog()
+                    .penaltyFlashScreen()
+                    .build()
+            )
+
+            // VM policy for detecting leaked resources
+            StrictMode.setVmPolicy(
+                StrictMode.VmPolicy.Builder()
+                    .detectLeakedSqlLiteObjects()
+                    .detectLeakedClosableObjects()
+                    .penaltyLog()
+                    .build()
+            )
+        }
+    }
+
+    /**
+     * Apply theme settings including dynamic colors and night mode
+     *
+     * This method configures the application's theme based on user preferences,
+     * including dynamic color support (Android 12+) and night mode settings.
+     */
+    fun applyThemeSettings() {
+        // Apply dynamic colors if enabled and available
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S && settingsService.isDynamicColorEnabled()) {
+            DynamicColors.applyToActivitiesIfAvailable(this)
+        }
+
+        // Apply night mode setting
+        val nightMode = if (settingsService.isNightModeEnabled()) {
+            AppCompatDelegate.MODE_NIGHT_YES
+        } else {
+            AppCompatDelegate.MODE_NIGHT_NO
+        }
+        AppCompatDelegate.setDefaultNightMode(nightMode)
+    }
+}
diff --git a/app/src/main/java/com/quick/browser/data/.gitkeep b/app/src/main/java/com/quick/browser/data/.gitkeep
new file mode 100644
index 0000000..e69de29
diff --git a/app/src/main/java/com/quick/browser/data/FolderDao.kt b/app/src/main/java/com/quick/browser/data/FolderDao.kt
new file mode 100644
index 0000000..670d1a2
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/FolderDao.kt
@@ -0,0 +1,104 @@
+package com.quick.browser.data
+
+import androidx.room.*
+import com.quick.browser.data.local.entity.Folder
+import com.quick.browser.data.local.entity.FolderArticle
+import kotlinx.coroutines.flow.Flow
+
+/**
+ * DAO for folder operations
+ */
+@Dao
+interface FolderDao {
+    /**
+     * Get all folders
+     *
+     * @return Flow of all folders
+     */
+    @Query("SELECT * FROM folders ORDER BY createdAt DESC")
+    fun getAllFolders(): Flow<List<Folder>>
+
+    /**
+     * Get a folder by ID
+     *
+     * @param id The ID of the folder
+     * @return The folder with the given ID
+     */
+    @Query("SELECT * FROM folders WHERE id = :id")
+    suspend fun getFolderById(id: Long): Folder?
+
+    /**
+     * Insert a new folder
+     *
+     * @param folder The folder to insert
+     * @return The ID of the inserted folder
+     */
+    @Insert
+    suspend fun insertFolder(folder: Folder): Long
+
+    /**
+     * Update a folder
+     *
+     * @param folder The folder to update
+     */
+    @Update
+    suspend fun updateFolder(folder: Folder)
+
+    /**
+     * Delete a folder
+     *
+     * @param folder The folder to delete
+     */
+    @Delete
+    suspend fun deleteFolder(folder: Folder)
+
+    /**
+     * Insert a folder-article relationship
+     *
+     * @param folderArticle The folder-article relationship to insert
+     */
+    @Insert
+    suspend fun insertFolderArticle(folderArticle: FolderArticle)
+
+    /**
+     * Delete a folder-article relationship
+     *
+     * @param folderArticle The folder-article relationship to delete
+     */
+    @Delete
+    suspend fun deleteFolderArticle(folderArticle: FolderArticle)
+
+    /**
+     * Get all folder-article relationships for a folder
+     *
+     * @param folderId The ID of the folder
+     * @return List of folder-article relationships for the folder
+     */
+    @Query("SELECT * FROM folder_articles WHERE folderId = :folderId")
+    suspend fun getFolderArticles(folderId: Long): List<FolderArticle>
+
+    /**
+     * Get all folder-article relationships for an article
+     *
+     * @param articleUrl The URL of the article
+     * @return List of folder-article relationships for the article
+     */
+    @Query("SELECT * FROM folder_articles WHERE articleUrl = :articleUrl")
+    suspend fun getArticleFolders(articleUrl: String): List<FolderArticle>
+
+    /**
+     * Delete all folder-article relationships for a folder
+     *
+     * @param folderId The ID of the folder
+     */
+    @Query("DELETE FROM folder_articles WHERE folderId = :folderId")
+    suspend fun deleteFolderArticles(folderId: Long)
+
+    /**
+     * Delete all folder-article relationships for an article
+     *
+     * @param articleUrl The URL of the article
+     */
+    @Query("DELETE FROM folder_articles WHERE articleUrl = :articleUrl")
+    suspend fun deleteArticleFolders(articleUrl: String)
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/local/EncryptedPreferences.kt b/app/src/main/java/com/quick/browser/data/local/EncryptedPreferences.kt
new file mode 100644
index 0000000..36574b5
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/local/EncryptedPreferences.kt
@@ -0,0 +1,284 @@
+package com.quick.browser.data.local
+
+import android.content.Context
+import android.content.SharedPreferences
+import android.security.keystore.KeyGenParameterSpec
+import android.security.keystore.KeyProperties
+import android.util.Base64
+import com.quick.browser.utils.Logger
+import java.security.KeyStore
+import javax.crypto.Cipher
+import javax.crypto.KeyGenerator
+import javax.crypto.SecretKey
+import javax.crypto.spec.GCMParameterSpec
+
+/**
+ * Encrypted SharedPreferences wrapper using Android Keystore
+ *
+ * This class provides a secure way to store sensitive data using
+ * Android's Keystore system for encryption.
+ */
+class EncryptedPreferences private constructor(context: Context, private val preferencesName: String) {
+
+    companion object {
+        private const val TAG = "EncryptedPreferences"
+        private const val KEY_ALIAS = "quick_browser_encryption_key"
+        private const val ANDROID_KEYSTORE = "AndroidKeyStore"
+        private const val TRANSFORMATION = "AES/GCM/NoPadding"
+        private const val GCM_IV_LENGTH = 12
+        private const val GCM_TAG_LENGTH = 128
+
+        private var instance: EncryptedPreferences? = null
+
+        /**
+         * Get the singleton instance of EncryptedPreferences
+         *
+         * @param context The application context
+         * @param preferencesName The name of the preferences file
+         * @return The EncryptedPreferences instance
+         */
+        fun getInstance(context: Context, preferencesName: String): EncryptedPreferences {
+            if (instance == null) {
+                instance = EncryptedPreferences(context, preferencesName)
+            }
+            return instance!!
+        }
+    }
+
+    private val keyStore: KeyStore = KeyStore.getInstance(ANDROID_KEYSTORE)
+    private val sharedPreferences: SharedPreferences = context.getSharedPreferences(preferencesName, Context.MODE_PRIVATE)
+
+    init {
+        keyStore.load(null)
+        generateKeyIfNotExists()
+    }
+
+    /**
+     * Generate encryption key if it doesn't exist
+     */
+    private fun generateKeyIfNotExists() {
+        try {
+            if (!keyStore.containsAlias(KEY_ALIAS)) {
+                val keyGenerator = KeyGenerator.getInstance(KeyProperties.KEY_ALGORITHM_AES, ANDROID_KEYSTORE)
+                val keyGenParameterSpec = KeyGenParameterSpec.Builder(
+                    KEY_ALIAS,
+                    KeyProperties.PURPOSE_ENCRYPT or KeyProperties.PURPOSE_DECRYPT
+                )
+                    .setBlockModes(KeyProperties.BLOCK_MODE_GCM)
+                    .setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_NONE)
+                    .setKeySize(256)
+                    .build()
+
+                keyGenerator.init(keyGenParameterSpec)
+                keyGenerator.generateKey()
+            }
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error generating encryption key", e)
+        }
+    }
+
+    /**
+     * Get the secret key from the keystore
+     *
+     * @return The secret key
+     */
+    private fun getSecretKey(): SecretKey {
+        return keyStore.getKey(KEY_ALIAS, null) as SecretKey
+    }
+
+    /**
+     * Encrypt a string value
+     *
+     * @param value The value to encrypt
+     * @return The encrypted value as a base64 string, or null if encryption failed
+     */
+    private fun encrypt(value: String): String? {
+        return try {
+            val cipher = Cipher.getInstance(TRANSFORMATION)
+            cipher.init(Cipher.ENCRYPT_MODE, getSecretKey())
+
+            val iv = cipher.iv
+            val encryptedBytes = cipher.doFinal(value.toByteArray(Charsets.UTF_8))
+
+            // Combine IV and encrypted data
+            val combined = ByteArray(iv.size + encryptedBytes.size)
+            System.arraycopy(iv, 0, combined, 0, iv.size)
+            System.arraycopy(encryptedBytes, 0, combined, iv.size, encryptedBytes.size)
+
+            Base64.encodeToString(combined, Base64.DEFAULT)
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error encrypting value", e)
+            null
+        }
+    }
+
+    /**
+     * Decrypt a string value
+     *
+     * @param encryptedValue The encrypted value as a base64 string
+     * @return The decrypted value, or null if decryption failed
+     */
+    private fun decrypt(encryptedValue: String): String? {
+        return try {
+            val combined = Base64.decode(encryptedValue, Base64.DEFAULT)
+
+            // Extract IV and encrypted data
+            val iv = ByteArray(GCM_IV_LENGTH)
+            val encryptedBytes = ByteArray(combined.size - GCM_IV_LENGTH)
+
+            System.arraycopy(combined, 0, iv, 0, GCM_IV_LENGTH)
+            System.arraycopy(combined, GCM_IV_LENGTH, encryptedBytes, 0, encryptedBytes.size)
+
+            val cipher = Cipher.getInstance(TRANSFORMATION)
+            val spec = GCMParameterSpec(GCM_TAG_LENGTH, iv)
+            cipher.init(Cipher.DECRYPT_MODE, getSecretKey(), spec)
+
+            val decryptedBytes = cipher.doFinal(encryptedBytes)
+            String(decryptedBytes, Charsets.UTF_8)
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error decrypting value", e)
+            null
+        }
+    }
+
+    /**
+     * Put a string value in encrypted preferences
+     *
+     * @param key The preference key
+     * @param value The value to store
+     */
+    fun putString(key: String, value: String?) {
+        if (value == null) {
+            sharedPreferences.edit().remove(key).apply()
+            return
+        }
+
+        val encryptedValue = encrypt(value)
+        if (encryptedValue != null) {
+            sharedPreferences.edit().putString(key, encryptedValue).apply()
+        }
+    }
+
+    /**
+     * Get a string value from encrypted preferences
+     *
+     * @param key The preference key
+     * @param defaultValue The default value to return if key not found
+     * @return The decrypted value or default value
+     */
+    fun getString(key: String, defaultValue: String?): String? {
+        val encryptedValue = sharedPreferences.getString(key, null)
+        return if (encryptedValue != null) {
+            decrypt(encryptedValue) ?: defaultValue
+        } else {
+            defaultValue
+        }
+    }
+
+    /**
+     * Put a boolean value in encrypted preferences
+     *
+     * @param key The preference key
+     * @param value The value to store
+     */
+    fun putBoolean(key: String, value: Boolean) {
+        putString(key, value.toString())
+    }
+
+    /**
+     * Get a boolean value from encrypted preferences
+     *
+     * @param key The preference key
+     * @param defaultValue The default value to return if key not found
+     * @return The decrypted value or default value
+     */
+    fun getBoolean(key: String, defaultValue: Boolean): Boolean {
+        val stringValue = getString(key, defaultValue.toString())
+        return try {
+            stringValue?.toBoolean() ?: defaultValue
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error parsing boolean value", e)
+            defaultValue
+        }
+    }
+
+    /**
+     * Put an integer value in encrypted preferences
+     *
+     * @param key The preference key
+     * @param value The value to store
+     */
+    fun putInt(key: String, value: Int) {
+        putString(key, value.toString())
+    }
+
+    /**
+     * Get an integer value from encrypted preferences
+     *
+     * @param key The preference key
+     * @param defaultValue The default value to return if key not found
+     * @return The decrypted value or default value
+     */
+    fun getInt(key: String, defaultValue: Int): Int {
+        val stringValue = getString(key, defaultValue.toString())
+        return try {
+            stringValue?.toInt() ?: defaultValue
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error parsing integer value", e)
+            defaultValue
+        }
+    }
+
+    /**
+     * Put a set of strings in encrypted preferences
+     *
+     * @param key The preference key
+     * @param value The set of strings to store
+     */
+    fun putStringSet(key: String, value: Set<String>?) {
+        if (value == null) {
+            sharedPreferences.edit().remove(key).apply()
+            return
+        }
+
+        // Convert set to JSON string for storage
+        val jsonString = value.joinToString(",") { it }
+        putString(key, jsonString)
+    }
+
+    /**
+     * Get a set of strings from encrypted preferences
+     *
+     * @param key The preference key
+     * @param defaultValue The default value to return if key not found
+     * @return The decrypted set of strings or default value
+     */
+    fun getStringSet(key: String, defaultValue: Set<String>?): Set<String>? {
+        val jsonString = getString(key, null)
+        return if (jsonString != null) {
+            if (jsonString.isEmpty()) {
+                emptySet()
+            } else {
+                jsonString.split(",").toSet()
+            }
+        } else {
+            defaultValue
+        }
+    }
+
+    /**
+     * Remove a value from encrypted preferences
+     *
+     * @param key The preference key to remove
+     */
+    fun remove(key: String) {
+        sharedPreferences.edit().remove(key).apply()
+    }
+
+    /**
+     * Clear all values from encrypted preferences
+     */
+    fun clear() {
+        sharedPreferences.edit().clear().apply()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/local/dao/SavedArticleDao.kt b/app/src/main/java/com/quick/browser/data/local/dao/SavedArticleDao.kt
new file mode 100644
index 0000000..5cc507d
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/local/dao/SavedArticleDao.kt
@@ -0,0 +1,93 @@
+package com.quick.browser.data
+
+import androidx.room.*
+import com.quick.browser.data.local.entity.SavedArticle
+import kotlinx.coroutines.flow.Flow
+
+/**
+ * DAO for saved articles
+ *
+ * This interface provides methods for accessing and modifying saved articles in the database.
+ * It includes operations for inserting, retrieving, and deleting saved articles.
+ */
+@Dao
+interface SavedArticleDao {
+    
+    /**
+     * Get all saved articles ordered by saved date (newest first)
+     *
+     * @return A Flow of lists of saved articles ordered by saved date
+     */
+    @Query("SELECT * FROM saved_articles ORDER BY savedDate DESC")
+    fun getAllSavedArticles(): Flow<List<SavedArticle>>
+    
+    /**
+     * Get saved articles in a specific folder
+     *
+     * @param folderId The ID of the folder
+     * @return A Flow of lists of saved articles in the folder
+     */
+    @Query("SELECT sa.* FROM saved_articles sa INNER JOIN folder_articles fa ON sa.url = fa.articleUrl WHERE fa.folderId = :folderId ORDER BY sa.savedDate DESC")
+    fun getSavedArticlesInFolder(folderId: Long): Flow<List<SavedArticle>>
+    
+    /**
+     * Search saved articles by title or content
+     *
+     * @param query The search query
+     * @return A Flow of lists of saved articles matching the query
+     */
+    @Query("SELECT * FROM saved_articles WHERE title LIKE '%' || :query || '%' OR content LIKE '%' || :query || '%' ORDER BY savedDate DESC")
+    fun searchSavedArticles(query: String): Flow<List<SavedArticle>>
+    
+    /**
+     * Search saved articles in a specific folder by title or content
+     *
+     * @param folderId The ID of the folder
+     * @param query The search query
+     * @return A Flow of lists of saved articles matching the query in the folder
+     */
+    @Query("SELECT sa.* FROM saved_articles sa INNER JOIN folder_articles fa ON sa.url = fa.articleUrl WHERE fa.folderId = :folderId AND (sa.title LIKE '%' || :query || '%' OR sa.content LIKE '%' || :query || '%') ORDER BY sa.savedDate DESC")
+    fun searchSavedArticlesInFolder(folderId: Long, query: String): Flow<List<SavedArticle>>
+    
+    /**
+     * Get a saved article by its URL
+     *
+     * @param url The URL of the article to retrieve
+     * @return The saved article or null if not found
+     */
+    @Query("SELECT * FROM saved_articles WHERE url = :url")
+    suspend fun getSavedArticleByUrl(url: String): SavedArticle?
+    
+    /**
+     * Insert a saved article
+     *
+     * @param article The article to insert
+     */
+    @Insert(onConflict = OnConflictStrategy.REPLACE)
+    suspend fun insertSavedArticle(article: SavedArticle)
+    
+    /**
+     * Delete a saved article
+     *
+     * @param article The article to delete
+     */
+    @Delete
+    suspend fun deleteSavedArticle(article: SavedArticle)
+    
+    /**
+     * Delete a saved article by its URL
+     *
+     * @param url The URL of the article to delete
+     */
+    @Query("DELETE FROM saved_articles WHERE url = :url")
+    suspend fun deleteSavedArticleByUrl(url: String)
+    
+    /**
+     * Check if an article is saved
+     *
+     * @param url The URL of the article to check
+     * @return The count of matching articles (0 if not saved, 1 if saved)
+     */
+    @Query("SELECT COUNT(*) FROM saved_articles WHERE url = :url")
+    suspend fun isArticleSaved(url: String): Int
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/local/dao/SettingsDao.kt b/app/src/main/java/com/quick/browser/data/local/dao/SettingsDao.kt
new file mode 100644
index 0000000..74fd81b
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/local/dao/SettingsDao.kt
@@ -0,0 +1,37 @@
+package com.quick.browser.data.local.dao
+
+import androidx.room.*
+import com.quick.browser.data.local.entity.Settings
+
+/**
+ * Data Access Object for Settings entity
+ *
+ * This interface provides methods for accessing and modifying settings in the database.
+ */
+@Dao
+interface SettingsDao {
+
+    /**
+     * Get the current settings
+     *
+     * @return The current settings or null if no settings exist
+     */
+    @Query("SELECT * FROM settings WHERE id = 1 LIMIT 1") 
+    suspend fun getSettings(): Settings?
+
+    /**
+     * Insert or update settings
+     *
+     * @param settings The settings to insert or update
+     */
+    @Insert(onConflict = OnConflictStrategy.Companion.REPLACE) 
+    suspend fun insertSettings(settings: Settings)
+
+    /**
+     * Update settings
+     *
+     * @param settings The settings to update
+     */
+    @Update
+    suspend fun updateSettings(settings: Settings)
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/local/dao/WebPageDao.kt b/app/src/main/java/com/quick/browser/data/local/dao/WebPageDao.kt
new file mode 100644
index 0000000..23e29b9
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/local/dao/WebPageDao.kt
@@ -0,0 +1,179 @@
+package com.quick.browser.data.local.dao
+
+import androidx.lifecycle.LiveData
+import androidx.room.*
+import com.quick.browser.data.local.entity.WebPage
+
+/**
+ * Data Access Object for WebPage entities
+ *
+ * This interface provides methods for accessing and modifying web pages in the database.
+ * It includes operations for inserting, updating, deleting, and querying web pages
+ * with various criteria such as recency, visit count, and time periods.
+ */
+@Dao
+interface WebPageDao {
+
+    /**
+     * Insert a new page
+     *
+     * @param page The page to insert
+     */
+    @Insert(onConflict = OnConflictStrategy.Companion.REPLACE)
+    suspend fun insertPage(page: WebPage)
+
+    /**
+     * Update an existing page
+     *
+     * @param page The page to update
+     */
+    @Update
+    suspend fun updatePage(page: WebPage)
+
+    /**
+     * Delete a page
+     *
+     * @param page The page to delete
+     */
+    @Delete
+    suspend fun deletePage(page: WebPage)
+
+    /**
+     * Get all pages ordered by timestamp (newest first)
+     *
+     * @return LiveData containing a list of all pages ordered by timestamp
+     */
+    @Query("SELECT * FROM web_pages ORDER BY timestamp DESC")
+    fun getAllPages(): LiveData<List<WebPage>>
+
+    /**
+     * Get a specific page by URL
+     *
+     * @param url The URL of the page to retrieve
+     * @return The page or null if not found
+     */
+    @Query("SELECT * FROM web_pages WHERE url = :url LIMIT 1")
+    suspend fun getPageByUrl(url: String): WebPage?
+
+    /**
+     * Delete all pages
+     */
+    @Query("DELETE FROM web_pages")
+    suspend fun deleteAllPages()
+
+    /**
+     * Delete pages from the last hour
+     *
+     * @param oneHourAgo The timestamp representing one hour ago
+     */
+    @Query("DELETE FROM web_pages WHERE timestamp >= :oneHourAgo")
+    suspend fun deleteLastHourPages(oneHourAgo: Long)
+
+    /**
+     * Search pages by title or URL
+     *
+     * @param query The search query
+     * @return LiveData containing a list of matching pages
+     */
+    @Query("SELECT * FROM web_pages WHERE title LIKE :query OR url LIKE :query ORDER BY timestamp DESC")
+    fun searchPages(query: String): LiveData<List<WebPage>>
+
+    /**
+     * Search pages by title or URL without BLOB data for efficient loading
+     *
+     * @param query The search query
+     * @return LiveData containing a list of matching pages without BLOB data
+     */
+    @Query("SELECT url, title, timestamp, content, isAvailableOffline, visitCount, faviconUrl, previewImageUrl FROM web_pages WHERE title LIKE :query OR url LIKE :query ORDER BY timestamp DESC")
+    @SuppressWarnings(RoomWarnings.Companion.QUERY_MISMATCH)
+    fun searchPagesWithoutBlobs(query: String): LiveData<List<WebPage>>
+
+    /**
+     * Get the most recent pages
+     *
+     * @param limit The maximum number of pages to return
+     * @return LiveData containing a list of recent pages
+     */
+    @Query("SELECT * FROM web_pages ORDER BY timestamp DESC LIMIT :limit")
+    fun getRecentPages(limit: Int): LiveData<List<WebPage>>
+
+    /**
+     * Get the most recent pages without BLOB data for efficient loading in lists
+     *
+     * @param limit The maximum number of pages to return
+     * @return LiveData containing a list of recent pages without BLOB data
+     */
+    @Query("SELECT url, title, timestamp, content, isAvailableOffline, visitCount, faviconUrl, previewImageUrl FROM web_pages ORDER BY timestamp DESC LIMIT :limit")
+    @SuppressWarnings(RoomWarnings.Companion.QUERY_MISMATCH)
+    fun getRecentPagesWithoutBlobs(limit: Int): LiveData<List<WebPage>>
+
+    /**
+     * Get the most visited pages
+     *
+     * @param limit The maximum number of pages to return
+     * @return LiveData containing a list of most visited pages
+     */
+    @Query("SELECT * FROM web_pages ORDER BY visitCount DESC LIMIT :limit")
+    fun getMostVisitedPages(limit: Int): LiveData<List<WebPage>>
+
+    /**
+     * Increment visit count for a page
+     *
+     * @param url The URL of the page to increment the visit count for
+     */
+    @Query("UPDATE web_pages SET visitCount = visitCount + 1 WHERE url = :url")
+    suspend fun incrementVisitCount(url: String)
+
+    /**
+     * Update the isAvailableOffline status for a page
+     *
+     * @param url The URL of the page
+     * @param isAvailable Whether the page is available offline
+     */
+    @Query("UPDATE web_pages SET isAvailableOffline = :isAvailable WHERE url = :url")
+    suspend fun updateOfflineStatus(url: String, isAvailable: Boolean)
+
+    /**
+     * Delete pages from today (since midnight)
+     *
+     * @param startOfDay The timestamp representing the start of today
+     */
+    @Query("DELETE FROM web_pages WHERE timestamp >= :startOfDay")
+    suspend fun deleteTodayPages(startOfDay: Long)
+
+    /**
+     * Delete pages from last month (last 30 days)
+     *
+     * @param thirtyDaysAgo The timestamp representing 30 days ago
+     */
+    @Query("DELETE FROM web_pages WHERE timestamp >= :thirtyDaysAgo")
+    suspend fun deleteLastMonthPages(thirtyDaysAgo: Long)
+
+    /**
+     * Get pages from today (since midnight)
+     *
+     * @param startOfDay The timestamp representing the start of today
+     * @return LiveData containing a list of today's pages
+     */
+    @Query("SELECT * FROM web_pages WHERE timestamp >= :startOfDay ORDER BY timestamp DESC")
+    fun getTodayPages(startOfDay: Long): LiveData<List<WebPage>>
+
+    /**
+     * Get pages from this week (between start of week and start of today)
+     *
+     * @param startOfWeek The timestamp representing the start of the week
+     * @param startOfDay The timestamp representing the start of today
+     * @return LiveData containing a list of this week's pages
+     */
+    @Query("SELECT * FROM web_pages WHERE timestamp >= :startOfWeek AND timestamp < :startOfDay ORDER BY timestamp DESC")
+    fun getThisWeekPages(startOfWeek: Long, startOfDay: Long): LiveData<List<WebPage>>
+
+    /**
+     * Get older pages (before start of week)
+     *
+     * @param startOfWeek The timestamp representing the start of the week
+     * @return LiveData containing a list of older pages
+     */
+    @Query("SELECT * FROM web_pages WHERE timestamp < :startOfWeek ORDER BY timestamp DESC")
+    fun getOlderPages(startOfWeek: Long): LiveData<List<WebPage>>
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/local/database/AppDatabase.kt b/app/src/main/java/com/quick/browser/data/local/database/AppDatabase.kt
new file mode 100644
index 0000000..e2e0625
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/local/database/AppDatabase.kt
@@ -0,0 +1,84 @@
+package com.quick.browser.data.local.database
+
+import android.content.Context
+import androidx.room.Database
+import androidx.room.Room
+import androidx.room.RoomDatabase
+import androidx.room.TypeConverters
+import com.quick.browser.data.FolderDao
+import com.quick.browser.data.SavedArticleDao
+import com.quick.browser.data.local.dao.SettingsDao
+import com.quick.browser.data.local.dao.WebPageDao
+import com.quick.browser.data.local.entity.Folder
+import com.quick.browser.data.local.entity.FolderArticle
+import com.quick.browser.data.local.entity.SavedArticle
+import com.quick.browser.data.local.entity.Settings
+import com.quick.browser.data.local.entity.WebPage
+
+/**
+ * Room database for the QB app
+ *
+ * This abstract class defines the Room database for the application.
+ * It includes entities for web pages, settings, and saved articles,
+ * along with their respective DAOs for database access.
+ */
+@Database(entities = [WebPage::class, Settings::class, SavedArticle::class, Folder::class, FolderArticle::class], version = 2, exportSchema = false)
+@TypeConverters(Converters::class)
+abstract class AppDatabase : RoomDatabase() {
+
+    /**
+     * Get the WebPage DAO
+     *
+     * @return The WebPageDao instance
+     */
+    abstract fun webPageDao(): WebPageDao
+
+    /**
+     * Get the Settings DAO
+     *
+     * @return The SettingsDao instance
+     */
+    abstract fun settingsDao(): SettingsDao
+
+    /**
+     * Get the SavedArticle DAO
+     *
+     * @return The SavedArticleDao instance
+     */
+    abstract fun savedArticleDao(): SavedArticleDao
+
+    /**
+     * Get the Folder DAO
+     *
+     * @return The FolderDao instance
+     */
+    abstract fun folderDao(): FolderDao
+
+    companion object {
+        private const val DATABASE_NAME = "quick_browser.db"
+
+        @Volatile
+        private var INSTANCE: AppDatabase? = null
+
+        /**
+         * Get the singleton instance of the AppDatabase
+         *
+         * @param context The application context
+         * @return The singleton instance of the AppDatabase
+         */
+        fun getInstance(context: Context): AppDatabase {
+            return INSTANCE ?: synchronized(this) {
+                val instance = Room.databaseBuilder(
+                    context.applicationContext,
+                    AppDatabase::class.java,
+                    DATABASE_NAME
+                )
+                    .fallbackToDestructiveMigration()
+                    .build()
+
+                INSTANCE = instance
+                instance
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/local/database/Converters.kt b/app/src/main/java/com/quick/browser/data/local/database/Converters.kt
new file mode 100644
index 0000000..b58dcba
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/local/database/Converters.kt
@@ -0,0 +1,80 @@
+package com.quick.browser.data.local.database
+
+import android.graphics.Bitmap
+import android.graphics.BitmapFactory
+import androidx.room.TypeConverter
+import com.google.gson.Gson
+import com.google.gson.reflect.TypeToken
+import java.io.ByteArrayOutputStream
+
+/**
+ * Type converters for Room database
+ *
+ * Handles conversion of complex types to and from database-storable types.
+ * This class provides converters for Bitmap images and String lists.
+ */
+class Converters {
+    private val gson = Gson()
+
+    /**
+     * Convert a Bitmap to a ByteArray for storage in the database
+     *
+     * @param bitmap The Bitmap to convert
+     * @return The ByteArray representation of the Bitmap, or null if the input was null
+     */
+    @TypeConverter
+    fun fromBitmap(bitmap: Bitmap?): ByteArray? {
+        if (bitmap == null) return null
+        val outputStream = ByteArrayOutputStream()
+        bitmap.compress(Bitmap.CompressFormat.PNG, 100, outputStream)
+        return outputStream.toByteArray()
+    }
+
+    /**
+     * Convert a ByteArray from the database back to a Bitmap
+     *
+     * @param bytes The ByteArray to convert
+     * @return The Bitmap representation of the ByteArray, or null if the input was null
+     */
+    @TypeConverter
+    fun toBitmap(bytes: ByteArray?): Bitmap? {
+        return bytes?.let {
+            BitmapFactory.decodeByteArray(it, 0, it.size)
+        }
+    }
+
+    /**
+     * Converts a List<String> to a JSON string for storage in the database
+     *
+     * @param value The List<String> to convert
+     * @return The JSON string representation of the list
+     */
+    @TypeConverter
+    fun fromStringList(value: List<String>?): String {
+        return if (value == null || value.isEmpty()) {
+            ""
+        } else {
+            gson.toJson(value)
+        }
+    }
+
+    /**
+     * Converts a JSON string from the database back to a List<String>
+     *
+     * @param value The JSON string to convert
+     * @return The List<String> representation of the JSON string
+     */
+    @TypeConverter
+    fun toStringList(value: String?): List<String> {
+        if (value.isNullOrEmpty()) {
+            return emptyList()
+        }
+
+        val listType = object : TypeToken<List<String>>() {}.type
+        return try {
+            gson.fromJson(value, listType)
+        } catch (e: Exception) {
+            emptyList()
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/local/entity/Folder.kt b/app/src/main/java/com/quick/browser/data/local/entity/Folder.kt
new file mode 100644
index 0000000..0037f0c
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/local/entity/Folder.kt
@@ -0,0 +1,21 @@
+package com.quick.browser.data.local.entity
+
+import androidx.room.Entity
+import androidx.room.PrimaryKey
+
+/**
+ * Entity representing a folder for organizing saved articles
+ *
+ * @property id The unique identifier for the folder (primary key)
+ * @property name The name of the folder
+ * @property createdAt The timestamp when the folder was created
+ * @property updatedAt The timestamp when the folder was last updated
+ */
+@Entity(tableName = "folders")
+data class Folder(
+    @PrimaryKey(autoGenerate = true)
+    val id: Long = 0,
+    val name: String,
+    val createdAt: Long = System.currentTimeMillis(),
+    val updatedAt: Long = System.currentTimeMillis()
+)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/local/entity/FolderArticle.kt b/app/src/main/java/com/quick/browser/data/local/entity/FolderArticle.kt
new file mode 100644
index 0000000..4d291b1
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/local/entity/FolderArticle.kt
@@ -0,0 +1,38 @@
+package com.quick.browser.data.local.entity
+
+import androidx.room.Entity
+import androidx.room.ForeignKey
+import androidx.room.Index
+
+/**
+ * Entity representing the relationship between folders and saved articles
+ *
+ * @property folderId The ID of the folder
+ * @property articleUrl The URL of the saved article
+ */
+@Entity(
+    tableName = "folder_articles",
+    primaryKeys = ["folderId", "articleUrl"],
+    foreignKeys = [
+        ForeignKey(
+            entity = Folder::class,
+            parentColumns = ["id"],
+            childColumns = ["folderId"],
+            onDelete = ForeignKey.CASCADE
+        ),
+        ForeignKey(
+            entity = SavedArticle::class,
+            parentColumns = ["url"],
+            childColumns = ["articleUrl"],
+            onDelete = ForeignKey.CASCADE
+        )
+    ],
+    indices = [
+        Index(value = ["folderId"]),
+        Index(value = ["articleUrl"])
+    ]
+)
+data class FolderArticle(
+    val folderId: Long,
+    val articleUrl: String
+)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/local/entity/SavedArticle.kt b/app/src/main/java/com/quick/browser/data/local/entity/SavedArticle.kt
new file mode 100644
index 0000000..a1c56b5
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/local/entity/SavedArticle.kt
@@ -0,0 +1,33 @@
+package com.quick.browser.data.local.entity
+
+import androidx.room.Entity
+import androidx.room.PrimaryKey
+
+/**
+ * Entity representing a saved article for offline reading
+ *
+ * This class defines the structure of the saved articles table in the database.
+ * It includes the content of articles saved for offline reading, along with
+ * metadata such as author, publication date, and save date.
+ *
+ * @property url The URL of the article (primary key)
+ * @property title The title of the article
+ * @property content The content of the article
+ * @property byline The author or byline of the article
+ * @property siteName The name of the website where the article was published
+ * @property publishDate The date when the article was published
+ * @property savedDate The timestamp when the article was saved
+ * @property excerpt A short excerpt or summary of the article
+ */
+@Entity(tableName = "saved_articles")
+data class SavedArticle(
+    @PrimaryKey
+    val url: String,
+    val title: String,
+    val content: String,
+    val byline: String?,
+    val siteName: String?,
+    val publishDate: String?,
+    val savedDate: Long,
+    val excerpt: String?
+)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/local/entity/Settings.kt b/app/src/main/java/com/quick/browser/data/local/entity/Settings.kt
new file mode 100644
index 0000000..c5261f5
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/local/entity/Settings.kt
@@ -0,0 +1,43 @@
+package com.quick.browser.data.local.entity
+
+import androidx.room.Entity
+import androidx.room.PrimaryKey
+
+/**
+ * Entity representing app settings
+ *
+ * This class defines the structure of the settings table in the database.
+ * It includes various configuration options for the application.
+ *
+ * @property size The size of the browser bubble
+ * @property animationSpeed The speed of animations in the app
+ * @property savePositions Whether to save bubble positions
+ * @property blockAds Whether to block ads
+ * @property defaultColor The default color for the app
+ * @property javascriptEnabled Whether JavaScript is enabled
+ * @property darkTheme Whether dark theme is enabled
+ * @property bubbleSize The size of the bubble as a float multiplier
+ * @property expandedBubbleSize The size of the expanded bubble as a float multiplier
+ * @property animSpeed The speed of animations as a float multiplier
+ * @property saveHistory Whether to save browsing history
+ * @property encryptData Whether to encrypt saved data
+ * @property bubblePositionRight Whether the bubble should be positioned on the right side of the screen
+ * @property id The unique identifier for the settings record (primary key, always 1)
+ */
+@Entity(tableName = "settings")
+data class Settings(
+        val size: String = "medium",
+        val animationSpeed: String = "medium",
+        val savePositions: Boolean = true,
+        val blockAds: Boolean = true,
+        val defaultColor: String = "#2196F3",
+        val javascriptEnabled: Boolean = true,
+        val darkTheme: Boolean = false,
+        val bubbleSize: Float = 1.0f,
+        val expandedBubbleSize: Float = 1.5f, // Add this line
+        val animSpeed: Float = 1.0f,
+        val saveHistory: Boolean = true,
+        val encryptData: Boolean = true,
+        val bubblePositionRight: Boolean = false,
+        @PrimaryKey val id: Int = 1 // Only one settings row in the database
+)
diff --git a/app/src/main/java/com/quick/browser/data/local/entity/WebPage.kt b/app/src/main/java/com/quick/browser/data/local/entity/WebPage.kt
new file mode 100644
index 0000000..3515400
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/local/entity/WebPage.kt
@@ -0,0 +1,129 @@
+package com.quick.browser.data.local.entity
+
+import android.graphics.Bitmap
+import android.os.Build
+import android.os.Parcel
+import android.os.Parcelable
+import androidx.room.Entity
+import androidx.room.Ignore
+import androidx.room.PrimaryKey
+
+/**
+ * Entity representing a web page in history and offline storage
+ *
+ * This class defines the structure of the web pages table in the database.
+ * It includes information about web pages visited by the user, including
+ * content for offline viewing and metadata for display purposes.
+ *
+ * @property url The URL of the web page (primary key)
+ * @property title The title of the web page
+ * @property timestamp The timestamp when the page was visited
+ * @property content The content of the web page for offline viewing
+ * @property isAvailableOffline Whether the page is available for offline viewing
+ * @property visitCount The number of times the page has been visited
+ * @property favicon The favicon of the web page
+ * @property faviconUrl The URL of the favicon
+ * @property previewImageUrl The URL of a preview image for the page
+ */
+@Entity(tableName = "web_pages")
+data class WebPage(
+    @PrimaryKey
+    val url: String,
+    var title: String,
+    var timestamp: Long,
+    var content: String = "",
+    var isAvailableOffline: Boolean = false,
+    var visitCount: Int = 1,
+    var favicon: Bitmap? = null,
+    var faviconUrl: String? = null,
+    var previewImageUrl: String? = null
+) : Parcelable {
+
+    // Transient fields not stored in the database
+    @Ignore
+    var summary: List<String> = emptyList()
+    
+    @Ignore
+    var parentBubbleId: String? = null
+
+    /**
+     * Constructor to create a WebPage object from a Parcel.
+     *
+     * @param parcel The Parcel to read data from
+     */
+    private constructor(parcel: Parcel) : this(
+        url = parcel.readString() ?: "",
+        title = parcel.readString() ?: "",
+        content = parcel.readString() ?: "",
+        favicon = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
+            parcel.readParcelable(Bitmap::class.java.classLoader, Bitmap::class.java)
+        } else {
+            @Suppress("DEPRECATION")
+            parcel.readParcelable(Bitmap::class.java.classLoader)
+        },
+        faviconUrl = parcel.readString(),
+        previewImageUrl = parcel.readString(),
+        timestamp = parcel.readLong(),
+        visitCount = parcel.readInt()
+    ) {
+        summary = parcel.createStringArrayList() ?: emptyList()
+        parentBubbleId = parcel.readString()
+    }
+
+    /**
+     * Copies the transient fields to a new WebPage instance
+     *
+     * @param webPage The WebPage instance to copy fields to
+     * @return The WebPage instance with copied transient fields
+     */
+    fun copyTransientFields(webPage: WebPage): WebPage {
+        webPage.summary = this.summary
+        webPage.parentBubbleId = this.parentBubbleId
+        return webPage
+    }
+
+    /**
+     * Writes the WebPage object to a Parcel for serialization.
+     *
+     * @param parcel The Parcel to write data to
+     * @param flags Additional flags about how the object should be written
+     */
+    override fun writeToParcel(parcel: Parcel, flags: Int) {
+        parcel.writeString(url)
+        parcel.writeString(title)
+        parcel.writeLong(timestamp)
+        parcel.writeString(content)
+        parcel.writeInt(if (isAvailableOffline) 1 else 0)
+        parcel.writeInt(visitCount)
+        parcel.writeParcelable(favicon, flags)
+        parcel.writeString(faviconUrl)
+        parcel.writeString(previewImageUrl)
+        parcel.writeStringList(summary)
+        parcel.writeString(parentBubbleId)
+    }
+
+    /**
+     * Describes the contents of the Parcelable object.
+     *
+     * @return Always returns 0
+     */
+    override fun describeContents(): Int = 0
+
+    companion object CREATOR : Parcelable.Creator<WebPage> {
+        /**
+         * Creates a WebPage object from a Parcel.
+         *
+         * @param parcel The Parcel to read data from
+         * @return A new WebPage instance
+         */
+        override fun createFromParcel(parcel: Parcel): WebPage = WebPage(parcel)
+
+        /**
+         * Creates a new array of WebPage objects.
+         *
+         * @param size The size of the array
+         * @return A new array of WebPage objects
+         */
+        override fun newArray(size: Int): Array<WebPage?> = arrayOfNulls(size)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/network/ModelDownloader.kt b/app/src/main/java/com/quick/browser/data/network/ModelDownloader.kt
new file mode 100644
index 0000000..301e9a5
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/network/ModelDownloader.kt
@@ -0,0 +1,101 @@
+package com.quick.browser.data.network
+
+import android.content.Context
+import com.quick.browser.utils.Logger
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.withContext
+import java.io.File
+import java.net.URL
+
+/**
+ * Utility class for downloading NLP models
+ */
+class ModelDownloader(private val context: Context) {
+
+    companion object {
+        private const val TAG = "ModelDownloader"
+        private const val SENTENCE_MODEL_FILENAME = "en-sent.bin"
+
+        // URL to download the model from
+        // This should be updated with the actual model URL
+        private const val SENTENCE_MODEL_URL = "https://opennlp.sourceforge.net/models-1.5/en-sent.bin"
+    }
+
+    /**
+     * Checks if the sentence model is already downloaded
+     */
+    fun isSentenceModelDownloaded(): Boolean {
+        val modelFile = File(context.getExternalFilesDir(null), SENTENCE_MODEL_FILENAME)
+        return modelFile.exists() && modelFile.length() > 0
+    }
+
+    /**
+     * Downloads the sentence model if it's not already downloaded
+     * @return true if the model is available (either downloaded now or previously)
+     */
+    suspend fun ensureSentenceModelAvailable(): Boolean = withContext(Dispatchers.IO) {
+        try {
+            if (isSentenceModelDownloaded()) {
+                Logger.d(TAG, "Sentence model already downloaded")
+                return@withContext true
+            }
+
+            Logger.d(TAG, "Downloading sentence model...")
+
+            // Create a temporary file
+            val tempFile = File(context.cacheDir, "$SENTENCE_MODEL_FILENAME.tmp")
+            if (tempFile.exists()) {
+                tempFile.delete()
+            }
+
+            // Download the model
+            val url = URL(SENTENCE_MODEL_URL)
+            val connection = url.openConnection()
+            connection.connectTimeout = 30000
+            connection.readTimeout = 30000
+
+            connection.getInputStream().use { input ->
+                tempFile.outputStream().use { output ->
+                    input.copyTo(output)
+                }
+            }
+
+            // Move to final location
+            val modelFile = File(context.getExternalFilesDir(null), SENTENCE_MODEL_FILENAME)
+            tempFile.renameTo(modelFile)
+
+            Logger.d(TAG, "Sentence model downloaded successfully")
+            return@withContext true
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error downloading sentence model", e)
+
+            // Check if the asset exists
+            val assetList = context.assets.list("")
+            val hasAsset = assetList?.contains(SENTENCE_MODEL_FILENAME) == true
+
+            if (hasAsset) {
+                try {
+                    // Check if the asset has content
+                    val assetFileDescriptor = context.assets.openFd(SENTENCE_MODEL_FILENAME)
+                    val hasContent = assetFileDescriptor.length > 0
+                    assetFileDescriptor.close()
+
+                    if (hasContent) {
+                        val modelFile = File(context.getExternalFilesDir(null), SENTENCE_MODEL_FILENAME)
+                        context.assets.open(SENTENCE_MODEL_FILENAME).use { input ->
+                            modelFile.outputStream().use { output ->
+                                input.copyTo(output)
+                            }
+                        }
+                        Logger.d(TAG, "Used fallback sentence model from assets")
+                        return@withContext true
+                    }
+                } catch (e: Exception) {
+                    Logger.e(TAG, "Error checking asset content", e)
+                }
+            }
+
+            return@withContext false
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/repository/ArticleRepositoryImpl.kt b/app/src/main/java/com/quick/browser/data/repository/ArticleRepositoryImpl.kt
new file mode 100644
index 0000000..41b2585
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/repository/ArticleRepositoryImpl.kt
@@ -0,0 +1,229 @@
+package com.quick.browser.data.repository
+
+import com.quick.browser.data.SavedArticleDao
+import com.quick.browser.data.local.entity.SavedArticle
+import com.quick.browser.domain.repository.ArticleRepository
+import com.quick.browser.service.ReadabilityService
+import kotlinx.coroutines.flow.Flow
+import kotlinx.coroutines.flow.map
+import javax.inject.Inject
+
+/**
+ * Repository implementation for managing saved articles
+ *
+ * This class implements the ArticleRepository interface and provides concrete
+ * implementations for accessing and modifying saved articles in the database.
+ * It also handles content extraction using the ReadabilityService.
+ *
+ * @param savedArticleDao The DAO for accessing saved articles in the database
+ * @param readabilityService The service for extracting readable content from web pages
+ */
+class ArticleRepositoryImpl @Inject constructor(
+    private val savedArticleDao: SavedArticleDao,
+    private val readabilityService: ReadabilityService
+) : ArticleRepository {
+    
+    /**
+     * Get all saved articles as a flow
+     *
+     * @return A flow of lists of saved articles
+     */
+    override fun getAllSavedArticles(): Flow<List<com.quick.browser.domain.model.SavedArticle>> {
+        return savedArticleDao.getAllSavedArticles().map { list ->
+            list.map { entityToDomain(it) }
+        }
+    }
+    
+    /**
+     * Get saved articles in a specific folder
+     *
+     * @param folderId The ID of the folder
+     * @return A flow of lists of saved articles in the folder
+     */
+    override fun getSavedArticlesInFolder(folderId: Long): Flow<List<com.quick.browser.domain.model.SavedArticle>> {
+        return savedArticleDao.getSavedArticlesInFolder(folderId).map { list ->
+            list.map { entityToDomain(it) }
+        }
+    }
+    
+    /**
+     * Search saved articles by title or content
+     *
+     * @param query The search query
+     * @return A flow of lists of saved articles matching the query
+     */
+    override fun searchSavedArticles(query: String): Flow<List<com.quick.browser.domain.model.SavedArticle>> {
+        return savedArticleDao.searchSavedArticles(query).map { list ->
+            list.map { entityToDomain(it) }
+        }
+    }
+    
+    /**
+     * Search saved articles in a specific folder by title or content
+     *
+     * @param folderId The ID of the folder
+     * @param query The search query
+     * @return A flow of lists of saved articles matching the query in the folder
+     */
+    override fun searchSavedArticlesInFolder(folderId: Long, query: String): Flow<List<com.quick.browser.domain.model.SavedArticle>> {
+        return savedArticleDao.searchSavedArticlesInFolder(folderId, query).map { list ->
+            list.map { entityToDomain(it) }
+        }
+    }
+    
+    /**
+     * Get a saved article by its URL
+     *
+     * @param url The URL of the article to retrieve
+     * @return The saved article or null if not found
+     */
+    override suspend fun getSavedArticleByUrl(url: String): com.quick.browser.domain.model.SavedArticle? {
+        val entity = savedArticleDao.getSavedArticleByUrl(url)
+        return entity?.let { entityToDomain(it) }
+    }
+    
+    /**
+     * Save an article
+     *
+     * @param article The article to save
+     */
+    override suspend fun saveArticle(article: com.quick.browser.domain.model.SavedArticle) {
+        savedArticleDao.insertSavedArticle(domainToEntity(article))
+    }
+    
+    /**
+     * Save an article by extracting content from its URL
+     *
+     * @param url The URL of the article to save
+     * @return True if the article was saved successfully, false otherwise
+     */
+    override suspend fun saveArticleByUrl(url: String): Boolean {
+        return try {
+            // Extract content from URL using ReadabilityExtractor
+            val readableContent = readabilityService.extractFromUrl(url)
+            
+            if (readableContent != null) {
+                // Create saved article with extracted content
+                val savedArticle = com.quick.browser.domain.model.SavedArticle(
+                    url = url,
+                    title = readableContent.title,
+                    content = readableContent.content,
+                    savedDate = System.currentTimeMillis(),
+                    author = readableContent.byline,
+                    siteName = readableContent.siteName,
+                    publishDate = readableContent.publishDate,
+                    excerpt = readableContent.excerpt
+                )
+                
+                // Save to database
+                savedArticleDao.insertSavedArticle(domainToEntity(savedArticle))
+                true
+            } else {
+                // Extraction failed, but we'll handle this in the caller
+                false
+            }
+        } catch (e: Exception) {
+            // Log the error but don't crash
+            e.printStackTrace()
+            false
+        }
+    }
+    
+    /**
+     * Save an original page as an article
+     *
+     * @param url The URL of the page
+     * @param title The title of the page
+     * @param content The content of the page
+     * @return True if the article was saved successfully, false otherwise
+     */
+    override suspend fun saveOriginalPageAsArticle(url: String, title: String, content: String): Boolean {
+        return try {
+            // Create saved article with original page content
+            val savedArticle = com.quick.browser.domain.model.SavedArticle(
+                url = url,
+                title = title.ifEmpty { url },
+                content = content,
+                savedDate = System.currentTimeMillis(),
+                author = null,
+                siteName = null,
+                publishDate = null,
+                excerpt = null
+            )
+            
+            // Save to database
+            savedArticleDao.insertSavedArticle(domainToEntity(savedArticle))
+            true
+        } catch (e: Exception) {
+            // Log the error but don't crash
+            e.printStackTrace()
+            false
+        }
+    }
+    
+    /**
+     * Delete a saved article
+     *
+     * @param article The article to delete
+     */
+    override suspend fun deleteArticle(article: com.quick.browser.domain.model.SavedArticle) {
+        savedArticleDao.deleteSavedArticle(domainToEntity(article))
+    }
+    
+    /**
+     * Delete a saved article by its URL
+     *
+     * @param url The URL of the article to delete
+     */
+    override suspend fun deleteArticleByUrl(url: String) {
+        savedArticleDao.deleteSavedArticleByUrl(url)
+    }
+    
+    /**
+     * Check if an article is saved
+     *
+     * @param url The URL of the article to check
+     * @return True if the article is saved, false otherwise
+     */
+    override suspend fun isArticleSaved(url: String): Boolean {
+        return savedArticleDao.isArticleSaved(url) > 0
+    }
+    
+    /**
+     * Convert a saved article entity to a domain model
+     *
+     * @param entity The saved article entity to convert
+     * @return The domain model representation of the saved article
+     */
+    private fun entityToDomain(entity: SavedArticle): com.quick.browser.domain.model.SavedArticle {
+        return com.quick.browser.domain.model.SavedArticle(
+            url = entity.url,
+            title = entity.title,
+            content = entity.content,
+            savedDate = entity.savedDate,
+            author = entity.byline,
+            siteName = entity.siteName,
+            publishDate = entity.publishDate,
+            excerpt = entity.excerpt
+        )
+    }
+    
+    /**
+     * Convert a domain model to a saved article entity
+     *
+     * @param domain The domain model to convert
+     * @return The entity representation of the saved article
+     */
+    private fun domainToEntity(domain: com.quick.browser.domain.model.SavedArticle): SavedArticle {
+        return SavedArticle(
+            url = domain.url,
+            title = domain.title,
+            content = domain.content,
+            savedDate = domain.savedDate,
+            byline = domain.author,
+            siteName = domain.siteName,
+            publishDate = domain.publishDate,
+            excerpt = domain.excerpt
+        )
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/repository/BubbleRepositoryImpl.kt b/app/src/main/java/com/quick/browser/data/repository/BubbleRepositoryImpl.kt
new file mode 100644
index 0000000..6a5091b
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/repository/BubbleRepositoryImpl.kt
@@ -0,0 +1,70 @@
+package com.quick.browser.data.repository
+
+import com.quick.browser.domain.model.Bubble
+import com.quick.browser.domain.repository.BubbleRepository
+import javax.inject.Inject
+
+/**
+ * Repository implementation for managing browser bubbles
+ *
+ * This class implements the BubbleRepository interface and provides concrete
+ * implementations for accessing and modifying browser bubbles.
+ * Note: This is a simplified in-memory implementation for demonstration purposes.
+ * In a real application, this would use a database or other persistence mechanism.
+ */
+class BubbleRepositoryImpl @Inject constructor() : BubbleRepository {
+    
+    // In a real implementation, this would use a database or other persistence mechanism
+    // For now, we'll use an in-memory store to demonstrate the pattern
+    private val bubbleStore = mutableMapOf<String, Bubble>()
+    
+    /**
+     * Create a new bubble
+     *
+     * @param bubble The bubble to create
+     * @return The created bubble
+     */
+    override suspend fun createBubble(bubble: Bubble): Bubble {
+        bubbleStore[bubble.id] = bubble
+        return bubble
+    }
+    
+    /**
+     * Update an existing bubble
+     *
+     * @param bubble The bubble to update
+     * @return The updated bubble
+     */
+    override suspend fun updateBubble(bubble: Bubble): Bubble {
+        bubbleStore[bubble.id] = bubble
+        return bubble
+    }
+    
+    /**
+     * Get a bubble by its ID
+     *
+     * @param id The ID of the bubble to retrieve
+     * @return The bubble or null if not found
+     */
+    override suspend fun getBubbleById(id: String): Bubble? {
+        return bubbleStore[id]
+    }
+    
+    /**
+     * Delete a bubble
+     *
+     * @param bubble The bubble to delete
+     */
+    override suspend fun deleteBubble(bubble: Bubble) {
+        bubbleStore.remove(bubble.id)
+    }
+    
+    /**
+     * Get all bubbles
+     *
+     * @return A list of all bubbles
+     */
+    override suspend fun getAllBubbles(): List<Bubble> {
+        return bubbleStore.values.toList()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/repository/FolderRepositoryImpl.kt b/app/src/main/java/com/quick/browser/data/repository/FolderRepositoryImpl.kt
new file mode 100644
index 0000000..0d3fcb5
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/repository/FolderRepositoryImpl.kt
@@ -0,0 +1,198 @@
+package com.quick.browser.data.repository
+
+import com.quick.browser.data.FolderDao
+import com.quick.browser.data.SavedArticleDao
+import com.quick.browser.domain.model.Folder
+import com.quick.browser.domain.model.FolderArticle
+import com.quick.browser.domain.model.SavedArticle
+import com.quick.browser.domain.repository.FolderRepository
+import kotlinx.coroutines.flow.Flow
+import kotlinx.coroutines.flow.map
+import javax.inject.Inject
+
+/**
+ * Repository implementation for managing folders
+ *
+ * This class implements the FolderRepository interface and provides concrete
+ * implementations for accessing and modifying folders and their relationships
+ * with saved articles.
+ *
+ * @param folderDao The DAO for accessing folders in the database
+ * @param savedArticleDao The DAO for accessing saved articles in the database
+ */
+class FolderRepositoryImpl @Inject constructor(
+    private val folderDao: FolderDao,
+    private val savedArticleDao: SavedArticleDao
+) : FolderRepository {
+    
+    /**
+     * Get all folders as a flow
+     *
+     * @return A flow of lists of folders
+     */
+    override fun getAllFolders(): Flow<List<Folder>> {
+        return folderDao.getAllFolders().map { list ->
+            list.map { entityToDomain(it) }
+        }
+    }
+
+    /**
+     * Get a folder by its ID
+     *
+     * @param id The ID of the folder to retrieve
+     * @return The folder or null if not found
+     */
+    override suspend fun getFolderById(id: Long): Folder? {
+        val entity = folderDao.getFolderById(id)
+        return entity?.let { entityToDomain(it) }
+    }
+
+    /**
+     * Create a new folder
+     *
+     * @param name The name of the folder to create
+     * @return The created folder
+     */
+    override suspend fun createFolder(name: String): Folder {
+        val folder = com.quick.browser.data.local.entity.Folder(
+            name = name
+        )
+        val id = folderDao.insertFolder(folder)
+        return folder.copy(id = id).let { entityToDomain(it) }
+    }
+
+    /**
+     * Update a folder
+     *
+     * @param folder The folder to update
+     */
+    override suspend fun updateFolder(folder: Folder) {
+        val entity = domainToEntity(folder)
+        folderDao.updateFolder(entity.copy(updatedAt = System.currentTimeMillis()))
+    }
+
+    /**
+     * Delete a folder
+     *
+     * @param folder The folder to delete
+     */
+    override suspend fun deleteFolder(folder: Folder) {
+        val entity = domainToEntity(folder)
+        folderDao.deleteFolder(entity)
+    }
+
+    /**
+     * Add an article to a folder
+     *
+     * @param folderId The ID of the folder
+     * @param articleUrl The URL of the article to add
+     */
+    override suspend fun addArticleToFolder(folderId: Long, articleUrl: String) {
+        val folderArticle = com.quick.browser.data.local.entity.FolderArticle(
+            folderId = folderId,
+            articleUrl = articleUrl
+        )
+        folderDao.insertFolderArticle(folderArticle)
+    }
+
+    /**
+     * Remove an article from a folder
+     *
+     * @param folderId The ID of the folder
+     * @param articleUrl The URL of the article to remove
+     */
+    override suspend fun removeArticleFromFolder(folderId: Long, articleUrl: String) {
+        val folderArticle = com.quick.browser.data.local.entity.FolderArticle(
+            folderId = folderId,
+            articleUrl = articleUrl
+        )
+        folderDao.deleteFolderArticle(folderArticle)
+    }
+
+    /**
+     * Get all folders that contain a specific article
+     *
+     * @param articleUrl The URL of the article
+     * @return List of folders containing the article
+     */
+    override suspend fun getFoldersForArticle(articleUrl: String): List<Folder> {
+        val folderArticles = folderDao.getArticleFolders(articleUrl)
+        return folderArticles.mapNotNull { folderArticle ->
+            folderDao.getFolderById(folderArticle.folderId)?.let { entityToDomain(it) }
+        }
+    }
+
+    /**
+     * Get all articles in a specific folder
+     *
+     * @param folderId The ID of the folder
+     * @return Flow of lists of articles in the folder
+     */
+    override fun getArticlesInFolder(folderId: Long): Flow<List<SavedArticle>> {
+        return savedArticleDao.getSavedArticlesInFolder(folderId).map { list ->
+            list.map { articleEntityToDomain(it) }
+        }
+    }
+
+    /**
+     * Search saved articles in a specific folder by title or content
+     *
+     * @param folderId The ID of the folder
+     * @param query The search query
+     * @return Flow of lists of saved articles matching the query in the folder
+     */
+    override fun searchSavedArticlesInFolder(folderId: Long, query: String): Flow<List<SavedArticle>> {
+        return savedArticleDao.searchSavedArticlesInFolder(folderId, query).map { list ->
+            list.map { articleEntityToDomain(it) }
+        }
+    }
+
+    /**
+     * Convert a folder entity to a domain model
+     *
+     * @param entity The folder entity to convert
+     * @return The domain model representation of the folder
+     */
+    private fun entityToDomain(entity: com.quick.browser.data.local.entity.Folder): Folder {
+        return Folder(
+            id = entity.id,
+            name = entity.name,
+            createdAt = entity.createdAt,
+            updatedAt = entity.updatedAt
+        )
+    }
+
+    /**
+     * Convert a domain model to a folder entity
+     *
+     * @param domain The domain model to convert
+     * @return The entity representation of the folder
+     */
+    private fun domainToEntity(domain: Folder): com.quick.browser.data.local.entity.Folder {
+        return com.quick.browser.data.local.entity.Folder(
+            id = domain.id,
+            name = domain.name,
+            createdAt = domain.createdAt,
+            updatedAt = domain.updatedAt
+        )
+    }
+
+    /**
+     * Convert a saved article entity to a domain model
+     *
+     * @param entity The saved article entity to convert
+     * @return The domain model representation of the saved article
+     */
+    private fun articleEntityToDomain(entity: com.quick.browser.data.local.entity.SavedArticle): SavedArticle {
+        return SavedArticle(
+            url = entity.url,
+            title = entity.title,
+            content = entity.content,
+            savedDate = entity.savedDate,
+            author = entity.byline,
+            siteName = entity.siteName,
+            publishDate = entity.publishDate,
+            excerpt = entity.excerpt
+        )
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/repository/HistoryRepositoryImpl.kt b/app/src/main/java/com/quick/browser/data/repository/HistoryRepositoryImpl.kt
new file mode 100644
index 0000000..34a6270
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/repository/HistoryRepositoryImpl.kt
@@ -0,0 +1,186 @@
+package com.quick.browser.data.repository
+
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.map
+import com.quick.browser.data.local.dao.WebPageDao
+import com.quick.browser.data.local.entity.WebPage
+import com.quick.browser.domain.repository.HistoryRepository
+import javax.inject.Inject
+
+/**
+ * Repository implementation for managing web page history
+ *
+ * This class implements the HistoryRepository interface and provides concrete
+ * implementations for accessing and modifying web page history in the database.
+ *
+ * @param webPageDao The DAO for accessing web pages in the database
+ */
+class HistoryRepositoryImpl @Inject constructor(
+    private val webPageDao: WebPageDao
+) : HistoryRepository {
+    
+    /**
+     * Get all web pages in history
+     *
+     * @return LiveData containing a list of all web pages in history
+     */
+    override fun getAllPages(): LiveData<List<com.quick.browser.domain.model.WebPage>> {
+        return webPageDao.getAllPages().map { list ->
+            list.map { entityToDomain(it) }
+        }
+    }
+    
+    /**
+     * Get a web page by its URL
+     *
+     * @param url The URL of the web page to retrieve
+     * @return The web page or null if not found
+     */
+    override suspend fun getPageByUrl(url: String): com.quick.browser.domain.model.WebPage? {
+        val entity = webPageDao.getPageByUrl(url)
+        return entity?.let { entityToDomain(it) }
+    }
+    
+    /**
+     * Save a web page to history
+     *
+     * @param page The web page to save
+     */
+    override suspend fun savePage(page: com.quick.browser.domain.model.WebPage) {
+        webPageDao.insertPage(domainToEntity(page))
+    }
+    
+    /**
+     * Delete a web page from history
+     *
+     * @param page The web page to delete
+     */
+    override suspend fun deletePage(page: com.quick.browser.domain.model.WebPage) {
+        webPageDao.deletePage(domainToEntity(page))
+    }
+    
+    /**
+     * Delete all web pages from history
+     */
+    override suspend fun deleteAllPages() {
+        webPageDao.deleteAllPages()
+    }
+    
+    /**
+     * Search web pages by query
+     *
+     * @param query The search query
+     * @return LiveData containing a list of matching web pages
+     */
+    override fun searchPages(query: String): LiveData<List<com.quick.browser.domain.model.WebPage>> {
+        return webPageDao.searchPages(query).map { list ->
+            list.map { entityToDomain(it) }
+        }
+    }
+    
+    /**
+     * Get recent web pages
+     *
+     * @param limit The maximum number of pages to return
+     * @return LiveData containing a list of recent web pages
+     */
+    override fun getRecentPages(limit: Int): LiveData<List<com.quick.browser.domain.model.WebPage>> {
+        return webPageDao.getRecentPages(limit).map { list ->
+            list.map { entityToDomain(it) }
+        }
+    }
+    
+    /**
+     * Get most visited web pages
+     *
+     * @param limit The maximum number of pages to return
+     * @return LiveData containing a list of most visited web pages
+     */
+    override fun getMostVisitedPages(limit: Int): LiveData<List<com.quick.browser.domain.model.WebPage>> {
+        return webPageDao.getMostVisitedPages(limit).map { list ->
+            list.map { entityToDomain(it) }
+        }
+    }
+    
+    /**
+     * Increment the visit count for a web page
+     *
+     * @param url The URL of the web page to increment the visit count for
+     */
+    override suspend fun incrementVisitCount(url: String) {
+        webPageDao.incrementVisitCount(url)
+    }
+    
+    /**
+     * Update the offline availability status of a web page
+     *
+     * @param url The URL of the web page
+     * @param isAvailable Whether the page is available offline
+     */
+    override suspend fun updateOfflineStatus(url: String, isAvailable: Boolean) {
+        webPageDao.updateOfflineStatus(url, isAvailable)
+    }
+    
+    /**
+     * Delete pages from today (since midnight)
+     *
+     * @param startOfDay The timestamp representing the start of today
+     */
+    override suspend fun deleteTodayPages(startOfDay: Long) {
+        webPageDao.deleteTodayPages(startOfDay)
+    }
+    
+    /**
+     * Delete pages from the last hour
+     *
+     * @param oneHourAgo The timestamp representing one hour ago
+     */
+    override suspend fun deleteLastHourPages(oneHourAgo: Long) {
+        webPageDao.deleteLastHourPages(oneHourAgo)
+    }
+    
+    /**
+     * Convert a web page entity to a domain model
+     *
+     * @param entity The web page entity to convert
+     * @return The domain model representation of the web page
+     */
+    private fun entityToDomain(entity: WebPage): com.quick.browser.domain.model.WebPage {
+        return com.quick.browser.domain.model.WebPage(
+            url = entity.url,
+            title = entity.title,
+            timestamp = entity.timestamp,
+            content = entity.content,
+            isAvailableOffline = entity.isAvailableOffline,
+            visitCount = entity.visitCount,
+            faviconUrl = entity.faviconUrl,
+            previewImageUrl = entity.previewImageUrl,
+            favicon = entity.favicon,
+            summary = entity.summary,
+            parentBubbleId = entity.parentBubbleId
+        )
+    }
+    
+    /**
+     * Convert a domain model to a web page entity
+     *
+     * @param domain The domain model to convert
+     * @return The entity representation of the web page
+     */
+    private fun domainToEntity(domain: com.quick.browser.domain.model.WebPage): WebPage {
+        val entity = WebPage(
+            url = domain.url,
+            title = domain.title,
+            timestamp = domain.timestamp,
+            content = domain.content ?: "",
+            isAvailableOffline = domain.isAvailableOffline,
+            visitCount = domain.visitCount,
+            faviconUrl = domain.faviconUrl,
+            previewImageUrl = domain.previewImageUrl
+        )
+        // Copy transient fields
+        entity.summary = domain.summary
+        entity.parentBubbleId = domain.parentBubbleId
+        return entity
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/repository/SettingsRepositoryImpl.kt b/app/src/main/java/com/quick/browser/data/repository/SettingsRepositoryImpl.kt
new file mode 100644
index 0000000..3a5a071
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/repository/SettingsRepositoryImpl.kt
@@ -0,0 +1,97 @@
+package com.quick.browser.data.repository
+
+import com.quick.browser.data.local.dao.SettingsDao
+import com.quick.browser.data.local.entity.Settings
+import com.quick.browser.domain.repository.SettingsRepository
+import javax.inject.Inject
+
+/**
+ * Repository implementation for managing app settings
+ *
+ * This class implements the SettingsRepository interface and provides concrete
+ * implementations for accessing and modifying application settings in the database.
+ *
+ * @param settingsDao The DAO for accessing settings in the database
+ */
+class SettingsRepositoryImpl @Inject constructor(
+    private val settingsDao: SettingsDao
+) : SettingsRepository {
+    
+    /**
+     * Get the current app settings
+     *
+     * @return The current settings or null if no settings exist
+     */
+    override suspend fun getSettings(): com.quick.browser.domain.model.Settings? {
+        val entity = settingsDao.getSettings()
+        return entity?.let { entityToDomain(it) }
+    }
+    
+    /**
+     * Save new app settings
+     *
+     * @param settings The settings to save
+     */
+    override suspend fun saveSettings(settings: com.quick.browser.domain.model.Settings) {
+        settingsDao.insertSettings(domainToEntity(settings))
+    }
+    
+    /**
+     * Update existing app settings
+     *
+     * @param settings The settings to update
+     */
+    override suspend fun updateSettings(settings: com.quick.browser.domain.model.Settings) {
+        settingsDao.updateSettings(domainToEntity(settings))
+    }
+    
+    /**
+     * Convert a settings entity to a domain model
+     *
+     * @param entity The settings entity to convert
+     * @return The domain model representation of the settings
+     */
+    private fun entityToDomain(entity: Settings): com.quick.browser.domain.model.Settings {
+        return com.quick.browser.domain.model.Settings(
+            id = entity.id,
+            size = entity.size,
+            animationSpeed = entity.animationSpeed,
+            savePositions = entity.savePositions,
+            blockAds = entity.blockAds,
+            defaultColor = entity.defaultColor,
+            javascriptEnabled = entity.javascriptEnabled,
+            darkTheme = entity.darkTheme,
+            bubbleSize = entity.bubbleSize,
+            expandedBubbleSize = entity.expandedBubbleSize,
+            animSpeed = entity.animSpeed,
+            saveHistory = entity.saveHistory,
+            encryptData = entity.encryptData,
+            bubblePositionRight = entity.bubblePositionRight
+        )
+    }
+    
+    /**
+     * Convert a domain model to a settings entity
+     *
+     * @param domain The domain model to convert
+     * @return The entity representation of the settings
+     */
+    private fun domainToEntity(domain: com.quick.browser.domain.model.Settings): Settings {
+        return Settings(
+            id = domain.id,
+            size = domain.size,
+            animationSpeed = domain.animationSpeed,
+            savePositions = domain.savePositions,
+            blockAds = domain.blockAds,
+            defaultColor = domain.defaultColor,
+            javascriptEnabled = domain.javascriptEnabled,
+            darkTheme = domain.darkTheme,
+            bubbleSize = domain.bubbleSize,
+            expandedBubbleSize = domain.expandedBubbleSize,
+            animSpeed = domain.animSpeed,
+            saveHistory = domain.saveHistory,
+            encryptData = domain.encryptData,
+            bubblePositionRight = domain.bubblePositionRight
+        )
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/data/security/SecurityPolicyManager.kt b/app/src/main/java/com/quick/browser/data/security/SecurityPolicyManager.kt
new file mode 100644
index 0000000..7f710cc
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/data/security/SecurityPolicyManager.kt
@@ -0,0 +1,193 @@
+package com.quick.browser.data.security
+
+import android.content.Context
+import android.webkit.CookieManager
+import android.webkit.WebSettings
+import android.webkit.WebView
+import com.quick.browser.utils.Logger
+import java.security.MessageDigest
+import java.security.cert.Certificate
+
+/**
+ * Security policy manager for the browser application
+ *
+ * This class handles security-related configurations and policies including:
+ * - WebView security settings
+ * - Certificate pinning
+ * - Input sanitization
+ * - Content security policies
+ */
+class SecurityPolicyManager(private val context: Context) {
+    
+    companion object {
+        private const val TAG = "SecurityPolicyManager"
+        private const val ENABLE_STRICT_MODE = true
+    }
+    
+    /**
+     * Apply strict security settings to a WebView
+     *
+     * @param webView The WebView to configure
+     */
+    fun applySecuritySettings(webView: WebView) {
+        try {
+            val settings = webView.settings
+            
+            // Disable file access
+            settings.allowFileAccess = false
+            settings.allowContentAccess = false
+            
+            // Disable universal access from file URLs
+            settings.allowFileAccessFromFileURLs = false
+            settings.allowUniversalAccessFromFileURLs = false
+            
+            // Disable mixed content
+            settings.mixedContentMode = WebSettings.MIXED_CONTENT_NEVER_ALLOW
+            
+            // Disable saving password
+            settings.savePassword = false
+            
+            // Enable DOM storage but with restrictions
+            settings.domStorageEnabled = true
+            
+            // Disable database storage
+            settings.databaseEnabled = false
+            
+            // Set user agent
+            setUserAgent(settings)
+            
+            // Apply additional security settings
+            applyAdvancedSecuritySettings(webView, settings)
+            
+            Logger.d(TAG, "Applied security settings to WebView")
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error applying security settings", e)
+        }
+    }
+    
+    /**
+     * Apply advanced security settings
+     *
+     * @param webView The WebView to configure
+     * @param settings The WebView settings
+     */
+    private fun applyAdvancedSecuritySettings(webView: WebView, settings: WebSettings) {
+        try {
+            // Disable media playback requiring user gesture
+            settings.mediaPlaybackRequiresUserGesture = true
+            
+            // Disable third-party cookies
+            CookieManager.getInstance().setAcceptThirdPartyCookies(webView, false)
+        } catch (e: Exception) {
+            Logger.w(TAG, "Could not apply advanced security settings", e)
+        }
+    }
+    
+    /**
+     * Set a secure user agent string
+     *
+     * @param settings The WebView settings to modify
+     */
+    private fun setUserAgent(settings: WebSettings) {
+        try {
+            // Remove identifying information from user agent
+            val originalUserAgent = settings.userAgentString
+            // Remove any build-specific information that could be used for fingerprinting
+            val secureUserAgent = originalUserAgent.replace(Regex("Build/[^\\s]+"), "Build/XYZ")
+            settings.userAgentString = secureUserAgent
+        } catch (e: Exception) {
+            Logger.w(TAG, "Could not set secure user agent", e)
+        }
+    }
+    
+    /**
+     * Sanitize user input to prevent injection attacks
+     *
+     * @param input The input string to sanitize
+     * @return The sanitized string
+     */
+    fun sanitizeInput(input: String): String {
+        if (input.isEmpty()) return input
+        
+        return input
+            // Remove potentially dangerous characters
+            .replace("<", "")
+            .replace(">", "")
+            .replace("\"", "")
+            .replace("'", "")
+            .replace("&", "")
+            // Remove JavaScript protocol handlers
+            .replace(Regex("javascript:", RegexOption.IGNORE_CASE), "")
+            // Remove data URLs that could contain scripts
+            .replace(Regex("data:text/html", RegexOption.IGNORE_CASE), "")
+            // Limit length to prevent DoS
+            .take(2000)
+    }
+    
+    /**
+     * Validate and format URL for security
+     *
+     * @param url The URL to validate
+     * @return The validated and formatted URL, or null if invalid
+     */
+    fun validateAndFormatUrl(url: String): String? {
+        if (url.isEmpty()) return null
+        
+        // Sanitize the input first
+        val sanitizedUrl = sanitizeInput(url)
+        
+        // Check for allowed protocols
+        val allowedProtocols = listOf("http://", "https://", "file://", "data:")
+        val hasAllowedProtocol = allowedProtocols.any { sanitizedUrl.startsWith(it, ignoreCase = true) }
+        
+        // If no protocol, default to HTTPS
+        return when {
+            hasAllowedProtocol -> sanitizedUrl
+            sanitizedUrl.contains("://") -> null // Unknown protocol
+            else -> "https://$sanitizedUrl" // Default to HTTPS
+        }
+    }
+    
+    /**
+     * Check if a URL is safe to load based on security policies
+     *
+     * @param url The URL to check
+     * @return True if the URL is safe to load
+     */
+    fun isUrlSafeToLoad(url: String): Boolean {
+        if (url.isEmpty()) return false
+        
+        // Block localhost and private IP addresses in strict mode
+        if (ENABLE_STRICT_MODE) {
+            val blockedPatterns = listOf(
+                "localhost",
+                "127.0.0.1",
+                "10.",
+                "172.16.",
+                "192.168."
+            )
+            
+            return !blockedPatterns.any { url.contains(it) }
+        }
+        
+        return true
+    }
+    
+    /**
+     * Generate a certificate fingerprint for pinning
+     *
+     * @param certificate The certificate to fingerprint
+     * @return The SHA-256 fingerprint of the certificate
+     */
+    fun generateCertificateFingerprint(certificate: Certificate): String {
+        return try {
+            val md = MessageDigest.getInstance("SHA-256")
+            val publicKey = certificate.publicKey.encoded
+            val digest = md.digest(publicKey)
+            digest.joinToString("") { "%02x".format(it) }
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error generating certificate fingerprint", e)
+            ""
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/di/BubbleComponentFactory.kt b/app/src/main/java/com/quick/browser/di/BubbleComponentFactory.kt
new file mode 100644
index 0000000..69ae32c
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/di/BubbleComponentFactory.kt
@@ -0,0 +1,50 @@
+package com.quick.browser.di
+
+import android.content.Context
+import com.quick.browser.presentation.ui.browser.BubbleView
+import com.quick.browser.presentation.ui.browser.BubbleWebViewManager
+import com.quick.browser.presentation.ui.browser.WebViewClientEx
+import com.quick.browser.service.AdBlockingService
+import com.quick.browser.service.SettingsService
+import com.quick.browser.service.SummarizationService
+import com.quick.browser.utils.security.SecurityPolicyManager
+import dagger.hilt.android.qualifiers.ApplicationContext
+import javax.inject.Inject
+import javax.inject.Singleton
+
+/**
+ * Factory for creating bubble-related UI components with proper dependency injection
+ */
+@Singleton
+class BubbleComponentFactory @Inject constructor(
+    @ApplicationContext private val context: Context,
+    private val settingsService: SettingsService,
+    private val adBlockingService: AdBlockingService,
+    private val summarizationService: SummarizationService
+) {
+
+    fun createBubbleWebViewManager(
+        bubbleId: String,
+        bubbleView: BubbleView
+    ): BubbleWebViewManager {
+        return BubbleWebViewManager(
+            context = context,
+            bubbleId = bubbleId,
+            bubbleView = bubbleView,
+            settingsService = settingsService,
+            adBlockingService = adBlockingService,
+            securityPolicyManager = SecurityPolicyManager(context)
+        )
+    }
+
+    fun createWebViewClientEx(
+        onPageUrlChanged: (String) -> Unit
+    ): WebViewClientEx {
+        return WebViewClientEx(
+            context = context,
+            onPageUrlChanged = onPageUrlChanged,
+            settingsService = settingsService,
+            adBlockingService = adBlockingService
+        )
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/di/DatabaseModule.kt b/app/src/main/java/com/quick/browser/di/DatabaseModule.kt
new file mode 100644
index 0000000..75d1120
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/di/DatabaseModule.kt
@@ -0,0 +1,88 @@
+package com.quick.browser.di
+
+import android.content.Context
+import androidx.room.Room
+import com.quick.browser.data.FolderDao
+import com.quick.browser.data.SavedArticleDao
+import com.quick.browser.data.local.dao.SettingsDao
+import com.quick.browser.data.local.dao.WebPageDao
+import com.quick.browser.data.local.database.AppDatabase
+import dagger.Module
+import dagger.Provides
+import dagger.hilt.InstallIn
+import dagger.hilt.android.qualifiers.ApplicationContext
+import dagger.hilt.components.SingletonComponent
+import javax.inject.Singleton
+
+/**
+ * Dagger Hilt module for providing database-related dependencies
+ *
+ * This module provides the Room database instance and its associated DAOs
+ * for accessing and modifying data in the local database.
+ */
+@Module
+@InstallIn(SingletonComponent::class)
+object DatabaseModule {
+
+    /**
+     * Provide the singleton AppDatabase instance
+     *
+     * @param context The application context
+     * @return The singleton AppDatabase instance
+     */
+    @Provides
+    @Singleton
+    fun provideAppDatabase(@ApplicationContext context: Context): AppDatabase {
+        return Room.databaseBuilder(
+            context.applicationContext,
+            AppDatabase::class.java,
+            "quick_browser.db"
+        )
+            .fallbackToDestructiveMigration(false)
+            .build()
+    }
+
+    /**
+     * Provide the SettingsDao instance
+     *
+     * @param database The AppDatabase instance
+     * @return The SettingsDao instance
+     */
+    @Provides
+    fun provideSettingsDao(database: AppDatabase): SettingsDao {
+        return database.settingsDao()
+    }
+
+    /**
+     * Provide the WebPageDao instance
+     *
+     * @param database The AppDatabase instance
+     * @return The WebPageDao instance
+     */
+    @Provides
+    fun provideWebPageDao(database: AppDatabase): WebPageDao {
+        return database.webPageDao()
+    }
+
+    /**
+     * Provide the SavedArticleDao instance
+     *
+     * @param database The AppDatabase instance
+     * @return The SavedArticleDao instance
+     */
+    @Provides
+    fun provideSavedArticleDao(database: AppDatabase): SavedArticleDao {
+        return database.savedArticleDao()
+    }
+
+    /**
+     * Provide the FolderDao instance
+     *
+     * @param database The AppDatabase instance
+     * @return The FolderDao instance
+     */
+    @Provides
+    fun provideFolderDao(database: AppDatabase): FolderDao {
+        return database.folderDao()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/di/ReadabilityModule.kt b/app/src/main/java/com/quick/browser/di/ReadabilityModule.kt
new file mode 100644
index 0000000..3894ed2
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/di/ReadabilityModule.kt
@@ -0,0 +1,33 @@
+package com.quick.browser.di
+
+import android.content.Context
+import com.quick.browser.service.ReadabilityService
+import dagger.Module
+import dagger.Provides
+import dagger.hilt.InstallIn
+import dagger.hilt.android.qualifiers.ApplicationContext
+import dagger.hilt.components.SingletonComponent
+import javax.inject.Singleton
+
+/**
+ * Dagger Hilt module for providing readability service dependencies
+ *
+ * This module provides the ReadabilityService instance for extracting
+ * readable content from web pages.
+ */
+@Module
+@InstallIn(SingletonComponent::class)
+object ReadabilityModule {
+
+    /**
+     * Provide the singleton ReadabilityService instance
+     *
+     * @param context The application context
+     * @return The singleton ReadabilityService instance
+     */
+    @Provides
+    @Singleton
+    fun provideReadabilityExtractor(@ApplicationContext context: Context): ReadabilityService {
+        return ReadabilityService(context)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/di/RepositoryModule.kt b/app/src/main/java/com/quick/browser/di/RepositoryModule.kt
new file mode 100644
index 0000000..c690a51
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/di/RepositoryModule.kt
@@ -0,0 +1,82 @@
+package com.quick.browser.di
+
+import com.quick.browser.data.repository.ArticleRepositoryImpl
+import com.quick.browser.data.repository.BubbleRepositoryImpl
+import com.quick.browser.data.repository.FolderRepositoryImpl
+import com.quick.browser.data.repository.HistoryRepositoryImpl
+import com.quick.browser.data.repository.SettingsRepositoryImpl
+import com.quick.browser.domain.repository.ArticleRepository
+import com.quick.browser.domain.repository.BubbleRepository
+import com.quick.browser.domain.repository.FolderRepository
+import com.quick.browser.domain.repository.HistoryRepository
+import com.quick.browser.domain.repository.SettingsRepository
+import dagger.Binds
+import dagger.Module
+import dagger.hilt.InstallIn
+import dagger.hilt.components.SingletonComponent
+
+/**
+ * Dagger Hilt module for providing repository implementations
+ *
+ * This module binds concrete repository implementations to their respective interfaces,
+ * allowing for dependency injection throughout the application.
+ */
+@Module
+@InstallIn(SingletonComponent::class)
+abstract class RepositoryModule {
+
+    /**
+     * Bind SettingsRepositoryImpl to SettingsRepository interface
+     *
+     * @param settingsRepositoryImpl The concrete implementation
+     * @return The SettingsRepository interface
+     */
+    @Binds
+    abstract fun bindSettingsRepository(
+        settingsRepositoryImpl: SettingsRepositoryImpl
+    ): SettingsRepository
+
+    /**
+     * Bind HistoryRepositoryImpl to HistoryRepository interface
+     *
+     * @param historyRepositoryImpl The concrete implementation
+     * @return The HistoryRepository interface
+     */
+    @Binds
+    abstract fun bindHistoryRepository(
+        historyRepositoryImpl: HistoryRepositoryImpl
+    ): HistoryRepository
+
+    /**
+     * Bind BubbleRepositoryImpl to BubbleRepository interface
+     *
+     * @param bubbleRepositoryImpl The concrete implementation
+     * @return The BubbleRepository interface
+     */
+    @Binds
+    abstract fun bindBubbleRepository(
+        bubbleRepositoryImpl: BubbleRepositoryImpl
+    ): BubbleRepository
+
+    /**
+     * Bind ArticleRepositoryImpl to ArticleRepository interface
+     *
+     * @param articleRepositoryImpl The concrete implementation
+     * @return The ArticleRepository interface
+     */
+    @Binds
+    abstract fun bindArticleRepository(
+        articleRepositoryImpl: ArticleRepositoryImpl
+    ): ArticleRepository
+
+    /**
+     * Bind FolderRepositoryImpl to FolderRepository interface
+     *
+     * @param folderRepositoryImpl The concrete implementation
+     * @return The FolderRepository interface
+     */
+    @Binds
+    abstract fun bindFolderRepository(
+        folderRepositoryImpl: FolderRepositoryImpl
+    ): FolderRepository
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/di/ServiceModule.kt b/app/src/main/java/com/quick/browser/di/ServiceModule.kt
new file mode 100644
index 0000000..2354124
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/di/ServiceModule.kt
@@ -0,0 +1,122 @@
+package com.quick.browser.di
+
+import android.content.Context
+import com.quick.browser.domain.repository.ArticleRepository
+import com.quick.browser.domain.service.ArticleSavingService
+import com.quick.browser.domain.service.EncryptedPreferencesService
+import com.quick.browser.domain.service.ModelDownloadService
+import com.quick.browser.domain.service.SecurityPolicyService
+import com.quick.browser.service.AdBlockingService
+import com.quick.browser.service.SettingsService
+import com.quick.browser.service.SummarizationService
+import dagger.Module
+import dagger.Provides
+import dagger.hilt.InstallIn
+import dagger.hilt.android.qualifiers.ApplicationContext
+import dagger.hilt.components.SingletonComponent
+import javax.inject.Singleton
+
+/**
+ * Dagger Hilt module for providing service dependencies
+ *
+ * This module provides various service instances required by the application,
+ * including settings, ad-blocking, summarization, and other utility services.
+ */
+@Module
+@InstallIn(SingletonComponent::class)
+object ServiceModule {
+
+    /**
+     * Provide the ArticleSavingService instance
+     *
+     * @param articleRepository The article repository dependency
+     * @return The ArticleSavingService instance
+     */
+    @Provides
+    @Singleton
+    fun provideArticleSavingService(
+        articleRepository: ArticleRepository
+    ): ArticleSavingService {
+        return ArticleSavingService(articleRepository)
+    }
+    
+    /**
+     * Provide the SettingsService instance
+     *
+     * @param context The application context
+     * @param encryptedPreferencesService The encrypted preferences service dependency
+     * @return The SettingsService instance
+     */
+    @Provides
+    @Singleton
+    fun provideSettingsService(
+        @ApplicationContext context: Context,
+        encryptedPreferencesService: EncryptedPreferencesService
+    ): SettingsService {
+        return SettingsService(context, encryptedPreferencesService)
+    }
+
+    /**
+     * Provide the AdBlockingService instance
+     *
+     * @param context The application context
+     * @param encryptedPreferencesService The encrypted preferences service dependency
+     * @return The AdBlockingService instance
+     */
+    @Provides
+    @Singleton
+    fun provideAdBlockingService(
+        @ApplicationContext context: Context,
+        encryptedPreferencesService: EncryptedPreferencesService
+    ): AdBlockingService {
+        return AdBlockingService(context, encryptedPreferencesService)
+    }
+
+    /**
+     * Provide the SummarizationService instance
+     *
+     * @param context The application context
+     * @return The SummarizationService instance
+     */
+    @Provides
+    @Singleton
+    fun provideSummarizationService(@ApplicationContext context: Context): SummarizationService {
+        return SummarizationService(context)
+    }
+    
+    /**
+     * Provide the EncryptedPreferencesService instance
+     *
+     * @param context The application context
+     * @return The EncryptedPreferencesService instance
+     */
+    @Provides
+    @Singleton
+    fun provideEncryptedPreferencesService(@ApplicationContext context: Context): EncryptedPreferencesService {
+        return EncryptedPreferencesService(context, "quick_browser_prefs")
+    }
+    
+    /**
+     * Provide the ModelDownloadService instance
+     *
+     * @param context The application context
+     * @return The ModelDownloadService instance
+     */
+    @Provides
+    @Singleton
+    fun provideModelDownloadService(@ApplicationContext context: Context): ModelDownloadService {
+        return ModelDownloadService(context)
+    }
+    
+    /**
+     * Provide the SecurityPolicyService instance
+     *
+     * @param context The application context
+     * @return The SecurityPolicyService instance
+     */
+    @Provides
+    @Singleton
+    fun provideSecurityPolicyService(@ApplicationContext context: Context): SecurityPolicyService {
+        return SecurityPolicyService(context)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/di/UseCaseModule.kt b/app/src/main/java/com/quick/browser/di/UseCaseModule.kt
new file mode 100644
index 0000000..f7f9bbf
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/di/UseCaseModule.kt
@@ -0,0 +1,301 @@
+package com.quick.browser.di
+
+import com.quick.browser.domain.repository.ArticleRepository
+import com.quick.browser.domain.repository.BubbleRepository
+import com.quick.browser.domain.repository.FolderRepository
+import com.quick.browser.domain.repository.HistoryRepository
+import com.quick.browser.domain.repository.SettingsRepository
+import com.quick.browser.domain.usecase.*
+import dagger.Module
+import dagger.Provides
+import dagger.hilt.InstallIn
+import dagger.hilt.components.SingletonComponent
+
+/**
+ * Dagger Hilt module for providing use case instances
+ *
+ * This module provides all use case instances required by the application,
+ * organizing them by domain area (Article, Settings, History, Bubble).
+ */
+@Module
+@InstallIn(SingletonComponent::class)
+object UseCaseModule {
+
+    // Article Use Cases
+    /**
+     * Provide GetSavedArticlesUseCase instance
+     *
+     * @param articleRepository The article repository dependency
+     * @return The GetSavedArticlesUseCase instance
+     */
+    @Provides
+    fun provideGetSavedArticlesUseCase(
+        articleRepository: ArticleRepository
+    ): GetSavedArticlesUseCase {
+        return GetSavedArticlesUseCase(articleRepository)
+    }
+
+    /**
+     * Provide SaveArticleUseCase instance
+     *
+     * @param articleRepository The article repository dependency
+     * @return The SaveArticleUseCase instance
+     */
+    @Provides
+    fun provideSaveArticleUseCase(
+        articleRepository: ArticleRepository
+    ): SaveArticleUseCase {
+        return SaveArticleUseCase(articleRepository)
+    }
+
+    /**
+     * Provide DeleteArticleUseCase instance
+     *
+     * @param articleRepository The article repository dependency
+     * @return The DeleteArticleUseCase instance
+     */
+    @Provides
+    fun provideDeleteArticleUseCase(
+        articleRepository: ArticleRepository
+    ): DeleteArticleUseCase {
+        return DeleteArticleUseCase(articleRepository)
+    }
+
+    // Folder Use Cases
+    /**
+     * Provide GetAllFoldersUseCase instance
+     *
+     * @param folderRepository The folder repository dependency
+     * @return The GetAllFoldersUseCase instance
+     */
+    @Provides
+    fun provideGetAllFoldersUseCase(
+        folderRepository: FolderRepository
+    ): GetAllFoldersUseCase {
+        return GetAllFoldersUseCase(folderRepository)
+    }
+
+    /**
+     * Provide CreateFolderUseCase instance
+     *
+     * @param folderRepository The folder repository dependency
+     * @return The CreateFolderUseCase instance
+     */
+    @Provides
+    fun provideCreateFolderUseCase(
+        folderRepository: FolderRepository
+    ): CreateFolderUseCase {
+        return CreateFolderUseCase(folderRepository)
+    }
+
+    /**
+     * Provide GetArticlesInFolderUseCase instance
+     *
+     * @param folderRepository The folder repository dependency
+     * @return The GetArticlesInFolderUseCase instance
+     */
+    @Provides
+    fun provideGetArticlesInFolderUseCase(
+        folderRepository: FolderRepository
+    ): GetArticlesInFolderUseCase {
+        return GetArticlesInFolderUseCase(folderRepository)
+    }
+
+    /**
+     * Provide AddArticleToFolderUseCase instance
+     *
+     * @param folderRepository The folder repository dependency
+     * @return The AddArticleToFolderUseCase instance
+     */
+    @Provides
+    fun provideAddArticleToFolderUseCase(
+        folderRepository: FolderRepository
+    ): AddArticleToFolderUseCase {
+        return AddArticleToFolderUseCase(folderRepository)
+    }
+
+    /**
+     * Provide RemoveArticleFromFolderUseCase instance
+     *
+     * @param folderRepository The folder repository dependency
+     * @return The RemoveArticleFromFolderUseCase instance
+     */
+    @Provides
+    fun provideRemoveArticleFromFolderUseCase(
+        folderRepository: FolderRepository
+    ): RemoveArticleFromFolderUseCase {
+        return RemoveArticleFromFolderUseCase(folderRepository)
+    }
+
+    // Settings Use Cases
+    /**
+     * Provide GetSettingsUseCase instance
+     *
+     * @param settingsRepository The settings repository dependency
+     * @return The GetSettingsUseCase instance
+     */
+    @Provides
+    fun provideGetSettingsUseCase(
+        settingsRepository: SettingsRepository
+    ): GetSettingsUseCase {
+        return GetSettingsUseCase(settingsRepository)
+    }
+
+    /**
+     * Provide UpdateSettingsUseCase instance
+     *
+     * @param settingsRepository The settings repository dependency
+     * @return The UpdateSettingsUseCase instance
+     */
+    @Provides
+    fun provideUpdateSettingsUseCase(
+        settingsRepository: SettingsRepository
+    ): UpdateSettingsUseCase {
+        return UpdateSettingsUseCase(settingsRepository)
+    }
+
+    // History Use Cases
+    /**
+     * Provide GetHistoryUseCase instance
+     *
+     * @param historyRepository The history repository dependency
+     * @return The GetHistoryUseCase instance
+     */
+    @Provides
+    fun provideGetHistoryUseCase(
+        historyRepository: HistoryRepository
+    ): GetHistoryUseCase {
+        return GetHistoryUseCase(historyRepository)
+    }
+
+    /**
+     * Provide SaveWebPageUseCase instance
+     *
+     * @param historyRepository The history repository dependency
+     * @return The SaveWebPageUseCase instance
+     */
+    @Provides
+    fun provideSaveWebPageUseCase(
+        historyRepository: HistoryRepository
+    ): SaveWebPageUseCase {
+        return SaveWebPageUseCase(historyRepository)
+    }
+
+    /**
+     * Provide DeleteWebPageUseCase instance
+     *
+     * @param historyRepository The history repository dependency
+     * @return The DeleteWebPageUseCase instance
+     */
+    @Provides
+    fun provideDeleteWebPageUseCase(
+        historyRepository: HistoryRepository
+    ): DeleteWebPageUseCase {
+        return DeleteWebPageUseCase(historyRepository)
+    }
+
+    /**
+     * Provide UpdateOfflineStatusUseCase instance
+     *
+     * @param historyRepository The history repository dependency
+     * @return The UpdateOfflineStatusUseCase instance
+     */
+    @Provides
+    fun provideUpdateOfflineStatusUseCase(
+        historyRepository: HistoryRepository
+    ): UpdateOfflineStatusUseCase {
+        return UpdateOfflineStatusUseCase(historyRepository)
+    }
+
+    /**
+     * Provide IncrementVisitCountUseCase instance
+     *
+     * @param historyRepository The history repository dependency
+     * @return The IncrementVisitCountUseCase instance
+     */
+    @Provides
+    fun provideIncrementVisitCountUseCase(
+        historyRepository: HistoryRepository
+    ): IncrementVisitCountUseCase {
+        return IncrementVisitCountUseCase(historyRepository)
+    }
+
+    /**
+     * Provide DeleteAllPagesUseCase instance
+     *
+     * @param historyRepository The history repository dependency
+     * @return The DeleteAllPagesUseCase instance
+     */
+    @Provides
+    fun provideDeleteAllPagesUseCase(
+        historyRepository: HistoryRepository
+    ): DeleteAllPagesUseCase {
+        return DeleteAllPagesUseCase(historyRepository)
+    }
+
+    /**
+     * Provide SearchHistoryUseCase instance
+     *
+     * @param historyRepository The history repository dependency
+     * @return The SearchHistoryUseCase instance
+     */
+    @Provides
+    fun provideSearchHistoryUseCase(
+        historyRepository: HistoryRepository
+    ): SearchHistoryUseCase {
+        return SearchHistoryUseCase(historyRepository)
+    }
+
+    /**
+     * Provide GetRecentPagesUseCase instance
+     *
+     * @param historyRepository The history repository dependency
+     * @return The GetRecentPagesUseCase instance
+     */
+    @Provides
+    fun provideGetRecentPagesUseCase(
+        historyRepository: HistoryRepository
+    ): GetRecentPagesUseCase {
+        return GetRecentPagesUseCase(historyRepository)
+    }
+
+    /**
+     * Provide GetMostVisitedPagesUseCase instance
+     *
+     * @param historyRepository The history repository dependency
+     * @return The GetMostVisitedPagesUseCase instance
+     */
+    @Provides
+    fun provideGetMostVisitedPagesUseCase(
+        historyRepository: HistoryRepository
+    ): GetMostVisitedPagesUseCase {
+        return GetMostVisitedPagesUseCase(historyRepository)
+    }
+
+    // Bubble Use Cases
+    /**
+     * Provide CreateBubbleUseCase instance
+     *
+     * @param bubbleRepository The bubble repository dependency
+     * @return The CreateBubbleUseCase instance
+     */
+    @Provides
+    fun provideCreateBubbleUseCase(
+        bubbleRepository: BubbleRepository
+    ): CreateBubbleUseCase {
+        return CreateBubbleUseCase(bubbleRepository)
+    }
+
+    /**
+     * Provide CloseBubbleUseCase instance
+     *
+     * @param bubbleRepository The bubble repository dependency
+     * @return The CloseBubbleUseCase instance
+     */
+    @Provides
+    fun provideCloseBubbleUseCase(
+        bubbleRepository: BubbleRepository
+    ): CloseBubbleUseCase {
+        return CloseBubbleUseCase(bubbleRepository)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/error/DomainError.kt b/app/src/main/java/com/quick/browser/domain/error/DomainError.kt
new file mode 100644
index 0000000..6039e45
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/error/DomainError.kt
@@ -0,0 +1,37 @@
+package com.quick.browser.domain.error
+
+/**
+ * Base class for all domain errors
+ */
+sealed class DomainError {
+    /**
+     * Represents a network error
+     *
+     * @param message The error message
+     * @param cause The cause of the error, if available
+     */
+    data class NetworkError(val message: String, val cause: Throwable? = null) : DomainError()
+
+    /**
+     * Represents a database error
+     *
+     * @param message The error message
+     * @param cause The cause of the error, if available
+     */
+    data class DatabaseError(val message: String, val cause: Throwable? = null) : DomainError()
+
+    /**
+     * Represents a validation error
+     *
+     * @param message The error message
+     */
+    data class ValidationError(val message: String) : DomainError()
+
+    /**
+     * Represents a general error
+     *
+     * @param message The error message
+     * @param cause The cause of the error, if available
+     */
+    data class GeneralError(val message: String, val cause: Throwable? = null) : DomainError()
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/model/Bubble.kt b/app/src/main/java/com/quick/browser/domain/model/Bubble.kt
new file mode 100644
index 0000000..33af383
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/model/Bubble.kt
@@ -0,0 +1,32 @@
+package com.quick.browser.domain.model
+
+import android.graphics.Bitmap
+
+/**
+ * Domain model for a browser bubble
+ *
+ * @property id The unique identifier for the bubble
+ * @property url The URL currently loaded in the bubble
+ * @property title The title of the page currently loaded in the bubble
+ * @property x The x-coordinate position of the bubble on screen
+ * @property y The y-coordinate position of the bubble on screen
+ * @property width The width of the bubble
+ * @property height The height of the bubble
+ * @property isExpanded Whether the bubble is currently expanded
+ * @property isPinned Whether the bubble is pinned (cannot be closed)
+ * @property createdAt The timestamp when the bubble was created
+ * @property favicon The favicon for the current page, if available
+ */
+data class Bubble(
+    val id: String,
+    val url: String,
+    val title: String = "",
+    val x: Int = 0,
+    val y: Int = 0,
+    val width: Int = 0,
+    val height: Int = 0,
+    val isExpanded: Boolean = false,
+    val isPinned: Boolean = false,
+    val createdAt: Long = System.currentTimeMillis(),
+    val favicon: Bitmap? = null
+)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/model/Folder.kt b/app/src/main/java/com/quick/browser/domain/model/Folder.kt
new file mode 100644
index 0000000..dfed4ba
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/model/Folder.kt
@@ -0,0 +1,16 @@
+package com.quick.browser.domain.model
+
+/**
+ * Domain model for a folder that contains saved articles
+ *
+ * @property id The unique identifier for the folder
+ * @property name The name of the folder
+ * @property createdAt The timestamp when the folder was created
+ * @property updatedAt The timestamp when the folder was last updated
+ */
+data class Folder(
+    val id: Long = 0,
+    val name: String,
+    val createdAt: Long = System.currentTimeMillis(),
+    val updatedAt: Long = System.currentTimeMillis()
+)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/model/FolderArticle.kt b/app/src/main/java/com/quick/browser/domain/model/FolderArticle.kt
new file mode 100644
index 0000000..fad764a
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/model/FolderArticle.kt
@@ -0,0 +1,12 @@
+package com.quick.browser.domain.model
+
+/**
+ * Domain model for the relationship between folders and saved articles
+ *
+ * @property folderId The ID of the folder
+ * @property articleUrl The URL of the saved article
+ */
+data class FolderArticle(
+    val folderId: Long,
+    val articleUrl: String
+)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/model/HistoryItem.kt b/app/src/main/java/com/quick/browser/domain/model/HistoryItem.kt
new file mode 100644
index 0000000..6682ca6
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/model/HistoryItem.kt
@@ -0,0 +1,23 @@
+package com.quick.browser.domain.model
+
+/**
+ * Domain model for a history item
+ *
+ * This sealed class represents different types of items that can appear in the history,
+ * such as headers for date grouping and web page items.
+ */
+sealed class HistoryItem {
+    /**
+     * Represents a header item in the history, typically used for date grouping
+     *
+     * @property title The title of the header (e.g., "Today", "Yesterday", "Last Week")
+     */
+    data class Header(val title: String) : HistoryItem()
+
+    /**
+     * Represents a web page item in the history
+     *
+     * @property webPage The web page associated with this history item
+     */
+    data class WebPageItem(val webPage: WebPage) : HistoryItem()
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/model/SavedArticle.kt b/app/src/main/java/com/quick/browser/domain/model/SavedArticle.kt
new file mode 100644
index 0000000..6fa7035
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/model/SavedArticle.kt
@@ -0,0 +1,24 @@
+package com.quick.browser.domain.model
+
+/**
+ * Domain model for saved articles
+ *
+ * @property url The URL of the saved article
+ * @property title The title of the saved article
+ * @property content The content of the saved article
+ * @property savedDate The timestamp when the article was saved
+ * @property author The author of the article, if available
+ * @property siteName The name of the site where the article was published, if available
+ * @property publishDate The date when the article was published, if available
+ * @property excerpt A short excerpt or summary of the article, if available
+ */
+data class SavedArticle(
+    val url: String,
+    val title: String,
+    val content: String,
+    val savedDate: Long,
+    val author: String? = null,
+    val siteName: String? = null,
+    val publishDate: String? = null,
+    val excerpt: String? = null
+)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/model/SavedArticleItem.kt b/app/src/main/java/com/quick/browser/domain/model/SavedArticleItem.kt
new file mode 100644
index 0000000..fb9e257
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/model/SavedArticleItem.kt
@@ -0,0 +1,23 @@
+package com.quick.browser.domain.model
+
+/**
+ * Domain model for a saved article item
+ *
+ * This sealed class represents different types of items that can appear in the saved articles list,
+ * such as headers for date grouping and saved article items.
+ */
+sealed class SavedArticleItem {
+    /**
+     * Represents a header item in the saved articles list, typically used for date grouping
+     *
+     * @property title The title of the header (e.g., "Today", "Yesterday", "Last Week")
+     */
+    data class Header(val title: String) : SavedArticleItem()
+
+    /**
+     * Represents a saved article item in the list
+     *
+     * @property savedArticle The saved article associated with this item
+     */
+    data class Article(val savedArticle: SavedArticle) : SavedArticleItem()
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/model/Settings.kt b/app/src/main/java/com/quick/browser/domain/model/Settings.kt
new file mode 100644
index 0000000..a02eeaa
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/model/Settings.kt
@@ -0,0 +1,40 @@
+package com.quick.browser.domain.model
+
+/**
+ * Domain model for app settings
+ *
+ * @property id The unique identifier for the settings record
+ * @property size The size of the browser bubble
+ * @property animationSpeed The speed of animations in the app
+ * @property savePositions Whether to save bubble positions
+ * @property blockAds Whether to block ads
+ * @property defaultColor The default color for the app
+ * @property javascriptEnabled Whether JavaScript is enabled
+ * @property darkTheme Whether dark theme is enabled
+ * @property bubbleSize The size of the bubble as a float multiplier
+ * @property expandedBubbleSize The size of the expanded bubble as a float multiplier
+ * @property animSpeed The speed of animations as a float multiplier
+ * @property saveHistory Whether to save browsing history
+ * @property encryptData Whether to encrypt saved data
+ * @property bubblePositionRight Whether the bubble should be positioned on the right side of the screen
+ * @property autoFontSize Whether to use system font size or manual control
+ * @property manualFontSize The manually set font size when auto font size is disabled
+ */
+data class Settings(
+    val id: Int = 1,
+    val size: String = "medium",
+    val animationSpeed: String = "medium",
+    val savePositions: Boolean = true,
+    val blockAds: Boolean = true,
+    val defaultColor: String = "#2196F3",
+    val javascriptEnabled: Boolean = true,
+    val darkTheme: Boolean = false,
+    val bubbleSize: Float = 1.0f,
+    val expandedBubbleSize: Float = 1.5f,
+    val animSpeed: Float = 1.0f,
+    val saveHistory: Boolean = true,
+    val encryptData: Boolean = true,
+    val bubblePositionRight: Boolean = false,
+    val autoFontSize: Boolean = true,
+    val manualFontSize: Int = 16
+)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/model/WebPage.kt b/app/src/main/java/com/quick/browser/domain/model/WebPage.kt
new file mode 100644
index 0000000..5e455b7
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/model/WebPage.kt
@@ -0,0 +1,45 @@
+package com.quick.browser.domain.model
+
+import android.graphics.Bitmap
+
+/**
+ * Domain model for web pages
+ *
+ * @property url The URL of the web page
+ * @property title The title of the web page
+ * @property timestamp The timestamp when the page was visited
+ * @property content The content of the web page, if available
+ * @property isAvailableOffline Whether the page is available offline
+ * @property visitCount The number of times the page has been visited
+ * @property faviconUrl The URL of the favicon, if available
+ * @property previewImageUrl The URL of the preview image, if available
+ * @property favicon The favicon bitmap, if available
+ * @property summary A list of summary points for the page
+ * @property parentBubbleId The ID of the bubble that this page belongs to
+ */
+data class WebPage(
+    val url: String,
+    val title: String,
+    val timestamp: Long,
+    val content: String? = null,
+    val isAvailableOffline: Boolean = false,
+    var visitCount: Int = 1,
+    val faviconUrl: String? = null,
+    val previewImageUrl: String? = null,
+    val favicon: Bitmap? = null,
+    val summary: List<String> = emptyList(),
+    val parentBubbleId: String? = null
+) {
+    /**
+     * Copy transient fields from another WebPage instance
+     *
+     * @param webPage The WebPage to copy fields from
+     * @return A new WebPage with the transient fields copied
+     */
+    fun copyTransientFields(webPage: WebPage): WebPage {
+        return webPage.copy(
+            summary = this.summary,
+            parentBubbleId = this.parentBubbleId
+        )
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/repository/ArticleRepository.kt b/app/src/main/java/com/quick/browser/domain/repository/ArticleRepository.kt
new file mode 100644
index 0000000..ab5f921
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/repository/ArticleRepository.kt
@@ -0,0 +1,99 @@
+package com.quick.browser.domain.repository
+
+import com.quick.browser.domain.model.SavedArticle
+import kotlinx.coroutines.flow.Flow
+
+/**
+ * Repository interface for managing saved articles
+ *
+ * This interface defines the contract for accessing and modifying saved articles.
+ * It provides methods to retrieve, save, and delete articles from a data source.
+ */
+interface ArticleRepository {
+    /**
+     * Get all saved articles as a flow
+     *
+     * @return A flow of lists of saved articles
+     */
+    fun getAllSavedArticles(): Flow<List<SavedArticle>>
+
+    /**
+     * Get saved articles in a specific folder
+     *
+     * @param folderId The ID of the folder
+     * @return A flow of lists of saved articles in the folder
+     */
+    fun getSavedArticlesInFolder(folderId: Long): Flow<List<SavedArticle>>
+
+    /**
+     * Search saved articles by title or content
+     *
+     * @param query The search query
+     * @return A flow of lists of saved articles matching the query
+     */
+    fun searchSavedArticles(query: String): Flow<List<SavedArticle>>
+
+    /**
+     * Search saved articles in a specific folder by title or content
+     *
+     * @param folderId The ID of the folder
+     * @param query The search query
+     * @return A flow of lists of saved articles matching the query in the folder
+     */
+    fun searchSavedArticlesInFolder(folderId: Long, query: String): Flow<List<SavedArticle>>
+
+    /**
+     * Get a saved article by its URL
+     *
+     * @param url The URL of the article to retrieve
+     * @return The saved article or null if not found
+     */
+    suspend fun getSavedArticleByUrl(url: String): SavedArticle?
+
+    /**
+     * Save an article
+     *
+     * @param article The article to save
+     */
+    suspend fun saveArticle(article: SavedArticle)
+
+    /**
+     * Save an article by its URL
+     *
+     * @param url The URL of the article to save
+     * @return True if the article was saved successfully, false otherwise
+     */
+    suspend fun saveArticleByUrl(url: String): Boolean
+
+    /**
+     * Save an original page as an article
+     *
+     * @param url The URL of the page
+     * @param title The title of the page
+     * @param content The content of the page
+     * @return True if the article was saved successfully, false otherwise
+     */
+    suspend fun saveOriginalPageAsArticle(url: String, title: String, content: String): Boolean
+
+    /**
+     * Delete a saved article
+     *
+     * @param article The article to delete
+     */
+    suspend fun deleteArticle(article: SavedArticle)
+
+    /**
+     * Delete a saved article by its URL
+     *
+     * @param url The URL of the article to delete
+     */
+    suspend fun deleteArticleByUrl(url: String)
+
+    /**
+     * Check if an article is saved
+     *
+     * @param url The URL of the article to check
+     * @return True if the article is saved, false otherwise
+     */
+    suspend fun isArticleSaved(url: String): Boolean
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/repository/BubbleRepository.kt b/app/src/main/java/com/quick/browser/domain/repository/BubbleRepository.kt
new file mode 100644
index 0000000..9af889a
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/repository/BubbleRepository.kt
@@ -0,0 +1,49 @@
+package com.quick.browser.domain.repository
+
+import com.quick.browser.domain.model.Bubble
+
+/**
+ * Repository interface for managing browser bubbles
+ *
+ * This interface defines the contract for accessing and modifying browser bubbles.
+ * It provides methods to create, retrieve, update, and delete bubbles.
+ */
+interface BubbleRepository {
+    /**
+     * Create a new bubble
+     *
+     * @param bubble The bubble to create
+     * @return The created bubble
+     */
+    suspend fun createBubble(bubble: Bubble): Bubble
+
+    /**
+     * Update an existing bubble
+     *
+     * @param bubble The bubble to update
+     * @return The updated bubble
+     */
+    suspend fun updateBubble(bubble: Bubble): Bubble
+
+    /**
+     * Get a bubble by its ID
+     *
+     * @param id The ID of the bubble to retrieve
+     * @return The bubble or null if not found
+     */
+    suspend fun getBubbleById(id: String): Bubble?
+
+    /**
+     * Delete a bubble
+     *
+     * @param bubble The bubble to delete
+     */
+    suspend fun deleteBubble(bubble: Bubble)
+
+    /**
+     * Get all bubbles
+     *
+     * @return A list of all bubbles
+     */
+    suspend fun getAllBubbles(): List<Bubble>
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/repository/FolderRepository.kt b/app/src/main/java/com/quick/browser/domain/repository/FolderRepository.kt
new file mode 100644
index 0000000..e87da8b
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/repository/FolderRepository.kt
@@ -0,0 +1,92 @@
+package com.quick.browser.domain.repository
+
+import com.quick.browser.domain.model.Folder
+import com.quick.browser.domain.model.FolderArticle
+import com.quick.browser.domain.model.SavedArticle
+import kotlinx.coroutines.flow.Flow
+
+/**
+ * Repository interface for managing folders
+ *
+ * This interface defines the contract for accessing and modifying folders and their relationships
+ * with saved articles.
+ */
+interface FolderRepository {
+    /**
+     * Get all folders as a flow
+     *
+     * @return A flow of lists of folders
+     */
+    fun getAllFolders(): Flow<List<Folder>>
+
+    /**
+     * Get a folder by its ID
+     *
+     * @param id The ID of the folder to retrieve
+     * @return The folder or null if not found
+     */
+    suspend fun getFolderById(id: Long): Folder?
+
+    /**
+     * Create a new folder
+     *
+     * @param name The name of the folder to create
+     * @return The created folder
+     */
+    suspend fun createFolder(name: String): Folder
+
+    /**
+     * Update a folder
+     *
+     * @param folder The folder to update
+     */
+    suspend fun updateFolder(folder: Folder)
+
+    /**
+     * Delete a folder
+     *
+     * @param folder The folder to delete
+     */
+    suspend fun deleteFolder(folder: Folder)
+
+    /**
+     * Add an article to a folder
+     *
+     * @param folderId The ID of the folder
+     * @param articleUrl The URL of the article to add
+     */
+    suspend fun addArticleToFolder(folderId: Long, articleUrl: String)
+
+    /**
+     * Remove an article from a folder
+     *
+     * @param folderId The ID of the folder
+     * @param articleUrl The URL of the article to remove
+     */
+    suspend fun removeArticleFromFolder(folderId: Long, articleUrl: String)
+
+    /**
+     * Get all folders that contain a specific article
+     *
+     * @param articleUrl The URL of the article
+     * @return List of folders containing the article
+     */
+    suspend fun getFoldersForArticle(articleUrl: String): List<Folder>
+
+    /**
+     * Get all articles in a specific folder
+     *
+     * @param folderId The ID of the folder
+     * @return Flow of lists of articles in the folder
+     */
+    fun getArticlesInFolder(folderId: Long): Flow<List<SavedArticle>>
+
+    /**
+     * Search saved articles in a specific folder by title or content
+     *
+     * @param folderId The ID of the folder
+     * @param query The search query
+     * @return Flow of lists of saved articles matching the query in the folder
+     */
+    fun searchSavedArticlesInFolder(folderId: Long, query: String): Flow<List<SavedArticle>>
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/repository/HistoryRepository.kt b/app/src/main/java/com/quick/browser/domain/repository/HistoryRepository.kt
new file mode 100644
index 0000000..b34a5ec
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/repository/HistoryRepository.kt
@@ -0,0 +1,100 @@
+package com.quick.browser.domain.repository
+
+import androidx.lifecycle.LiveData
+import com.quick.browser.domain.model.WebPage
+
+/**
+ * Repository interface for managing web page history
+ *
+ * This interface defines the contract for accessing and modifying web browsing history.
+ * It provides methods to retrieve, save, and delete web pages from history, as well as
+ * search and sort functionality.
+ */
+interface HistoryRepository {
+    /**
+     * Get all web pages in history
+     *
+     * @return LiveData containing a list of all web pages in history
+     */
+    fun getAllPages(): LiveData<List<WebPage>>
+
+    /**
+     * Get a web page by its URL
+     *
+     * @param url The URL of the web page to retrieve
+     * @return The web page or null if not found
+     */
+    suspend fun getPageByUrl(url: String): WebPage?
+
+    /**
+     * Save a web page to history
+     *
+     * @param page The web page to save
+     */
+    suspend fun savePage(page: WebPage)
+
+    /**
+     * Delete a web page from history
+     *
+     * @param page The web page to delete
+     */
+    suspend fun deletePage(page: WebPage)
+
+    /**
+     * Delete all web pages from history
+     */
+    suspend fun deleteAllPages()
+
+    /**
+     * Search web pages by query
+     *
+     * @param query The search query
+     * @return LiveData containing a list of matching web pages
+     */
+    fun searchPages(query: String): LiveData<List<WebPage>>
+
+    /**
+     * Get recent web pages
+     *
+     * @param limit The maximum number of pages to return
+     * @return LiveData containing a list of recent web pages
+     */
+    fun getRecentPages(limit: Int): LiveData<List<WebPage>>
+
+    /**
+     * Get most visited web pages
+     *
+     * @param limit The maximum number of pages to return
+     * @return LiveData containing a list of most visited web pages
+     */
+    fun getMostVisitedPages(limit: Int): LiveData<List<WebPage>>
+
+    /**
+     * Increment the visit count for a web page
+     *
+     * @param url The URL of the web page to increment the visit count for
+     */
+    suspend fun incrementVisitCount(url: String)
+
+    /**
+     * Update the offline availability status of a web page
+     *
+     * @param url The URL of the web page
+     * @param isAvailable Whether the page is available offline
+     */
+    suspend fun updateOfflineStatus(url: String, isAvailable: Boolean)
+    
+    /**
+     * Delete pages from today (since midnight)
+     *
+     * @param startOfDay The timestamp representing the start of today
+     */
+    suspend fun deleteTodayPages(startOfDay: Long)
+    
+    /**
+     * Delete pages from the last hour
+     *
+     * @param oneHourAgo The timestamp representing one hour ago
+     */
+    suspend fun deleteLastHourPages(oneHourAgo: Long)
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/repository/SettingsRepository.kt b/app/src/main/java/com/quick/browser/domain/repository/SettingsRepository.kt
new file mode 100644
index 0000000..94adaac
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/repository/SettingsRepository.kt
@@ -0,0 +1,32 @@
+package com.quick.browser.domain.repository
+
+import com.quick.browser.domain.model.Settings
+
+/**
+ * Repository interface for managing app settings
+ *
+ * This interface defines the contract for accessing and modifying application settings.
+ * It provides methods to retrieve, save, and update settings in a data source.
+ */
+interface SettingsRepository {
+    /**
+     * Get the current app settings
+     *
+     * @return The current settings or null if no settings exist
+     */
+    suspend fun getSettings(): Settings?
+
+    /**
+     * Save new app settings
+     *
+     * @param settings The settings to save
+     */
+    suspend fun saveSettings(settings: Settings)
+
+    /**
+     * Update existing app settings
+     *
+     * @param settings The settings to update
+     */
+    suspend fun updateSettings(settings: Settings)
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/result/Result.kt b/app/src/main/java/com/quick/browser/domain/result/Result.kt
new file mode 100644
index 0000000..b0e9de3
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/result/Result.kt
@@ -0,0 +1,41 @@
+package com.quick.browser.domain.result
+
+/**
+ * A generic class that holds a value or an error
+ *
+ * @param T The type of the value
+ * @param E The type of the error
+ */
+sealed class Result<out T, out E> {
+    /**
+     * Represents a successful result with a value
+     *
+     * @param data The value
+     */
+    data class Success<out T>(val data: T) : Result<T, Nothing>()
+
+    /**
+     * Represents a failure result with an error
+     *
+     * @param error The error
+     */
+    data class Failure<out E>(val error: E) : Result<Nothing, E>()
+
+    companion object {
+        /**
+         * Creates a successful result
+         *
+         * @param data The value
+         * @return A successful result
+         */
+        fun <T> success(data: T): Result<T, Nothing> = Success(data)
+
+        /**
+         * Creates a failure result
+         *
+         * @param error The error
+         * @return A failure result
+         */
+        fun <E> failure(error: E): Result<Nothing, E> = Failure(error)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/service/ArticleSavingService.kt b/app/src/main/java/com/quick/browser/domain/service/ArticleSavingService.kt
new file mode 100644
index 0000000..9eafbd6
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/service/ArticleSavingService.kt
@@ -0,0 +1,151 @@
+package com.quick.browser.domain.service
+
+import com.quick.browser.domain.model.SavedArticle
+import com.quick.browser.domain.repository.ArticleRepository
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.withContext
+
+/**
+ * Service for handling article saving functionality
+ * This service contains the business logic for saving articles without UI concerns
+ */
+class ArticleSavingService(
+    private val repository: ArticleRepository
+) {
+    
+    /**
+     * Save an article for offline reading
+     *
+     * @param url The URL of the article to save
+     * @param scope The coroutine scope to launch the save operation
+     * @param onSuccess Callback when save is successful
+     * @param onError Callback when save fails
+     * @return true if the operation was initiated, false if article already exists
+     */
+    suspend fun saveArticleForOfflineReading(
+        url: String,
+        scope: CoroutineScope,
+        onSuccess: () -> Unit = {},
+        onError: (String) -> Unit = {}
+    ): Boolean {
+        return withContext(Dispatchers.IO) {
+            try {
+                // Check if article is already saved
+                if (repository.isArticleSaved(url)) {
+                    withContext(Dispatchers.Main) {
+                        onError("Article already saved")
+                    }
+                    return@withContext false
+                }
+                
+                // Attempt to save the article by extracting readable content
+                val success = repository.saveArticleByUrl(url)
+                
+                withContext(Dispatchers.Main) {
+                    if (success) {
+                        onSuccess()
+                    } else {
+                        onError("Article extraction failed")
+                    }
+                }
+                
+                success
+            } catch (e: Exception) {
+                withContext(Dispatchers.Main) {
+                    onError(e.message ?: "Failed to save article")
+                }
+                false
+            }
+        }
+    }
+    
+    /**
+     * Save the original web page content as an article if extraction fails
+     *
+     * @param url The URL of the page to save
+     * @param title The title of the page
+     * @param content The HTML content of the page
+     * @param scope The coroutine scope to launch the save operation
+     * @param onSuccess Callback when save is successful
+     * @param onError Callback when save fails
+     * @return true if the operation was initiated, false if article already exists
+     */
+    suspend fun saveOriginalPageAsArticle(
+        url: String,
+        title: String,
+        content: String,
+        scope: CoroutineScope,
+        onSuccess: () -> Unit = {},
+        onError: (String) -> Unit = {}
+    ): Boolean {
+        return withContext(Dispatchers.IO) {
+            try {
+                // Check if article is already saved
+                if (repository.isArticleSaved(url)) {
+                    withContext(Dispatchers.Main) {
+                        onError("Article already saved")
+                    }
+                    return@withContext false
+                }
+                
+                // Save the original page content
+                val success = repository.saveOriginalPageAsArticle(url, title, content)
+                
+                withContext(Dispatchers.Main) {
+                    if (success) {
+                        onSuccess()
+                    } else {
+                        onError("Failed to save original page")
+                    }
+                }
+                
+                success
+            } catch (e: Exception) {
+                withContext(Dispatchers.Main) {
+                    onError(e.message ?: "Failed to save original page")
+                }
+                false
+            }
+        }
+    }
+    
+    /**
+     * Save a SavedArticle directly to the repository
+     *
+     * @param article The article to save
+     * @param scope The coroutine scope to launch the save operation
+     * @param onSuccess Callback when save is successful
+     * @param onError Callback when save fails
+     */
+    fun saveArticle(
+        article: SavedArticle,
+        scope: CoroutineScope,
+        onSuccess: () -> Unit = {},
+        onError: (String) -> Unit = {}
+    ) {
+        scope.launch(Dispatchers.IO) {
+            try {
+                repository.saveArticle(article)
+                withContext(Dispatchers.Main) {
+                    onSuccess()
+                }
+            } catch (e: Exception) {
+                withContext(Dispatchers.Main) {
+                    onError(e.message ?: "Failed to save article")
+                }
+            }
+        }
+    }
+    
+    /**
+     * Check if an article is already saved
+     *
+     * @param url The URL to check
+     * @return true if the article is already saved, false otherwise
+     */
+    suspend fun isArticleSaved(url: String): Boolean {
+        return repository.isArticleSaved(url)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/service/EncryptedPreferencesService.kt b/app/src/main/java/com/quick/browser/domain/service/EncryptedPreferencesService.kt
new file mode 100644
index 0000000..f04524d
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/service/EncryptedPreferencesService.kt
@@ -0,0 +1,113 @@
+package com.quick.browser.domain.service
+
+import android.content.Context
+import com.quick.browser.data.local.EncryptedPreferences
+
+/**
+ * Service for handling encrypted preferences operations
+ * This service provides a clean interface for encrypted data storage
+ */
+class EncryptedPreferencesService(context: Context, preferencesName: String) {
+    
+    private val encryptedPreferences = EncryptedPreferences.getInstance(context, preferencesName)
+    
+    /**
+     * Put a string value in encrypted preferences
+     *
+     * @param key The preference key
+     * @param value The value to store
+     */
+    fun putString(key: String, value: String?) {
+        encryptedPreferences.putString(key, value)
+    }
+    
+    /**
+     * Get a string value from encrypted preferences
+     *
+     * @param key The preference key
+     * @param defaultValue The default value to return if key not found
+     * @return The decrypted value or default value
+     */
+    fun getString(key: String, defaultValue: String?): String? {
+        return encryptedPreferences.getString(key, defaultValue)
+    }
+    
+    /**
+     * Put a boolean value in encrypted preferences
+     *
+     * @param key The preference key
+     * @param value The value to store
+     */
+    fun putBoolean(key: String, value: Boolean) {
+        encryptedPreferences.putBoolean(key, value)
+    }
+    
+    /**
+     * Get a boolean value from encrypted preferences
+     *
+     * @param key The preference key
+     * @param defaultValue The default value to return if key not found
+     * @return The decrypted value or default value
+     */
+    fun getBoolean(key: String, defaultValue: Boolean): Boolean {
+        return encryptedPreferences.getBoolean(key, defaultValue)
+    }
+    
+    /**
+     * Put an integer value in encrypted preferences
+     *
+     * @param key The preference key
+     * @param value The value to store
+     */
+    fun putInt(key: String, value: Int) {
+        encryptedPreferences.putInt(key, value)
+    }
+    
+    /**
+     * Get an integer value from encrypted preferences
+     *
+     * @param key The preference key
+     * @param defaultValue The default value to return if key not found
+     * @return The decrypted value or default value
+     */
+    fun getInt(key: String, defaultValue: Int): Int {
+        return encryptedPreferences.getInt(key, defaultValue)
+    }
+    
+    /**
+     * Put a set of strings in encrypted preferences
+     *
+     * @param key The preference key
+     * @param value The set of strings to store
+     */
+    fun putStringSet(key: String, value: Set<String>?) {
+        encryptedPreferences.putStringSet(key, value)
+    }
+    
+    /**
+     * Get a set of strings from encrypted preferences
+     *
+     * @param key The preference key
+     * @param defaultValue The default value to return if key not found
+     * @return The decrypted set of strings or default value
+     */
+    fun getStringSet(key: String, defaultValue: Set<String>?): Set<String>? {
+        return encryptedPreferences.getStringSet(key, defaultValue)
+    }
+    
+    /**
+     * Remove a value from encrypted preferences
+     *
+     * @param key The preference key to remove
+     */
+    fun remove(key: String) {
+        encryptedPreferences.remove(key)
+    }
+    
+    /**
+     * Clear all values from encrypted preferences
+     */
+    fun clear() {
+        encryptedPreferences.clear()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/service/ModelDownloadService.kt b/app/src/main/java/com/quick/browser/domain/service/ModelDownloadService.kt
new file mode 100644
index 0000000..130f221
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/service/ModelDownloadService.kt
@@ -0,0 +1,28 @@
+package com.quick.browser.domain.service
+
+import android.content.Context
+import com.quick.browser.data.network.ModelDownloader
+
+/**
+ * Service for handling model downloading operations
+ * This service provides a clean interface for downloading NLP models
+ */
+class ModelDownloadService(context: Context) {
+    
+    private val modelDownloader = ModelDownloader(context)
+    
+    /**
+     * Checks if the sentence model is already downloaded
+     */
+    fun isSentenceModelDownloaded(): Boolean {
+        return modelDownloader.isSentenceModelDownloaded()
+    }
+
+    /**
+     * Downloads the sentence model if it's not already downloaded
+     * @return true if the model is available (either downloaded now or previously)
+     */
+    suspend fun ensureSentenceModelAvailable(): Boolean {
+        return modelDownloader.ensureSentenceModelAvailable()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/service/SecurityPolicyService.kt b/app/src/main/java/com/quick/browser/domain/service/SecurityPolicyService.kt
new file mode 100644
index 0000000..c67530c
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/service/SecurityPolicyService.kt
@@ -0,0 +1,64 @@
+package com.quick.browser.domain.service
+
+import android.content.Context
+import android.webkit.WebView
+import com.quick.browser.data.security.SecurityPolicyManager
+import java.security.cert.Certificate
+
+/**
+ * Service for handling security policy operations
+ * This service provides a clean interface for security-related operations
+ */
+class SecurityPolicyService(context: Context) {
+    
+    private val securityPolicyManager = SecurityPolicyManager(context)
+    
+    /**
+     * Apply strict security settings to a WebView
+     *
+     * @param webView The WebView to configure
+     */
+    fun applySecuritySettings(webView: WebView) {
+        securityPolicyManager.applySecuritySettings(webView)
+    }
+    
+    /**
+     * Sanitize user input to prevent injection attacks
+     *
+     * @param input The input string to sanitize
+     * @return The sanitized string
+     */
+    fun sanitizeInput(input: String): String {
+        return securityPolicyManager.sanitizeInput(input)
+    }
+    
+    /**
+     * Validate and format URL for security
+     *
+     * @param url The URL to validate
+     * @return The validated and formatted URL, or null if invalid
+     */
+    fun validateAndFormatUrl(url: String): String? {
+        return securityPolicyManager.validateAndFormatUrl(url)
+    }
+    
+    /**
+     * Check if a URL is safe to load based on security policies
+     *
+     * @param url The URL to check
+     * @return True if the URL is safe to load
+     */
+    fun isUrlSafeToLoad(url: String): Boolean {
+        return securityPolicyManager.isUrlSafeToLoad(url)
+    }
+    
+    /**
+     * Generate a certificate fingerprint for pinning
+     *
+     * @param certificate The certificate to fingerprint
+     * @return The SHA-256 fingerprint of the certificate
+     */
+    fun generateCertificateFingerprint(certificate: Certificate): String {
+        return securityPolicyManager.generateCertificateFingerprint(certificate)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/AddArticleToFolderUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/AddArticleToFolderUseCase.kt
new file mode 100644
index 0000000..69c6e60
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/AddArticleToFolderUseCase.kt
@@ -0,0 +1,15 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.repository.FolderRepository
+import javax.inject.Inject
+
+/**
+ * Use case for adding an article to a folder
+ */
+class AddArticleToFolderUseCase @Inject constructor(
+    private val folderRepository: FolderRepository
+) {
+    suspend operator fun invoke(folderId: Long, articleUrl: String) {
+        folderRepository.addArticleToFolder(folderId, articleUrl)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/CloseBubbleUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/CloseBubbleUseCase.kt
new file mode 100644
index 0000000..352b880
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/CloseBubbleUseCase.kt
@@ -0,0 +1,26 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.model.Bubble
+import com.quick.browser.domain.repository.BubbleRepository
+import javax.inject.Inject
+
+/**
+ * Use case for closing/removing a browser bubble
+ *
+ * This use case handles the removal of browser bubbles by delegating
+ * to the bubble repository.
+ *
+ * @param bubbleRepository The repository to delete bubbles from
+ */
+class CloseBubbleUseCase @Inject constructor(
+    private val bubbleRepository: BubbleRepository
+) {
+    /**
+     * Close/remove a browser bubble
+     *
+     * @param bubble The bubble to close/remove
+     */
+    suspend operator fun invoke(bubble: Bubble) {
+        bubbleRepository.deleteBubble(bubble)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/CreateBubbleUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/CreateBubbleUseCase.kt
new file mode 100644
index 0000000..cb20dbd
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/CreateBubbleUseCase.kt
@@ -0,0 +1,27 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.model.Bubble
+import com.quick.browser.domain.repository.BubbleRepository
+import javax.inject.Inject
+
+/**
+ * Use case for creating a new browser bubble
+ *
+ * This use case handles the creation of new browser bubbles by delegating
+ * to the bubble repository.
+ *
+ * @param bubbleRepository The repository to create bubbles in
+ */
+class CreateBubbleUseCase @Inject constructor(
+    private val bubbleRepository: BubbleRepository
+) {
+    /**
+     * Create a new browser bubble
+     *
+     * @param bubble The bubble to create
+     * @return The created bubble
+     */
+    suspend operator fun invoke(bubble: Bubble): Bubble {
+        return bubbleRepository.createBubble(bubble)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/CreateFolderUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/CreateFolderUseCase.kt
new file mode 100644
index 0000000..1d9deeb
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/CreateFolderUseCase.kt
@@ -0,0 +1,16 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.model.Folder
+import com.quick.browser.domain.repository.FolderRepository
+import javax.inject.Inject
+
+/**
+ * Use case for creating a folder
+ */
+class CreateFolderUseCase @Inject constructor(
+    private val folderRepository: FolderRepository
+) {
+    suspend operator fun invoke(name: String): Folder {
+        return folderRepository.createFolder(name)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/DeleteAllPagesUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/DeleteAllPagesUseCase.kt
new file mode 100644
index 0000000..3ee8075
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/DeleteAllPagesUseCase.kt
@@ -0,0 +1,15 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.repository.HistoryRepository
+import javax.inject.Inject
+
+/**
+ * Use case for deleting all web pages from history
+ */
+class DeleteAllPagesUseCase @Inject constructor(
+    private val historyRepository: HistoryRepository
+) {
+    suspend operator fun invoke() {
+        historyRepository.deleteAllPages()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/DeleteArticleUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/DeleteArticleUseCase.kt
new file mode 100644
index 0000000..a16b7c5
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/DeleteArticleUseCase.kt
@@ -0,0 +1,31 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.error.DomainError
+import com.quick.browser.domain.model.SavedArticle
+import com.quick.browser.domain.repository.ArticleRepository
+import com.quick.browser.domain.result.Result
+import javax.inject.Inject
+
+/**
+ * Use case for deleting a saved article
+ *
+ * @param articleRepository The repository to delete the article from
+ */
+class DeleteArticleUseCase @Inject constructor(
+    private val articleRepository: ArticleRepository
+) {
+    /**
+     * Delete a saved article
+     *
+     * @param article The article to delete
+     * @return A Result indicating success or failure
+     */
+    suspend operator fun invoke(article: SavedArticle): Result<Unit, DomainError> {
+        return try {
+            articleRepository.deleteArticle(article)
+            Result.success(Unit)
+        } catch (e: Exception) {
+            Result.failure(DomainError.DatabaseError("Failed to delete article", e))
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/DeleteWebPageUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/DeleteWebPageUseCase.kt
new file mode 100644
index 0000000..4793efd
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/DeleteWebPageUseCase.kt
@@ -0,0 +1,16 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.model.WebPage
+import com.quick.browser.domain.repository.HistoryRepository
+import javax.inject.Inject
+
+/**
+ * Use case for deleting a web page from history
+ */
+class DeleteWebPageUseCase @Inject constructor(
+    private val historyRepository: HistoryRepository
+) {
+    suspend operator fun invoke(webPage: WebPage) {
+        historyRepository.deletePage(webPage)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/GetAllFoldersUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/GetAllFoldersUseCase.kt
new file mode 100644
index 0000000..16e5594
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/GetAllFoldersUseCase.kt
@@ -0,0 +1,17 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.model.Folder
+import com.quick.browser.domain.repository.FolderRepository
+import kotlinx.coroutines.flow.Flow
+import javax.inject.Inject
+
+/**
+ * Use case for getting all folders
+ */
+class GetAllFoldersUseCase @Inject constructor(
+    private val folderRepository: FolderRepository
+) {
+    operator fun invoke(): Flow<List<Folder>> {
+        return folderRepository.getAllFolders()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/GetArticlesInFolderUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/GetArticlesInFolderUseCase.kt
new file mode 100644
index 0000000..24fe4b0
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/GetArticlesInFolderUseCase.kt
@@ -0,0 +1,18 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.model.Folder
+import com.quick.browser.domain.model.SavedArticle
+import com.quick.browser.domain.repository.FolderRepository
+import kotlinx.coroutines.flow.Flow
+import javax.inject.Inject
+
+/**
+ * Use case for getting articles in a folder
+ */
+class GetArticlesInFolderUseCase @Inject constructor(
+    private val folderRepository: FolderRepository
+) {
+    operator fun invoke(folderId: Long): Flow<List<SavedArticle>> {
+        return folderRepository.getArticlesInFolder(folderId)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/GetHistoryUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/GetHistoryUseCase.kt
new file mode 100644
index 0000000..01c21ea
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/GetHistoryUseCase.kt
@@ -0,0 +1,27 @@
+package com.quick.browser.domain.usecase
+
+import androidx.lifecycle.LiveData
+import com.quick.browser.domain.model.WebPage
+import com.quick.browser.domain.repository.HistoryRepository
+import javax.inject.Inject
+
+/**
+ * Use case for getting browsing history
+ *
+ * This use case provides access to the complete browsing history by delegating
+ * to the history repository.
+ *
+ * @param historyRepository The repository to get history from
+ */
+class GetHistoryUseCase @Inject constructor(
+    private val historyRepository: HistoryRepository
+) {
+    /**
+     * Get all web pages in browsing history
+     *
+     * @return LiveData containing a list of all web pages in history
+     */
+    operator fun invoke(): LiveData<List<WebPage>> {
+        return historyRepository.getAllPages()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/GetMostVisitedPagesUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/GetMostVisitedPagesUseCase.kt
new file mode 100644
index 0000000..e126226
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/GetMostVisitedPagesUseCase.kt
@@ -0,0 +1,17 @@
+package com.quick.browser.domain.usecase
+
+import androidx.lifecycle.LiveData
+import com.quick.browser.domain.model.WebPage
+import com.quick.browser.domain.repository.HistoryRepository
+import javax.inject.Inject
+
+/**
+ * Use case for getting most visited web pages
+ */
+class GetMostVisitedPagesUseCase @Inject constructor(
+    private val historyRepository: HistoryRepository
+) {
+    operator fun invoke(limit: Int): LiveData<List<WebPage>> {
+        return historyRepository.getMostVisitedPages(limit)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/GetRecentPagesUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/GetRecentPagesUseCase.kt
new file mode 100644
index 0000000..29aa439
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/GetRecentPagesUseCase.kt
@@ -0,0 +1,17 @@
+package com.quick.browser.domain.usecase
+
+import androidx.lifecycle.LiveData
+import com.quick.browser.domain.model.WebPage
+import com.quick.browser.domain.repository.HistoryRepository
+import javax.inject.Inject
+
+/**
+ * Use case for getting recent web pages
+ */
+class GetRecentPagesUseCase @Inject constructor(
+    private val historyRepository: HistoryRepository
+) {
+    operator fun invoke(limit: Int): LiveData<List<WebPage>> {
+        return historyRepository.getRecentPages(limit)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/GetSavedArticlesUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/GetSavedArticlesUseCase.kt
new file mode 100644
index 0000000..cf07ae1
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/GetSavedArticlesUseCase.kt
@@ -0,0 +1,21 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.model.SavedArticle
+import com.quick.browser.domain.repository.ArticleRepository
+import kotlinx.coroutines.flow.Flow
+import javax.inject.Inject
+
+/**
+ * Use case for getting all saved articles
+ */
+class GetSavedArticlesUseCase @Inject constructor(
+    private val articleRepository: ArticleRepository
+) {
+    operator fun invoke(): Flow<List<SavedArticle>> {
+        return articleRepository.getAllSavedArticles()
+    }
+
+    operator fun invoke(folderId: Long): Flow<List<SavedArticle>> {
+        return articleRepository.getSavedArticlesInFolder(folderId)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/GetSettingsUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/GetSettingsUseCase.kt
new file mode 100644
index 0000000..5d21def
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/GetSettingsUseCase.kt
@@ -0,0 +1,34 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.error.DomainError
+import com.quick.browser.domain.model.Settings
+import com.quick.browser.domain.repository.SettingsRepository
+import com.quick.browser.domain.result.Result
+import javax.inject.Inject
+
+/**
+ * Use case for getting app settings
+ *
+ * @param settingsRepository The repository to get settings from
+ */
+class GetSettingsUseCase @Inject constructor(
+    private val settingsRepository: SettingsRepository
+) {
+    /**
+     * Get the app settings
+     *
+     * @return A Result containing the settings or an error
+     */
+    suspend operator fun invoke(): Result<Settings, DomainError> {
+        return try {
+            val settings = settingsRepository.getSettings()
+            if (settings != null) {
+                Result.success(settings)
+            } else {
+                Result.failure(DomainError.GeneralError("Settings not found"))
+            }
+        } catch (e: Exception) {
+            Result.failure(DomainError.DatabaseError("Failed to get settings", e))
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/IncrementVisitCountUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/IncrementVisitCountUseCase.kt
new file mode 100644
index 0000000..a9a1594
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/IncrementVisitCountUseCase.kt
@@ -0,0 +1,30 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.error.DomainError
+import com.quick.browser.domain.repository.HistoryRepository
+import com.quick.browser.domain.result.Result
+import javax.inject.Inject
+
+/**
+ * Use case for incrementing the visit count of a web page
+ *
+ * @param historyRepository The repository to increment the visit count in
+ */
+class IncrementVisitCountUseCase @Inject constructor(
+    private val historyRepository: HistoryRepository
+) {
+    /**
+     * Increment the visit count of a web page
+     *
+     * @param url The URL of the web page
+     * @return A Result indicating success or failure
+     */
+    suspend operator fun invoke(url: String): Result<Unit, DomainError> {
+        return try {
+            historyRepository.incrementVisitCount(url)
+            Result.success(Unit)
+        } catch (e: Exception) {
+            Result.failure(DomainError.DatabaseError("Failed to increment visit count", e))
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/RemoveArticleFromFolderUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/RemoveArticleFromFolderUseCase.kt
new file mode 100644
index 0000000..b3715f4
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/RemoveArticleFromFolderUseCase.kt
@@ -0,0 +1,15 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.repository.FolderRepository
+import javax.inject.Inject
+
+/**
+ * Use case for removing an article from a folder
+ */
+class RemoveArticleFromFolderUseCase @Inject constructor(
+    private val folderRepository: FolderRepository
+) {
+    suspend operator fun invoke(folderId: Long, articleUrl: String) {
+        folderRepository.removeArticleFromFolder(folderId, articleUrl)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/SaveArticleUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/SaveArticleUseCase.kt
new file mode 100644
index 0000000..eba2c93
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/SaveArticleUseCase.kt
@@ -0,0 +1,31 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.error.DomainError
+import com.quick.browser.domain.model.SavedArticle
+import com.quick.browser.domain.repository.ArticleRepository
+import com.quick.browser.domain.result.Result
+import javax.inject.Inject
+
+/**
+ * Use case for saving an article
+ *
+ * @param articleRepository The repository to save the article to
+ */
+class SaveArticleUseCase @Inject constructor(
+    private val articleRepository: ArticleRepository
+) {
+    /**
+     * Save an article
+     *
+     * @param article The article to save
+     * @return A Result indicating success or failure
+     */
+    suspend operator fun invoke(article: SavedArticle): Result<Unit, DomainError> {
+        return try {
+            articleRepository.saveArticle(article)
+            Result.success(Unit)
+        } catch (e: Exception) {
+            Result.failure(DomainError.DatabaseError("Failed to save article", e))
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/SaveWebPageUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/SaveWebPageUseCase.kt
new file mode 100644
index 0000000..db279fe
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/SaveWebPageUseCase.kt
@@ -0,0 +1,31 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.error.DomainError
+import com.quick.browser.domain.model.WebPage
+import com.quick.browser.domain.repository.HistoryRepository
+import com.quick.browser.domain.result.Result
+import javax.inject.Inject
+
+/**
+ * Use case for saving a web page to history
+ *
+ * @param historyRepository The repository to save the web page to
+ */
+class SaveWebPageUseCase @Inject constructor(
+    private val historyRepository: HistoryRepository
+) {
+    /**
+     * Save a web page to history
+     *
+     * @param webPage The web page to save
+     * @return A Result indicating success or failure
+     */
+    suspend operator fun invoke(webPage: WebPage): Result<Unit, DomainError> {
+        return try {
+            historyRepository.savePage(webPage)
+            Result.success(Unit)
+        } catch (e: Exception) {
+            Result.failure(DomainError.DatabaseError("Failed to save web page", e))
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/SearchArticlesInFolderUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/SearchArticlesInFolderUseCase.kt
new file mode 100644
index 0000000..b510a8f
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/SearchArticlesInFolderUseCase.kt
@@ -0,0 +1,18 @@
+package com.quick.browser.domain.usecase
+
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.asLiveData
+import com.quick.browser.domain.model.SavedArticle
+import com.quick.browser.domain.repository.FolderRepository
+import javax.inject.Inject
+
+/**
+ * Use case for searching saved articles in a folder
+ */
+class SearchArticlesInFolderUseCase @Inject constructor(
+    private val folderRepository: FolderRepository
+) {
+    operator fun invoke(folderId: Long, query: String): LiveData<List<SavedArticle>> {
+        return folderRepository.searchSavedArticlesInFolder(folderId, query).asLiveData()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/SearchHistoryUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/SearchHistoryUseCase.kt
new file mode 100644
index 0000000..a677fd5
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/SearchHistoryUseCase.kt
@@ -0,0 +1,17 @@
+package com.quick.browser.domain.usecase
+
+import androidx.lifecycle.LiveData
+import com.quick.browser.domain.model.WebPage
+import com.quick.browser.domain.repository.HistoryRepository
+import javax.inject.Inject
+
+/**
+ * Use case for searching web page history
+ */
+class SearchHistoryUseCase @Inject constructor(
+    private val historyRepository: HistoryRepository
+) {
+    operator fun invoke(query: String): LiveData<List<WebPage>> {
+        return historyRepository.searchPages(query)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/SearchSavedArticlesUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/SearchSavedArticlesUseCase.kt
new file mode 100644
index 0000000..d37fc53
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/SearchSavedArticlesUseCase.kt
@@ -0,0 +1,22 @@
+package com.quick.browser.domain.usecase
+
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.asLiveData
+import com.quick.browser.domain.model.SavedArticle
+import com.quick.browser.domain.repository.ArticleRepository
+import javax.inject.Inject
+
+/**
+ * Use case for searching saved articles
+ */
+class SearchSavedArticlesUseCase @Inject constructor(
+    private val articleRepository: ArticleRepository
+) {
+    operator fun invoke(query: String): LiveData<List<SavedArticle>> {
+        return articleRepository.searchSavedArticles(query).asLiveData()
+    }
+
+    operator fun invoke(folderId: Long, query: String): LiveData<List<SavedArticle>> {
+        return articleRepository.searchSavedArticlesInFolder(folderId, query).asLiveData()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/UpdateOfflineStatusUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/UpdateOfflineStatusUseCase.kt
new file mode 100644
index 0000000..f605593
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/UpdateOfflineStatusUseCase.kt
@@ -0,0 +1,31 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.error.DomainError
+import com.quick.browser.domain.repository.HistoryRepository
+import com.quick.browser.domain.result.Result
+import javax.inject.Inject
+
+/**
+ * Use case for updating the offline status of a web page
+ *
+ * @param historyRepository The repository to update the offline status in
+ */
+class UpdateOfflineStatusUseCase @Inject constructor(
+    private val historyRepository: HistoryRepository
+) {
+    /**
+     * Update the offline status of a web page
+     *
+     * @param url The URL of the web page
+     * @param isAvailable Whether the page is available offline
+     * @return A Result indicating success or failure
+     */
+    suspend operator fun invoke(url: String, isAvailable: Boolean): Result<Unit, DomainError> {
+        return try {
+            historyRepository.updateOfflineStatus(url, isAvailable)
+            Result.success(Unit)
+        } catch (e: Exception) {
+            Result.failure(DomainError.DatabaseError("Failed to update offline status", e))
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/domain/usecase/UpdateSettingsUseCase.kt b/app/src/main/java/com/quick/browser/domain/usecase/UpdateSettingsUseCase.kt
new file mode 100644
index 0000000..9a31cd9
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/domain/usecase/UpdateSettingsUseCase.kt
@@ -0,0 +1,31 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.error.DomainError
+import com.quick.browser.domain.model.Settings
+import com.quick.browser.domain.repository.SettingsRepository
+import com.quick.browser.domain.result.Result
+import javax.inject.Inject
+
+/**
+ * Use case for updating app settings
+ *
+ * @param settingsRepository The repository to update settings in
+ */
+class UpdateSettingsUseCase @Inject constructor(
+    private val settingsRepository: SettingsRepository
+) {
+    /**
+     * Update the app settings
+     *
+     * @param settings The settings to update
+     * @return A Result indicating success or failure
+     */
+    suspend operator fun invoke(settings: Settings): Result<Unit, DomainError> {
+        return try {
+            settingsRepository.saveSettings(settings)
+            Result.success(Unit)
+        } catch (e: Exception) {
+            Result.failure(DomainError.DatabaseError("Failed to update settings", e))
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/navigation/NavGraph.kt b/app/src/main/java/com/quick/browser/presentation/navigation/NavGraph.kt
new file mode 100644
index 0000000..e4039c8
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/navigation/NavGraph.kt
@@ -0,0 +1,98 @@
+package com.quick.browser.presentation.navigation
+
+import android.content.Context
+import android.content.Intent
+import com.quick.browser.presentation.ui.history.HistoryActivity
+import com.quick.browser.presentation.ui.saved.SavedArticlesActivity
+import com.quick.browser.presentation.ui.settings.SettingsActivity
+
+/**
+ * Navigation constants and helper functions for the Quick Browser application
+ * 
+ * This is a simplified navigation system for a View-based Android application
+ * rather than a Compose-based one.
+ */
+object NavGraph {
+    // Main navigation routes
+    const val MAIN = "main"
+    const val HISTORY = "history"
+    const val SAVED_ARTICLES = "saved_articles"
+    const val SETTINGS = "settings"
+    
+    // History-specific actions
+    const val HISTORY_DETAILS = "history_details"
+    const val HISTORY_SEARCH = "history_search"
+    
+    // Saved articles actions
+    const val ARTICLE_READER = "article_reader"
+    const val ARTICLE_DETAILS = "article_details"
+    
+    // Settings actions
+    const val SETTINGS_GENERAL = "settings_general"
+    const val SETTINGS_PRIVACY = "settings_privacy"
+    const val SETTINGS_DISPLAY = "settings_display"
+}
+
+/**
+ * Navigation helper class for View-based navigation
+ */
+class NavigationHelper(private val context: Context) {
+    
+    /**
+     * Navigate to main activity
+     */
+    fun navigateToMain() {
+        val intent = Intent(context, com.quick.browser.presentation.ui.main.MainActivity::class.java)
+        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
+        context.startActivity(intent)
+    }
+    
+    /**
+     * Navigate to history activity
+     */
+    fun navigateToHistory() {
+        val intent = Intent(context, HistoryActivity::class.java)
+        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
+        context.startActivity(intent)
+    }
+    
+    /**
+     * Navigate to saved articles activity
+     */
+    fun navigateToSavedArticles() {
+        val intent = Intent(context, SavedArticlesActivity::class.java)
+        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
+        context.startActivity(intent)
+    }
+    
+    /**
+     * Navigate to settings activity
+     */
+    fun navigateToSettings() {
+        val intent = Intent(context, SettingsActivity::class.java)
+        intent.flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
+        context.startActivity(intent)
+    }
+    
+    /**
+     * Navigate to reader mode with a specific URL
+     */
+    fun navigateToReaderMode(url: String) {
+        // This would typically involve passing the URL as an extra to the reader activity
+        // For now, we'll just navigate to the main activity with a reader mode flag
+        val intent = Intent(context, com.quick.browser.presentation.ui.main.MainActivity::class.java).apply {
+            putExtra("reader_mode_url", url)
+            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP
+        }
+        context.startActivity(intent)
+    }
+    
+    /**
+     * Navigate back (finish current activity)
+     */
+    fun navigateBack() {
+        if (context is android.app.Activity) {
+            context.finish()
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/base/BaseViewModel.kt b/app/src/main/java/com/quick/browser/presentation/ui/base/BaseViewModel.kt
new file mode 100644
index 0000000..27e46f2
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/base/BaseViewModel.kt
@@ -0,0 +1,34 @@
+package com.quick.browser.presentation.ui.base
+
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import kotlinx.coroutines.channels.Channel
+import kotlinx.coroutines.flow.Flow
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.StateFlow
+import kotlinx.coroutines.flow.receiveAsFlow
+import kotlinx.coroutines.launch
+
+/**
+ * Base ViewModel class that provides common functionality for all ViewModels
+ */
+abstract class BaseViewModel : ViewModel() {
+
+    private val _uiState = MutableStateFlow<UiState<Unit>>(UiState.Success(Unit))
+    val uiState: StateFlow<UiState<Unit>> = _uiState
+
+    private val _uiEvent = Channel<UiEvent>()
+    val uiEvent: Flow<UiEvent> = _uiEvent.receiveAsFlow()
+
+    protected fun <T> updateUiState(state: UiState<T>) {
+        viewModelScope.launch {
+            _uiState.value = state as UiState<Unit>
+        }
+    }
+
+    protected fun sendUiEvent(event: UiEvent) {
+        viewModelScope.launch {
+            _uiEvent.send(event)
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/base/UiAction.kt b/app/src/main/java/com/quick/browser/presentation/ui/base/UiAction.kt
new file mode 100644
index 0000000..2f61437
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/base/UiAction.kt
@@ -0,0 +1,6 @@
+package com.quick.browser.presentation.ui.base
+
+/**
+ * Base UI action class for all screens
+ */
+interface UiAction
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/base/UiEvent.kt b/app/src/main/java/com/quick/browser/presentation/ui/base/UiEvent.kt
new file mode 100644
index 0000000..fccde11
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/base/UiEvent.kt
@@ -0,0 +1,11 @@
+package com.quick.browser.presentation.ui.base
+
+/**
+ * Base UI event class for all screens
+ */
+sealed class UiEvent {
+    data class ShowToast(val message: String) : UiEvent()
+    data class ShowSnackbar(val message: String) : UiEvent()
+    data class NavigateTo(val route: String) : UiEvent()
+    object NavigateBack : UiEvent()
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/base/UiState.kt b/app/src/main/java/com/quick/browser/presentation/ui/base/UiState.kt
new file mode 100644
index 0000000..3ccb760
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/base/UiState.kt
@@ -0,0 +1,10 @@
+package com.quick.browser.presentation.ui.base
+
+/**
+ * Base UI state class for all screens
+ */
+sealed class UiState<out T> {
+    object Loading : UiState<Nothing>()
+    data class Success<T>(val data: T) : UiState<T>()
+    data class Error(val message: String) : UiState<Nothing>()
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/BrowserUiState.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/BrowserUiState.kt
new file mode 100644
index 0000000..c380094
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/BrowserUiState.kt
@@ -0,0 +1,16 @@
+package com.quick.browser.presentation.ui.browser
+
+import com.quick.browser.domain.model.Bubble
+import com.quick.browser.domain.model.Settings
+import com.quick.browser.domain.model.WebPage
+
+/**
+ * UI state for the browser screen
+ */
+data class BrowserUiState(
+    val bubbles: List<Bubble> = emptyList(),
+    val webPages: Map<String, WebPage> = emptyMap(),
+    val settings: Settings? = null,
+    val isLoading: Boolean = false,
+    val error: String? = null
+)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleAnimator.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleAnimator.kt
new file mode 100755
index 0000000..06b67c2
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleAnimator.kt
@@ -0,0 +1,1047 @@
+package com.quick.browser.presentation.ui.browser
+
+import android.animation.*
+import android.view.View
+import android.view.animation.*
+
+/**
+ * Handles all animations for the bubble UI
+ */
+class BubbleAnimator() {
+
+    /**
+     * Animate expanding a view with a scale and fade effect
+     */
+    fun animateExpand(view: View, onEnd: (() -> Unit)? = null) {
+        view.alpha = 0f
+        view.scaleX = 0.8f
+        view.scaleY = 0.8f
+        view.visibility = View.VISIBLE
+        
+        val animSet = AnimatorSet()
+        val alphaAnim = ObjectAnimator.ofFloat(view, "alpha", 0f, 1f)
+        val scaleXAnim = ObjectAnimator.ofFloat(view, "scaleX", 0.8f, 1f)
+        val scaleYAnim = ObjectAnimator.ofFloat(view, "scaleY", 0.8f, 1f)
+        
+        animSet.playTogether(alphaAnim, scaleXAnim, scaleYAnim)
+        animSet.duration = ANIMATION_DURATION_MEDIUM
+        animSet.interpolator = OvershootInterpolator(1.2f)
+        
+        animSet.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                onEnd?.invoke()
+            }
+        })
+        
+        animSet.start()
+    }
+    
+    /**
+     * Animate collapsing a view with a scale and fade effect
+     */
+    fun animateCollapse(view: View, onEnd: (() -> Unit)? = null) {
+        val animSet = AnimatorSet()
+        val alphaAnim = ObjectAnimator.ofFloat(view, "alpha", 1f, 0f)
+        val scaleXAnim = ObjectAnimator.ofFloat(view, "scaleX", 1f, 0.8f)
+        val scaleYAnim = ObjectAnimator.ofFloat(view, "scaleY", 1f, 0.8f)
+        
+        animSet.playTogether(alphaAnim, scaleXAnim, scaleYAnim)
+        animSet.duration = ANIMATION_DURATION_MEDIUM
+        animSet.interpolator = AccelerateInterpolator()
+        
+        animSet.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                view.visibility = View.GONE
+                onEnd?.invoke()
+            }
+        })
+        
+        animSet.start()
+    }
+    
+    /**
+     * Animate collapsing expanded container to bubble with smooth transition
+     * This creates a gradual transition similar to expansion but in reverse
+     */
+    fun animateCollapseToBubble(
+        expandedContainer: View,
+        urlBarContainer: View,
+        bubbleContainer: View,
+        onEnd: (() -> Unit)? = null
+    ) {
+        // Reset the corner style of the expanded container to default (bottom rounded corners)
+        if (expandedContainer is com.google.android.material.card.MaterialCardView) {
+            expandedContainer.shapeAppearanceModel = expandedContainer.shapeAppearanceModel.toBuilder()
+                .setTopLeftCornerSize(0f)
+                .setTopRightCornerSize(0f)
+                .setBottomLeftCornerSize(16f)
+                .setBottomRightCornerSize(16f)
+                .build()
+        }
+
+        // Phase 1: Start collapsing the expanded container and URL bar together
+        val collapseAnimSet = AnimatorSet()
+        val expandedAlphaAnim = ObjectAnimator.ofFloat(expandedContainer, "alpha", 1f, 0f)
+        val expandedScaleXAnim = ObjectAnimator.ofFloat(expandedContainer, "scaleX", 1f, 0.3f)
+        val expandedScaleYAnim = ObjectAnimator.ofFloat(expandedContainer, "scaleY", 1f, 0.3f)
+        
+        val urlBarAlphaAnim = ObjectAnimator.ofFloat(urlBarContainer, "alpha", 1f, 0f)
+        val urlBarScaleXAnim = ObjectAnimator.ofFloat(urlBarContainer, "scaleX", 1f, 0.3f)
+        val urlBarScaleYAnim = ObjectAnimator.ofFloat(urlBarContainer, "scaleY", 1f, 0.3f)
+        
+        collapseAnimSet.playTogether(
+            expandedAlphaAnim, expandedScaleXAnim, expandedScaleYAnim,
+            urlBarAlphaAnim, urlBarScaleXAnim, urlBarScaleYAnim
+        )
+        collapseAnimSet.duration = ANIMATION_DURATION_MEDIUM
+        collapseAnimSet.interpolator = AccelerateInterpolator()
+        
+        collapseAnimSet.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                // Hide expanded container and URL bar completely
+                expandedContainer.visibility = View.GONE
+                urlBarContainer.visibility = View.GONE
+                
+                // Reset expanded container properties for next time
+                expandedContainer.scaleX = 1f
+                expandedContainer.scaleY = 1f
+                expandedContainer.alpha = 1f
+                
+                // Reset URL bar properties for next time
+                urlBarContainer.scaleX = 1f
+                urlBarContainer.scaleY = 1f
+                urlBarContainer.alpha = 1f
+                
+                // Phase 2: Show bubble container with scale-up animation
+                bubbleContainer.alpha = 0f
+                bubbleContainer.scaleX = 0.3f
+                bubbleContainer.scaleY = 0.3f
+                bubbleContainer.visibility = View.VISIBLE
+                
+                // Animate bubble appearing with smooth scale-up effect
+                val bubbleAppearAnim = AnimatorSet()
+                val bubbleAlphaAnim = ObjectAnimator.ofFloat(bubbleContainer, "alpha", 0f, 1f)
+                val bubbleScaleXAnim = ObjectAnimator.ofFloat(bubbleContainer, "scaleX", 0.3f, 1f)
+                val bubbleScaleYAnim = ObjectAnimator.ofFloat(bubbleContainer, "scaleY", 0.3f, 1f)
+                
+                bubbleAppearAnim.playTogether(bubbleAlphaAnim, bubbleScaleXAnim, bubbleScaleYAnim)
+                bubbleAppearAnim.duration = ANIMATION_DURATION_MEDIUM
+                bubbleAppearAnim.interpolator = OvershootInterpolator(1.2f)
+                
+                bubbleAppearAnim.addListener(object : AnimatorListenerAdapter() {
+                    override fun onAnimationEnd(animation: Animator) {
+                        onEnd?.invoke()
+                    }
+                })
+                
+                bubbleAppearAnim.start()
+            }
+        })
+        
+        collapseAnimSet.start()
+    }
+    
+    /**
+     * Animate expanding from bubble to expanded container with smooth transition
+     * This creates a gradual transition similar to collapse but in reverse
+     *
+     * @param bubbleContainer The bubble icon container
+     * @param urlBarContainer The URL bar container
+     * @param expandedContainer The expanded content container
+     * @param showUrlBar Whether to show the URL bar
+     * @param onEnd Callback when animation completes
+     */
+    fun animateExpandFromBubble(
+        bubbleContainer: View,
+        urlBarContainer: View,
+        expandedContainer: View,
+        showUrlBar: Boolean = true,
+        onEnd: (() -> Unit)? = null
+    ) {
+        // Position the expanded container and URL bar to overlap with the bubble initially
+        // This prevents the "narrow strip" effect where they appear below the bubble
+        expandedContainer.translationY = 0f
+        urlBarContainer.translationY = 0f
+
+        // Update the corner style of the expanded container based on URL bar visibility
+        if (expandedContainer is com.google.android.material.card.MaterialCardView) {
+            if (showUrlBar) {
+                // When URL bar is visible, use bottom rounded corners only
+                expandedContainer.shapeAppearanceModel = expandedContainer.shapeAppearanceModel.toBuilder()
+                    .setTopLeftCornerSize(0f)
+                    .setTopRightCornerSize(0f)
+                    .setBottomLeftCornerSize(16f)
+                    .setBottomRightCornerSize(16f)
+                    .build()
+            } else {
+                // When URL bar is hidden, use all rounded corners
+                expandedContainer.shapeAppearanceModel = expandedContainer.shapeAppearanceModel.toBuilder()
+                    .setAllCornerSizes(16f)
+                    .build()
+            }
+        }
+
+        // Phase 1: Start shrinking the bubble container while showing expanded elements
+        val bubbleCollapseAnim = AnimatorSet()
+        val bubbleAlphaAnim = ObjectAnimator.ofFloat(bubbleContainer, "alpha", 1f, 0f)
+        val bubbleScaleXAnim = ObjectAnimator.ofFloat(bubbleContainer, "scaleX", 1f, 0.3f)
+        val bubbleScaleYAnim = ObjectAnimator.ofFloat(bubbleContainer, "scaleY", 1f, 0.3f)
+
+        // Show expanded container immediately but keep it transparent and scaled down
+        expandedContainer.alpha = 0f
+        expandedContainer.scaleX = 0.3f
+        expandedContainer.scaleY = 0.3f
+        expandedContainer.visibility = View.VISIBLE
+
+        // Show URL bar based on setting but keep it transparent and scaled down
+        // Both URL bar and expanded container overlap with the bubble due to FrameLayout
+        urlBarContainer.alpha = 0f
+        urlBarContainer.scaleX = 0.3f
+        urlBarContainer.scaleY = 0.3f
+        urlBarContainer.visibility = if (showUrlBar) View.VISIBLE else View.GONE
+
+        bubbleCollapseAnim.playTogether(bubbleAlphaAnim, bubbleScaleXAnim, bubbleScaleYAnim)
+        bubbleCollapseAnim.duration = ANIMATION_DURATION_MEDIUM
+        bubbleCollapseAnim.interpolator = AccelerateInterpolator()
+
+        bubbleCollapseAnim.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                // Hide bubble container completely
+                bubbleContainer.visibility = View.GONE
+
+                // Reset bubble container properties for next time
+                bubbleContainer.scaleX = 1f
+                bubbleContainer.scaleY = 1f
+                bubbleContainer.alpha = 1f
+
+                // Phase 2: Scale up and fade in the expanded elements
+                val expandAnimSet = AnimatorSet()
+
+                // Animate expanded container
+                val expandAlphaAnim = ObjectAnimator.ofFloat(expandedContainer, "alpha", 0f, 1f)
+                val expandScaleXAnim = ObjectAnimator.ofFloat(expandedContainer, "scaleX", 0.3f, 1f)
+                val expandScaleYAnim = ObjectAnimator.ofFloat(expandedContainer, "scaleY", 0.3f, 1f)
+
+                // Create a list of all animators to play together
+                val allAnimators = mutableListOf<Animator>(
+                    expandAlphaAnim,
+                    expandScaleXAnim,
+                    expandScaleYAnim
+                )
+
+                // Animate URL bar if it's visible
+                if (showUrlBar) {
+                    val urlBarAlphaAnim = ObjectAnimator.ofFloat(urlBarContainer, "alpha", 0f, 1f)
+                    val urlBarScaleXAnim = ObjectAnimator.ofFloat(urlBarContainer, "scaleX", 0.3f, 1f)
+                    val urlBarScaleYAnim = ObjectAnimator.ofFloat(urlBarContainer, "scaleY", 0.3f, 1f)
+                    
+                    // Add URL bar animators to the list
+                    allAnimators.addAll(listOf(urlBarAlphaAnim, urlBarScaleXAnim, urlBarScaleYAnim))
+                }
+
+                expandAnimSet.playTogether(allAnimators)
+                expandAnimSet.duration = ANIMATION_DURATION_MEDIUM
+                expandAnimSet.interpolator = OvershootInterpolator(1.1f)
+
+                expandAnimSet.addListener(object : AnimatorListenerAdapter() {
+                    override fun onAnimationEnd(animation: Animator) {
+                        // Reset expanded container properties
+                        expandedContainer.scaleX = 1f
+                        expandedContainer.scaleY = 1f
+                        expandedContainer.alpha = 1f
+
+                        // Reset URL bar properties if visible
+                        if (showUrlBar) {
+                            urlBarContainer.scaleX = 1f
+                            urlBarContainer.scaleY = 1f
+                            urlBarContainer.alpha = 1f
+                        }
+
+                        onEnd?.invoke()
+                    }
+                })
+
+                expandAnimSet.start()
+            }
+        })
+
+        bubbleCollapseAnim.start()
+    }
+    
+    /**
+     * Animate bubble appearing with a scale up effect
+     */
+    fun animateAppear(view: View, onEnd: (() -> Unit)? = null) {
+        view.alpha = 0f
+        view.scaleX = 0f
+        view.scaleY = 0f
+        
+        val animSet = AnimatorSet()
+        val alphaAnim = ObjectAnimator.ofFloat(view, "alpha", 0f, 1f)
+        val scaleXAnim = ObjectAnimator.ofFloat(view, "scaleX", 0f, 1f)
+        val scaleYAnim = ObjectAnimator.ofFloat(view, "scaleY", 0f, 1f)
+        
+        animSet.playTogether(alphaAnim, scaleXAnim, scaleYAnim)
+        animSet.duration = ANIMATION_DURATION_LONG
+        animSet.interpolator = BounceInterpolator()
+        
+        animSet.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                onEnd?.invoke()
+            }
+        })
+        
+        animSet.start()
+    }
+    
+    /**
+     * Animate bubble disappearing with a scale down effect
+     */
+    fun animateDisappear(view: View, onEnd: (() -> Unit)? = null) {
+        val animSet = AnimatorSet()
+        val alphaAnim = ObjectAnimator.ofFloat(view, "alpha", 1f, 0f)
+        val scaleXAnim = ObjectAnimator.ofFloat(view, "scaleX", 1f, 0f)
+        val scaleYAnim = ObjectAnimator.ofFloat(view, "scaleY", 1f, 0f)
+        
+        animSet.playTogether(alphaAnim, scaleXAnim, scaleYAnim)
+        animSet.duration = ANIMATION_DURATION_MEDIUM
+        animSet.interpolator = AccelerateInterpolator()
+        
+        animSet.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                onEnd?.invoke()
+            }
+        })
+        
+        animSet.start()
+    }
+    
+    /**
+     * Animate a bounce effect on a view
+     * @param isExpand true for expansion bounce, false for collapse
+     * @param onEnd callback to execute when animation completes
+     */
+    fun animateBounce(view: View, isExpand: Boolean, onEnd: (() -> Unit)? = null) {
+        // Use a more moderate scale to prevent clipping
+        val fromScale = if (isExpand) 1f else 1.05f
+        val toScale = if (isExpand) 1.05f else 1f
+        
+        val animSet = AnimatorSet()
+        val scaleXAnim = ObjectAnimator.ofFloat(view, "scaleX", fromScale, toScale)
+        val scaleYAnim = ObjectAnimator.ofFloat(view, "scaleY", fromScale, toScale)
+        
+        animSet.playTogether(scaleXAnim, scaleYAnim)
+        animSet.duration = ANIMATION_DURATION_SHORT
+        animSet.interpolator = if (isExpand) OvershootInterpolator(1.5f) else DecelerateInterpolator()
+        
+        // Animate back to original size after the bounce
+        animSet.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                if (isExpand) {
+                    val returnAnim = AnimatorSet()
+                    val returnScaleXAnim = ObjectAnimator.ofFloat(view, "scaleX", toScale, 1f)
+                    val returnScaleYAnim = ObjectAnimator.ofFloat(view, "scaleY", toScale, 1f)
+                    
+                    returnAnim.playTogether(returnScaleXAnim, returnScaleYAnim)
+                    returnAnim.duration = ANIMATION_DURATION_SHORT
+                    returnAnim.interpolator = DecelerateInterpolator()
+                    returnAnim.addListener(object : AnimatorListenerAdapter() {
+                        override fun onAnimationEnd(animation: Animator) {
+                            onEnd?.invoke()
+                        }
+                    })
+                    returnAnim.start()
+                } else {
+                    onEnd?.invoke()
+                }
+            }
+        })
+        
+        animSet.start()
+    }
+    
+    /**
+     * Animate a pulse effect (grow and shrink) on a view
+     * @param repeatCount number of times to repeat the pulse, -1 for infinite
+     */
+    fun animatePulse(view: View, repeatCount: Int = 1) {
+        val scaleXAnim = ObjectAnimator.ofFloat(view, "scaleX", 1f, 1.2f, 1f)
+        val scaleYAnim = ObjectAnimator.ofFloat(view, "scaleY", 1f, 1.2f, 1f)
+        
+        val animSet = AnimatorSet()
+        animSet.playTogether(scaleXAnim, scaleYAnim)
+        animSet.duration = ANIMATION_DURATION_MEDIUM
+        animSet.interpolator = AccelerateDecelerateInterpolator()
+        
+        if (repeatCount != 0) {
+            scaleXAnim.repeatCount = repeatCount
+            scaleYAnim.repeatCount = repeatCount
+        }
+        
+        animSet.start()
+    }
+    
+    /**
+     * Animate a view moving from one position to another
+     */
+    fun animateMove(view: View, fromX: Float, fromY: Float, toX: Float, toY: Float, onEnd: (() -> Unit)? = null) {
+        view.translationX = fromX
+        view.translationY = fromY
+        
+        val translateXAnim = ObjectAnimator.ofFloat(view, "translationX", fromX, toX)
+        val translateYAnim = ObjectAnimator.ofFloat(view, "translationY", fromY, toY)
+        
+        val animSet = AnimatorSet()
+        animSet.playTogether(translateXAnim, translateYAnim)
+        animSet.duration = ANIMATION_DURATION_MEDIUM
+        animSet.interpolator = DecelerateInterpolator()
+        
+        animSet.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                onEnd?.invoke()
+            }
+        })
+        
+        animSet.start()
+    }
+    
+    /**
+     * Animate a view shaking (for error feedback)
+     */
+    fun animateShake(view: View) {
+        val animator = ObjectAnimator.ofFloat(view, "translationX", 0f, 25f, -25f, 25f, -25f, 15f, -15f, 6f, -6f, 0f)
+        animator.duration = ANIMATION_DURATION_MEDIUM
+        animator.interpolator = AccelerateDecelerateInterpolator()
+        animator.start()
+    }
+    
+    /**
+     * Animate a tab being added to the tab list
+     */
+    fun animateTabAdded(view: View) {
+        view.alpha = 0f
+        view.translationY = -50f
+        
+        val animSet = AnimatorSet()
+        val alphaAnim = ObjectAnimator.ofFloat(view, "alpha", 0f, 1f)
+        val translateAnim = ObjectAnimator.ofFloat(view, "translationY", -50f, 0f)
+        
+        animSet.playTogether(alphaAnim, translateAnim)
+        animSet.duration = ANIMATION_DURATION_MEDIUM
+        animSet.interpolator = DecelerateInterpolator()
+        animSet.start()
+    }
+    
+    /**
+     * Animate a tab being removed from the tab list
+     */
+    fun animateTabRemoved(view: View, onEnd: (() -> Unit)? = null) {
+        val animSet = AnimatorSet()
+        val alphaAnim = ObjectAnimator.ofFloat(view, "alpha", 1f, 0f)
+        val translateAnim = ObjectAnimator.ofFloat(view, "translationX", 0f, view.width.toFloat())
+        
+        animSet.playTogether(alphaAnim, translateAnim)
+        animSet.duration = ANIMATION_DURATION_MEDIUM
+        animSet.interpolator = AccelerateInterpolator()
+        
+        animSet.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                onEnd?.invoke()
+            }
+        })
+        
+        animSet.start()
+    }
+    
+    /**
+     * Animate expanded bubble closing with graceful scale-down effect
+     * This provides visual feedback that the bubble was intentionally closed, not crashed
+     */
+    fun animateExpandedBubbleClose(
+        urlBarContainer: View,
+        expandedContainer: View,
+        bubbleContainer: View,
+        onEnd: (() -> Unit)? = null
+    ) {
+        // Reset the corner style of the expanded container to default (bottom rounded corners)
+        if (expandedContainer is com.google.android.material.card.MaterialCardView) {
+            expandedContainer.shapeAppearanceModel = expandedContainer.shapeAppearanceModel.toBuilder()
+                .setTopLeftCornerSize(0f)
+                .setTopRightCornerSize(0f)
+                .setBottomLeftCornerSize(16f)
+                .setBottomRightCornerSize(16f)
+                .build()
+        }
+
+        // Create simultaneous animations for both URL bar and expanded container
+        val urlBarAnimSet = AnimatorSet()
+        val urlBarAlphaAnim = ObjectAnimator.ofFloat(urlBarContainer, "alpha", 1f, 0f)
+        val urlBarScaleXAnim = ObjectAnimator.ofFloat(urlBarContainer, "scaleX", 1f, 0f)
+        val urlBarScaleYAnim = ObjectAnimator.ofFloat(urlBarContainer, "scaleY", 1f, 0f)
+        
+        urlBarAnimSet.playTogether(urlBarAlphaAnim, urlBarScaleXAnim, urlBarScaleYAnim)
+        urlBarAnimSet.duration = ANIMATION_DURATION_MEDIUM
+        urlBarAnimSet.interpolator = AccelerateInterpolator()
+        
+        val expandedAnimSet = AnimatorSet()
+        val expandedAlphaAnim = ObjectAnimator.ofFloat(expandedContainer, "alpha", 1f, 0f)
+        val expandedScaleXAnim = ObjectAnimator.ofFloat(expandedContainer, "scaleX", 1f, 0f)
+        val expandedScaleYAnim = ObjectAnimator.ofFloat(expandedContainer, "scaleY", 1f, 0f)
+        
+        expandedAnimSet.playTogether(expandedAlphaAnim, expandedScaleXAnim, expandedScaleYAnim)
+        expandedAnimSet.duration = ANIMATION_DURATION_MEDIUM
+        expandedAnimSet.interpolator = AccelerateInterpolator()
+        
+        // Start both animations simultaneously
+        val masterAnimSet = AnimatorSet()
+        masterAnimSet.playTogether(urlBarAnimSet, expandedAnimSet)
+        
+        masterAnimSet.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                // Hide the containers after animation completes
+                urlBarContainer.visibility = View.GONE
+                expandedContainer.visibility = View.GONE
+                bubbleContainer.visibility = View.INVISIBLE
+                
+                // Reset properties for potential future use
+                urlBarContainer.alpha = 1f
+                urlBarContainer.scaleX = 1f
+                urlBarContainer.scaleY = 1f
+                expandedContainer.alpha = 1f
+                expandedContainer.scaleX = 1f
+                expandedContainer.scaleY = 1f
+                
+                onEnd?.invoke()
+            }
+        })
+        
+        masterAnimSet.start()
+    }
+    
+    // ======================================
+    // Settings Panel Animations
+    // ======================================
+    
+    /**
+     * Animate settings panel showing with dropdown effect from toolbar
+     * 
+     * @param panel The settings panel view to animate
+     * @param fromButton Optional button that triggered the panel (for positioning)
+     * @param onEnd Callback to invoke when animation completes
+     */
+    fun animateSettingsPanelShow(panel: View, fromButton: View? = null, onEnd: (() -> Unit)? = null) {
+        // Set initial state
+        panel.alpha = 0f
+        panel.scaleX = 0.8f
+        panel.scaleY = 0.8f
+        panel.translationY = 30f // Start slightly below final position
+        panel.visibility = View.VISIBLE
+        
+        // Set pivot point to bottom center for upward expansion
+        panel.pivotX = panel.width / 2f
+        panel.pivotY = panel.height.toFloat()
+        
+        val animSet = AnimatorSet()
+        val alphaAnim = ObjectAnimator.ofFloat(panel, "alpha", 0f, 1f)
+        val scaleXAnim = ObjectAnimator.ofFloat(panel, "scaleX", 0.8f, 1f)
+        val scaleYAnim = ObjectAnimator.ofFloat(panel, "scaleY", 0.8f, 1f)
+        val translateYAnim = ObjectAnimator.ofFloat(panel, "translationY", 30f, 0f)
+        
+        animSet.playTogether(alphaAnim, scaleXAnim, scaleYAnim, translateYAnim)
+        animSet.duration = ANIMATION_DURATION_MEDIUM
+        animSet.interpolator = OvershootInterpolator(1.1f)
+        
+        animSet.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                onEnd?.invoke()
+            }
+        })
+        
+        animSet.start()
+    }
+    
+    /**
+     * Animate settings panel hiding with upward collapse effect
+     * 
+     * @param panel The settings panel view to animate
+     * @param onEnd Callback to invoke when animation completes
+     */
+    fun animateSettingsPanelHide(panel: View, onEnd: (() -> Unit)? = null) {
+        // Set pivot to bottom center for upward collapse
+        panel.pivotX = panel.width / 2f
+        panel.pivotY = panel.height.toFloat()
+        
+        val animSet = AnimatorSet()
+        val alphaAnim = ObjectAnimator.ofFloat(panel, "alpha", 1f, 0f)
+        val scaleXAnim = ObjectAnimator.ofFloat(panel, "scaleX", 1f, 0.8f)
+        val scaleYAnim = ObjectAnimator.ofFloat(panel, "scaleY", 1f, 0.8f)
+        val translateYAnim = ObjectAnimator.ofFloat(panel, "translationY", 0f, 30f)
+        
+        animSet.playTogether(alphaAnim, scaleXAnim, scaleYAnim, translateYAnim)
+        animSet.duration = ANIMATION_DURATION_SHORT
+        animSet.interpolator = AccelerateInterpolator()
+        
+        animSet.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                panel.visibility = View.GONE
+                // Reset properties for next time
+                panel.translationY = 0f
+                panel.scaleX = 1f
+                panel.scaleY = 1f
+                panel.alpha = 1f
+                onEnd?.invoke()
+            }
+        })
+        
+        animSet.start()
+    }
+    
+    // ======================================
+    // Mode Transition Animations
+    // ======================================
+    
+    /**
+     * Animate transition to read mode with content fade effect
+     * 
+     * @param webView The web view to fade out
+     * @param readModeContainer The read mode container to fade in
+     * @param onEnd Callback to invoke when animation completes
+     */
+    fun animateToReadMode(webView: View, readModeContainer: View, onEnd: (() -> Unit)? = null) {
+        // Prepare read mode container
+        readModeContainer.alpha = 0f
+        readModeContainer.translationY = 50f
+        readModeContainer.visibility = View.VISIBLE
+        
+        // Phase 1: Fade out web view
+        val webViewFadeOut = ObjectAnimator.ofFloat(webView, "alpha", 1f, 0f)
+        webViewFadeOut.duration = ANIMATION_DURATION_SHORT
+        webViewFadeOut.interpolator = AccelerateInterpolator()
+        
+        webViewFadeOut.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                webView.visibility = View.GONE
+                
+                // Phase 2: Fade in read mode container
+                val readModeAnimSet = AnimatorSet()
+                val alphaAnim = ObjectAnimator.ofFloat(readModeContainer, "alpha", 0f, 1f)
+                val translateYAnim = ObjectAnimator.ofFloat(readModeContainer, "translationY", 50f, 0f)
+                
+                readModeAnimSet.playTogether(alphaAnim, translateYAnim)
+                readModeAnimSet.duration = ANIMATION_DURATION_MEDIUM
+                readModeAnimSet.interpolator = DecelerateInterpolator()
+                
+                readModeAnimSet.addListener(object : AnimatorListenerAdapter() {
+                    override fun onAnimationEnd(animation: Animator) {
+                        onEnd?.invoke()
+                    }
+                })
+                
+                readModeAnimSet.start()
+            }
+        })
+        
+        webViewFadeOut.start()
+    }
+    
+    /**
+     * Animate transition from read mode back to web view
+     * 
+     * @param readModeContainer The read mode container to fade out
+     * @param webView The web view to fade in
+     * @param onEnd Callback to invoke when animation completes
+     */
+    fun animateFromReadMode(readModeContainer: View, webView: View, onEnd: (() -> Unit)? = null) {
+        // Phase 1: Fade out read mode container
+        val readModeFadeOut = AnimatorSet()
+        val alphaAnim = ObjectAnimator.ofFloat(readModeContainer, "alpha", 1f, 0f)
+        val translateYAnim = ObjectAnimator.ofFloat(readModeContainer, "translationY", 0f, -50f)
+        
+        readModeFadeOut.playTogether(alphaAnim, translateYAnim)
+        readModeFadeOut.duration = ANIMATION_DURATION_SHORT
+        readModeFadeOut.interpolator = AccelerateInterpolator()
+        
+        readModeFadeOut.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                readModeContainer.visibility = View.GONE
+                readModeContainer.translationY = 0f
+                
+                // Phase 2: Fade in web view
+                webView.alpha = 0f
+                webView.visibility = View.VISIBLE
+                
+                val webViewFadeIn = ObjectAnimator.ofFloat(webView, "alpha", 0f, 1f)
+                webViewFadeIn.duration = ANIMATION_DURATION_MEDIUM
+                webViewFadeIn.interpolator = DecelerateInterpolator()
+                
+                webViewFadeIn.addListener(object : AnimatorListenerAdapter() {
+                    override fun onAnimationEnd(animation: Animator) {
+                        onEnd?.invoke()
+                    }
+                })
+                
+                webViewFadeIn.start()
+            }
+        })
+        
+        readModeFadeOut.start()
+    }
+    
+    /**
+     * Animate transition to summary mode with slide effect  
+     * 
+     * @param webView The web view to slide out
+     * @param summaryContainer The summary container to slide in
+     * @param onEnd Callback to invoke when animation completes
+     */
+    fun animateToSummaryMode(webView: View, summaryContainer: View, onEnd: (() -> Unit)? = null) {
+        // Prepare summary container
+        summaryContainer.alpha = 0f
+        summaryContainer.translationX = webView.width.toFloat()
+        summaryContainer.visibility = View.VISIBLE
+        
+        // Create simultaneous slide animations
+        val animSet = AnimatorSet()
+        
+        // Web view slides out to the left
+        val webViewSlideOut = ObjectAnimator.ofFloat(webView, "translationX", 0f, -webView.width.toFloat())
+        val webViewFadeOut = ObjectAnimator.ofFloat(webView, "alpha", 1f, 0.5f)
+        
+        // Summary container slides in from the right
+        val summarySlideIn = ObjectAnimator.ofFloat(summaryContainer, "translationX", webView.width.toFloat(), 0f)
+        val summaryFadeIn = ObjectAnimator.ofFloat(summaryContainer, "alpha", 0f, 1f)
+        
+        animSet.playTogether(webViewSlideOut, webViewFadeOut, summarySlideIn, summaryFadeIn)
+        animSet.duration = ANIMATION_DURATION_MEDIUM
+        animSet.interpolator = DecelerateInterpolator()
+        
+        animSet.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                webView.visibility = View.GONE
+                webView.translationX = 0f
+                webView.alpha = 1f
+                onEnd?.invoke()
+            }
+        })
+        
+        animSet.start()
+    }
+    
+    /**
+     * Animate transition from summary mode back to web view
+     * 
+     * @param summaryContainer The summary container to slide out
+     * @param webView The web view to slide in
+     * @param onEnd Callback to invoke when animation completes
+     */
+    fun animateFromSummaryMode(summaryContainer: View, webView: View, onEnd: (() -> Unit)? = null) {
+        // Prepare web view
+        webView.alpha = 0.5f
+        webView.translationX = -webView.width.toFloat()
+        webView.visibility = View.VISIBLE
+        
+        // Create simultaneous slide animations
+        val animSet = AnimatorSet()
+        
+        // Summary container slides out to the right
+        val summarySlideOut = ObjectAnimator.ofFloat(summaryContainer, "translationX", 0f, summaryContainer.width.toFloat())
+        val summaryFadeOut = ObjectAnimator.ofFloat(summaryContainer, "alpha", 1f, 0f)
+        
+        // Web view slides in from the left
+        val webViewSlideIn = ObjectAnimator.ofFloat(webView, "translationX", -webView.width.toFloat(), 0f)
+        val webViewFadeIn = ObjectAnimator.ofFloat(webView, "alpha", 0.5f, 1f)
+        
+        animSet.playTogether(summarySlideOut, summaryFadeOut, webViewSlideIn, webViewFadeIn)
+        animSet.duration = ANIMATION_DURATION_MEDIUM
+        animSet.interpolator = DecelerateInterpolator()
+        
+        animSet.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                summaryContainer.visibility = View.GONE
+                summaryContainer.translationX = 0f
+                summaryContainer.alpha = 1f
+                onEnd?.invoke()
+            }
+        })
+        
+        animSet.start()
+    }
+    
+    // ======================================
+    // Resize Animations
+    // ======================================
+    
+    /**
+     * Animate bubble container resizing with smooth scaling
+     * 
+     * @param container The container to resize
+     * @param fromWidth Starting width
+     * @param fromHeight Starting height
+     * @param toWidth Target width
+     * @param toHeight Target height
+     * @param onEnd Callback to invoke when animation completes
+     */
+    fun animateResize(
+        container: View, 
+        fromWidth: Int, 
+        fromHeight: Int, 
+        toWidth: Int, 
+        toHeight: Int,
+        onEnd: (() -> Unit)? = null
+    ) {
+        val widthAnimator = ValueAnimator.ofInt(fromWidth, toWidth)
+        val heightAnimator = ValueAnimator.ofInt(fromHeight, toHeight)
+        
+        val animSet = AnimatorSet()
+        animSet.playTogether(widthAnimator, heightAnimator)
+        animSet.duration = ANIMATION_DURATION_MEDIUM
+        animSet.interpolator = DecelerateInterpolator()
+        
+        widthAnimator.addUpdateListener { animator ->
+            val animatedWidth = animator.animatedValue as Int
+            val layoutParams = container.layoutParams
+            layoutParams.width = animatedWidth
+            container.layoutParams = layoutParams
+        }
+        
+        heightAnimator.addUpdateListener { animator ->
+            val animatedHeight = animator.animatedValue as Int
+            val layoutParams = container.layoutParams
+            layoutParams.height = animatedHeight
+            container.layoutParams = layoutParams
+        }
+        
+        animSet.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                onEnd?.invoke()
+            }
+        })
+        
+        animSet.start()
+    }
+    
+    /**
+     * Animate resize handles appearing with scale effect
+     * 
+     * @param handles List of resize handle views to animate
+     * @param onEnd Callback to invoke when animation completes
+     */
+    fun animateResizeHandlesShow(handles: List<View>, onEnd: (() -> Unit)? = null) {
+        val animators = mutableListOf<Animator>()
+        
+        handles.forEachIndexed { index, handle ->
+            // Stagger the animations slightly
+            val delay = index * 50L
+            
+            handle.alpha = 0f
+            handle.scaleX = 0f
+            handle.scaleY = 0f
+            handle.visibility = View.VISIBLE
+            
+            val animSet = AnimatorSet()
+            val alphaAnim = ObjectAnimator.ofFloat(handle, "alpha", 0f, 1f)
+            val scaleXAnim = ObjectAnimator.ofFloat(handle, "scaleX", 0f, 1f)
+            val scaleYAnim = ObjectAnimator.ofFloat(handle, "scaleY", 0f, 1f)
+            
+            animSet.playTogether(alphaAnim, scaleXAnim, scaleYAnim)
+            animSet.duration = ANIMATION_DURATION_SHORT
+            animSet.startDelay = delay
+            animSet.interpolator = OvershootInterpolator(1.2f)
+            
+            animators.add(animSet)
+        }
+        
+        // Start all animations
+        animators.forEach { it.start() }
+        
+        // Call onEnd after the last animation completes
+        animators.lastOrNull()?.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                onEnd?.invoke()
+            }
+        })
+    }
+    
+    /**
+     * Animate resize handles hiding with scale effect
+     * 
+     * @param handles List of resize handle views to animate
+     * @param onEnd Callback to invoke when animation completes
+     */
+    fun animateResizeHandlesHide(handles: List<View>, onEnd: (() -> Unit)? = null) {
+        val animators = mutableListOf<Animator>()
+        
+        handles.forEachIndexed { index, handle ->
+            // Stagger the animations slightly
+            val delay = index * 30L
+            
+            val animSet = AnimatorSet()
+            val alphaAnim = ObjectAnimator.ofFloat(handle, "alpha", 1f, 0f)
+            val scaleXAnim = ObjectAnimator.ofFloat(handle, "scaleX", 1f, 0f)
+            val scaleYAnim = ObjectAnimator.ofFloat(handle, "scaleY", 1f, 0f)
+            
+            animSet.playTogether(alphaAnim, scaleXAnim, scaleYAnim)
+            animSet.duration = ANIMATION_DURATION_SHORT
+            animSet.startDelay = delay
+            animSet.interpolator = AccelerateInterpolator()
+            
+            animSet.addListener(object : AnimatorListenerAdapter() {
+                override fun onAnimationEnd(animation: Animator) {
+                    handle.visibility = View.GONE
+                    // Reset properties for next time
+                    handle.alpha = 1f
+                    handle.scaleX = 1f
+                    handle.scaleY = 1f
+                }
+            })
+            
+            animators.add(animSet)
+        }
+        
+        // Start all animations
+        animators.forEach { it.start() }
+        
+        // Call onEnd after the last animation completes
+        animators.lastOrNull()?.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                onEnd?.invoke()
+            }
+        })
+    }
+    
+    /**
+     * Animate toolbar sliding in/out based on scroll direction
+     * 
+     * @param toolbar The toolbar view to animate
+     * @param show Whether to show (true) or hide (false) the toolbar
+     * @param onEnd Callback to invoke when animation completes
+     */
+    fun animateToolbarSlide(toolbar: View, show: Boolean, onEnd: (() -> Unit)? = null) {
+        val targetTranslationY = if (show) 0f else toolbar.height.toFloat()
+        
+        val animator = ObjectAnimator.ofFloat(toolbar, "translationY", toolbar.translationY, targetTranslationY)
+        animator.duration = ANIMATION_DURATION_MEDIUM
+        animator.interpolator = if (show) DecelerateInterpolator() else AccelerateInterpolator()
+        
+        animator.addListener(object : AnimatorListenerAdapter() {
+            override fun onAnimationEnd(animation: Animator) {
+                // Ensure toolbar is fully visible or hidden
+                if (!show) {
+                    toolbar.visibility = View.GONE
+                } else {
+                    toolbar.visibility = View.VISIBLE
+                }
+                onEnd?.invoke()
+            }
+        })
+        
+        // Make sure toolbar is visible before starting show animation
+        if (show) {
+            toolbar.visibility = View.VISIBLE
+        }
+        
+        animator.start()
+    }
+    
+    // ======================================
+    // Progress and Loading Animations
+    // ======================================
+    
+    /**
+     * Animate progress indicator with pulsing effect
+     * 
+     * @param progressView The progress view to animate
+     * @param show Whether to show or hide the progress
+     * @param onEnd Callback to invoke when animation completes
+     */
+    fun animateProgressIndicator(progressView: View, show: Boolean, onEnd: (() -> Unit)? = null) {
+        if (show) {
+            progressView.alpha = 0f
+            progressView.scaleX = 0.5f
+            progressView.scaleY = 0.5f
+            progressView.visibility = View.VISIBLE
+            
+            val animSet = AnimatorSet()
+            val alphaAnim = ObjectAnimator.ofFloat(progressView, "alpha", 0f, 1f)
+            val scaleXAnim = ObjectAnimator.ofFloat(progressView, "scaleX", 0.5f, 1f)
+            val scaleYAnim = ObjectAnimator.ofFloat(progressView, "scaleY", 0.5f, 1f)
+            
+            animSet.playTogether(alphaAnim, scaleXAnim, scaleYAnim)
+            animSet.duration = ANIMATION_DURATION_SHORT
+            animSet.interpolator = DecelerateInterpolator()
+            
+            animSet.addListener(object : AnimatorListenerAdapter() {
+                override fun onAnimationEnd(animation: Animator) {
+                    onEnd?.invoke()
+                }
+            })
+            
+            animSet.start()
+        } else {
+            val animSet = AnimatorSet()
+            val alphaAnim = ObjectAnimator.ofFloat(progressView, "alpha", 1f, 0f)
+            val scaleXAnim = ObjectAnimator.ofFloat(progressView, "scaleX", 1f, 0.5f)
+            val scaleYAnim = ObjectAnimator.ofFloat(progressView, "scaleY", 1f, 0.5f)
+            
+            animSet.playTogether(alphaAnim, scaleXAnim, scaleYAnim)
+            animSet.duration = ANIMATION_DURATION_SHORT
+            animSet.interpolator = AccelerateInterpolator()
+            
+            animSet.addListener(object : AnimatorListenerAdapter() {
+                override fun onAnimationEnd(animation: Animator) {
+                    progressView.visibility = View.GONE
+                    // Reset properties
+                    progressView.alpha = 1f
+                    progressView.scaleX = 1f
+                    progressView.scaleY = 1f
+                    onEnd?.invoke()
+                }
+            })
+            
+            animSet.start()
+        }
+    }
+    
+    /**
+     * Animate content loading with skeleton effect
+     * 
+     * @param containerView The container view to show loading effect in
+     * @param show Whether to show or hide loading effect
+     * @param onEnd Callback to invoke when animation completes
+     */
+    fun animateContentLoading(containerView: View, show: Boolean, onEnd: (() -> Unit)? = null) {
+        if (show) {
+            // Create shimmer/pulse effect
+            val animator = ObjectAnimator.ofFloat(containerView, "alpha", 1f, 0.3f, 1f)
+            animator.duration = ANIMATION_DURATION_LONG
+            animator.repeatCount = ValueAnimator.INFINITE
+            animator.interpolator = AccelerateDecelerateInterpolator()
+            animator.start()
+            
+            containerView.tag = animator // Store animator reference for later cancellation
+        } else {
+            // Cancel existing animation if any
+            (containerView.tag as? ObjectAnimator)?.cancel()
+            containerView.tag = null
+            
+            // Fade to full opacity
+            val animator = ObjectAnimator.ofFloat(containerView, "alpha", containerView.alpha, 1f)
+            animator.duration = ANIMATION_DURATION_SHORT
+            animator.interpolator = DecelerateInterpolator()
+            
+            animator.addListener(object : AnimatorListenerAdapter() {
+                override fun onAnimationEnd(animation: Animator) {
+                    onEnd?.invoke()
+                }
+            })
+            
+            animator.start()
+        }
+    }
+    
+    companion object {
+        const val ANIMATION_DURATION_SHORT = 150L
+        const val ANIMATION_DURATION_MEDIUM = 300L
+        const val ANIMATION_DURATION_LONG = 500L
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleIntentProcessor.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleIntentProcessor.kt
new file mode 100644
index 0000000..b5a6779
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleIntentProcessor.kt
@@ -0,0 +1,479 @@
+package com.quick.browser.presentation.ui.browser
+
+import android.content.Context
+import android.content.Intent
+import androidx.lifecycle.LifecycleCoroutineScope
+import com.quick.browser.domain.model.WebPage
+import com.quick.browser.domain.repository.HistoryRepository
+import com.quick.browser.service.AuthenticationService
+import com.quick.browser.service.BubbleService
+import com.quick.browser.utils.Constants
+import com.quick.browser.utils.Logger
+import com.quick.browser.utils.UrlUtils
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.withContext
+import org.jsoup.Jsoup
+import org.jsoup.nodes.Document
+import org.jsoup.nodes.Element
+import java.net.URI
+import java.util.*
+
+/**
+ * BubbleIntentProcessor handles the processing of intents received by the BubbleService. It
+ * extracts URLs from various types of sharing intents and processes them accordingly.
+ */
+class BubbleIntentProcessor(
+        private val context: Context,
+        private val bubbleService: BubbleService,
+        private val historyRepository: HistoryRepository,
+        private val lifecycleScope: LifecycleCoroutineScope
+) {
+    companion object {
+        private const val TAG = "BubbleIntentProcessor"
+    }
+    
+    fun processIntent(intent: Intent) {
+        runCatching {
+            Logger.d(TAG, "processIntent | Received intent: ${intent.action}, data: ${intent.extras}")
+            when (intent.action) {
+                Constants.ACTION_CREATE_BUBBLE -> handleCreateBubble(intent)
+                Constants.ACTION_OPEN_URL -> handleOpenUrl(intent)
+                Constants.ACTION_CLOSE_BUBBLE -> handleCloseBubble(intent)
+                Constants.ACTION_TOGGLE_BUBBLES -> handleToggleBubbles()
+                Constants.ACTION_ACTIVATE_BUBBLE -> handleActivateBubble(intent)
+                Intent.ACTION_SEND -> handleSharedContent(intent)
+                Intent.ACTION_VIEW -> handleViewAction(intent)
+                else -> Logger.w(TAG, "Unsupported intent action: ${intent.action}")
+            }
+        }.onFailure { 
+            Logger.e(TAG, "Error processing intent: ${it.message}")
+        }
+    }
+
+    private fun handleCreateBubble(intent: Intent) {
+        val sharedUrl = intent.getStringExtra(Constants.EXTRA_URL)
+        val url = sharedUrl?.let { text -> UrlUtils.extractUrl(text) ?: text}
+        Logger.d(TAG, "handleCreateBubble | Received intent: ${intent.action}, sharedURL: $url")
+        
+        if (url != null && UrlUtils.isValidUrl(url)) {
+            Logger.d(TAG, "Creating bubble with URL: $url")
+            
+            // Check if this is an authentication URL that should be handled with Custom Tabs
+            if (AuthenticationService.isAuthenticationUrl(url)) {
+                Logger.d(TAG, "Authentication URL detected, opening in Custom Tab: $url")
+                // Generate a bubble ID for this URL to track it when returning from authentication
+                val authBubbleId = UUID.randomUUID().toString()
+                AuthenticationService.openInCustomTab(context, url, authBubbleId)
+                return
+            }
+            
+            // Save to history
+            saveToHistory(url)
+            
+            // Create a new bubble with the shared URL
+            bubbleService.createOrUpdateBubbleWithNewUrl(url, null)
+        } else {
+            Logger.e(TAG, "No valid URL provided.")
+        }
+    }
+    
+    private fun saveToHistory(url: String) {
+        lifecycleScope.launch {
+            try {
+                Logger.d(TAG, "saveToHistory | URL: $url")
+                
+                // Check if page already exists
+                val existingPage = historyRepository.getPageByUrl(url)
+                if (existingPage != null) {
+                    Logger.d(TAG, "Page already exists in history, incrementing visit count: $url")
+                    // Increment visit count for existing page
+                    historyRepository.incrementVisitCount(url)
+                } else {
+                    Logger.d(TAG, "Adding new page to history: $url")
+                    // Extract title, preview image, and favicon from HTML
+                    var title: String? = null
+                    var previewImageUrl: String? = null
+                    var faviconUrl: String? = null
+
+                    try {
+                        Logger.d(TAG, "Attempting to fetch document for URL: $url")
+                        val document = fetchDocument(url) // Helper to fetch Jsoup document
+                        if (document != null) {
+                            Logger.d(TAG, "Successfully fetched document for URL: $url")
+                            title = extractTitleFromDocument(document)
+                            previewImageUrl = extractPreviewImageUrlFromDocument(document)
+                            faviconUrl = extractFaviconUrlFromDocument(document, url)
+                            Logger.d(TAG, "Extracted data - Title: $title, Preview Image: $previewImageUrl, Favicon: $faviconUrl")
+                        } else {
+                            Logger.d(TAG, "Document fetch returned null for URL: $url")
+                        }
+                    } catch (e: Exception) {
+                        Logger.e(TAG, "Error extracting data from HTML for $url", e)
+                    }
+
+                    // Fallback title if HTML extraction fails
+                    val finalTitle = title ?: extractTitleFromUrl(url)
+
+                    val newPage = WebPage(
+                        url = url,
+                        title = finalTitle,
+                        timestamp = System.currentTimeMillis(),
+                        visitCount = 1,
+                        faviconUrl = faviconUrl,
+                        previewImageUrl = previewImageUrl
+                    )
+                    historyRepository.savePage(newPage)
+                    Logger.d(TAG, "Added new page to history with title '$finalTitle', preview URL: $previewImageUrl, favicon URL: $faviconUrl: $url")
+                }
+            } catch (e: Exception) {
+                Logger.e(TAG, "Error saving to history for $url", e)
+            }
+        }
+    }
+    
+    /**
+     * Process a URL if it's valid, handling common operations
+     * @param url The URL to process
+     * @param handler The function to call with the valid URL
+     */
+    private fun processValidUrl(url: String?, handler: (String) -> Unit) {
+        if (url != null && UrlUtils.isValidUrl(url)) {
+            // Check if this is an authentication URL that should be handled with Custom Tabs
+            if (AuthenticationService.isAuthenticationUrl(url)) {
+                Logger.d(TAG, "Authentication URL detected, opening in Custom Tab: $url")
+                // Generate a bubble ID for this URL to track it when returning from authentication
+                val authBubbleId = UUID.randomUUID().toString()
+                AuthenticationService.openInCustomTab(context, url, authBubbleId)
+                return
+            }
+            
+            saveToHistory(url)
+            handler(url)
+        } else {
+            Logger.w(TAG, "Invalid or missing URL for handleSharedContent")
+        }
+    }
+    
+    private fun handleOpenUrl(intent: Intent) {
+        val url = intent.getStringExtra(Constants.EXTRA_URL)
+        val bubbleId = intent.getStringExtra(Constants.EXTRA_BUBBLE_ID)
+        
+        if (url != null && UrlUtils.isValidUrl(url)) {
+            // Check if this is an authentication URL that should be handled with Custom Tabs
+            if (AuthenticationService.isAuthenticationUrl(url)) {
+                Logger.d(TAG, "Authentication URL detected, opening in Custom Tab: $url")
+                // Use the provided bubble ID or generate a new one
+                val authBubbleId = bubbleId ?: UUID.randomUUID().toString()
+                AuthenticationService.openInCustomTab(context, url, authBubbleId)
+                return
+            }
+            
+            // Save to history
+            saveToHistory(url)
+            
+            bubbleService.createOrUpdateBubbleWithNewUrl(url, bubbleId)
+        } else {
+            Logger.w(TAG, "Invalid or missing URL for handleOpenUrl. URL: $url")
+        }
+    }
+
+    private fun handleCloseBubble(intent: Intent) {
+        val bubbleId = intent.getStringExtra(Constants.EXTRA_BUBBLE_ID)
+        if (bubbleId != null) {
+            bubbleService.removeBubble(bubbleId)
+        }
+        Logger.d(TAG, "Bubble closed via intent")
+    }
+
+    private fun handleActivateBubble(intent: Intent) {
+        val bubbleId = intent.getStringExtra(Constants.EXTRA_BUBBLE_ID)
+        if (bubbleId != null) {
+            // We need to access the bubbles through the service
+            // For now, we'll just log that the bubble was activated
+            Logger.d(TAG, "Bubble activated with ID: $bubbleId")
+        } else {
+            Logger.w(TAG, "No bubble ID provided in handleActivateBubble")
+        }
+    }
+
+    private fun handleToggleBubbles() {
+        // Optional: implement show/hide behavior if needed. Here's a basic toggle logic idea.
+        Logger.d(TAG, "Toggle bubbles requested")
+    }
+
+    /**
+     * Handles the ACTION_SEND intent to create or update a bubble with a new URL.
+     * @param intent The incoming intent containing the shared content.
+     */
+    private fun handleSharedContent(intent: Intent) {
+        val sharedText = intent.getStringExtra(Intent.EXTRA_TEXT)
+        Logger.d(TAG, "handleSharedContent | Received shared text: $sharedText")
+        
+        // Extract URL from shared text if possible
+        val url = sharedText?.let { text ->
+            UrlUtils.extractUrl(text) ?: text
+        }
+        Logger.d(TAG, "handleSharedContent | Received url: $url")
+        processValidUrl(url) { validUrl ->
+            bubbleService.createOrUpdateBubbleWithNewUrl(validUrl, null)
+        }
+    }
+
+    /**
+     * Handles the ACTION_VIEW intent to create or update a bubble with a new URL.
+     * @param intent The incoming intent containing the URL.
+     */
+    private fun handleViewAction(intent: Intent) {
+        val data = intent.data
+        if (data != null && UrlUtils.isValidUrl(data.toString())) {
+            val url = data.toString()
+            
+            // Check if this is an authentication URL that should be handled with Custom Tabs
+            if (AuthenticationService.isAuthenticationUrl(url)) {
+                Logger.d(TAG, "Authentication URL detected, opening in Custom Tab: $url")
+                // Generate a bubble ID for this URL to track it when returning from authentication
+                val authBubbleId = UUID.randomUUID().toString()
+                AuthenticationService.openInCustomTab(context, url, authBubbleId)
+                return
+            }
+            
+            // Save to history
+            saveToHistory(url)
+            
+            bubbleService.createOrUpdateBubbleWithNewUrl(url, null)
+        }
+    }
+    
+    /**
+     * Extracts a user-friendly title from a URL.
+     * @param url The URL to extract a title from.
+     * @return A user-friendly title based on the URL.
+     */
+    private fun extractTitleFromUrl(url: String): String {
+        try {
+            // First try to fetch the actual title from the HTML (synchronously)
+            val htmlTitle = try {
+                // This is a blocking call, but it's okay for this context
+                // In a real app, you might want to use a more sophisticated approach
+                val connection = Jsoup.connect(url)
+                    .userAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
+                    .timeout(3000) // Short timeout to avoid blocking too long
+                    .followRedirects(true)
+                val document = connection.get()
+                document.title()
+            } catch (e: Exception) {
+                Logger.d(TAG, "Failed to fetch HTML title, falling back to URL parsing: ${e.message}")
+                null
+            }
+            
+            // If we successfully got a title from HTML, use it
+            if (!htmlTitle.isNullOrBlank()) {
+                Logger.d(TAG, "Using HTML title: $htmlTitle")
+                return htmlTitle
+            }
+            
+            // Otherwise fall back to extracting from URL
+            Logger.d(TAG, "Falling back to URL-based title extraction")
+            
+            // Remove protocol (http://, https://, etc.)
+            var title = url.replace(Regex("^(https?://|www\\.)"), "")
+            
+            // Remove trailing slashes
+            title = title.replace(Regex("/+$"), "")
+            
+            // Remove query parameters and fragments
+            title = title.split("?")[0].split("#")[0]
+            
+            // Split by path segments and take the domain
+            val parts = title.split("/")
+            if (parts.isNotEmpty()) {
+                // Use domain as base
+                title = parts[0]
+                
+                // If there's a specific page path, add it for context
+                if (parts.size > 1 && parts.last().isNotEmpty()) {
+                    // Replace hyphens and underscores with spaces
+                    val pageName = parts.last()
+                        .replace("-", " ")
+                        .replace("_", " ")
+                        .split(".")
+                        .first() // Remove file extension if present
+                    
+                    // Capitalize first letter of each word
+                    val formattedPageName = pageName.split(" ")
+                        .filter { it.isNotEmpty() }
+                        .joinToString(" ") { word ->
+                            word.replaceFirstChar { 
+                                if (it.isLowerCase()) it.titlecase() else it.toString() 
+                            }
+                        }
+                    
+                    if (formattedPageName.isNotEmpty()) {
+                        title = "$formattedPageName - $title"
+                    }
+                }
+            }
+            
+            return title
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error extracting title from URL: $url", e)
+            return "Web Page" // Fallback title
+        }
+    }
+
+    /**
+     * Fetches a document from a URL using Jsoup
+     * @param url The URL to fetch
+     * @return The fetched Document or null if an error occurred
+     */
+    private suspend fun fetchDocument(url: String): Document? = withContext(Dispatchers.IO) {
+        return@withContext try {
+            Logger.d(TAG, "Fetching document for URL: $url")
+            val document = Jsoup.connect(url)
+                .userAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
+                .timeout(5000) // 5 seconds
+                .followRedirects(true)
+                .get()
+            Logger.d(TAG, "Successfully fetched document for URL: $url, title: ${document.title()}")
+            document
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error fetching document for $url: ${e.message}", e)
+            null
+        }
+    }
+
+    private fun extractTitleFromDocument(document: Document): String? {
+        var title = document.title()
+        if (title.isNotBlank()) return title
+
+        title = document.select("meta[itemprop=name]").firstOrNull()?.attr("content") ?: ""
+        if (title.isNotBlank()) return title
+
+        title = document.select("meta[property=og:title]").firstOrNull()?.attr("content") ?: ""
+        if (title.isNotBlank()) return title
+
+        title = document.select("meta[name=twitter:title]").firstOrNull()?.attr("content") ?: ""
+        if (title.isNotBlank()) return title
+
+        title = document.select("h1").firstOrNull()?.text() ?: ""
+        if (title.isNotBlank()) return title
+
+        return null
+    }
+
+    private fun extractPreviewImageUrlFromDocument(document: Document): String? {
+        Logger.d(TAG, "Extracting preview image URL from document")
+        
+        // 1. Try OpenGraph image
+        document.select("meta[property=og:image]").firstOrNull()?.absUrl("content")?.let {
+            if (it.isNotBlank()) {
+                Logger.d(TAG, "Found OpenGraph image: $it")
+                return it
+            }
+        }
+
+        // 2. Try Twitter card image
+        document.select("meta[name=twitter:image]").firstOrNull()?.absUrl("content")?.let {
+            if (it.isNotBlank()) {
+                Logger.d(TAG, "Found Twitter card image: $it")
+                return it
+            }
+        }
+
+        // 3. Try <link rel="image_src">
+        document.select("link[rel=image_src]").firstOrNull()?.absUrl("href")?.let {
+            if (it.isNotBlank()) {
+                Logger.d(TAG, "Found image_src link: $it")
+                return it
+            }
+        }
+
+        // 4. Fallback: First large <img> element on page (with size filtering)
+        document.select("img").firstOrNull { element ->
+            val src = element.absUrl("src")
+            src.isNotBlank() && isImageUrlValid(src) && isImageLargeEnough(element)
+        }?.absUrl("src")?.let {
+            Logger.d(TAG, "Found large image element: $it")
+            return it
+        }
+
+        // 5. Final fallback: favicon
+        document.select("link[rel~=(?i)icon]").firstOrNull()?.absUrl("href")?.let {
+            if (it.isNotBlank()) {
+                Logger.d(TAG, "Found favicon as fallback: $it")
+                return it
+            }
+        }
+
+        Logger.d(TAG, "No preview image found in document")
+        return null
+    }
+
+    private fun isImageUrlValid(url: String): Boolean {
+        return url.startsWith("http") && !url.contains("data:image") && !url.contains("base64")
+    }
+
+    private fun isImageLargeEnough(element: Element): Boolean {
+        try {
+            val width = element.attr("width").toIntOrNull() ?: 0
+            val height = element.attr("height").toIntOrNull() ?: 0
+            
+            // Check if width and height attributes exist and are large enough
+            if (width > 100 && height > 100) {
+                return true
+            }
+            
+            // If no width/height attributes, we'll assume it's large enough
+            // In a production app, you might want to actually download the image to check dimensions
+            return !element.attr("width").isBlank() || !element.attr("height").isBlank()
+        } catch (e: Exception) {
+            Logger.d(TAG, "Error checking image size: ${e.message}")
+            return true // Assume it's okay if we can't determine size
+        }
+    }
+
+    private fun extractFaviconUrlFromDocument(document: Document, baseUrl: String): String? {
+        // 1. Try Apple touch icon
+        document.select("link[rel=apple-touch-icon]").firstOrNull()?.absUrl("href")?.let {
+            if (it.isNotBlank()) return it
+        }
+
+        // 2. Try generic favicons (shortcut icon, icon, etc.)
+        document.select("link[rel~=(?i)^(shortcut icon|icon|shortcut)$]").firstOrNull {
+            it.attr("href").isNotBlank()
+        }?.absUrl("href")?.let {
+            if (it.isNotBlank()) return it
+        }
+
+        // 3. Fallback to default /favicon.ico
+        return try {
+            val uri = URI(baseUrl)
+            val scheme = uri.scheme ?: "https"
+            val domain = uri.host ?: return null
+            "$scheme://$domain/favicon.ico"
+        } catch (e: Exception) {
+            Logger.w(TAG, "Could not construct default favicon URL from $baseUrl", e)
+            null
+        }
+    }
+
+    /**
+     * Asynchronously extracts the title from a webpage's HTML.
+     * This method should be called from a coroutine context.
+     *
+     * @param url The URL to extract the title from
+     * @return The title from the HTML or null if it couldn't be extracted
+     */
+    @Deprecated("Use fetchDocument and extractTitleFromDocument instead")
+    suspend fun extractTitleFromHtmlAsync(url: String): String? {
+        return try {
+            Logger.d(TAG, "Fetching HTML title for URL: $url")
+            val document = fetchDocument(url)
+            document?.let { extractTitleFromDocument(it) }
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error extracting title from HTML: ${e.message}", e)
+            null
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleReadModeManager.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleReadModeManager.kt
new file mode 100644
index 0000000..bf7aa91
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleReadModeManager.kt
@@ -0,0 +1,658 @@
+package com.quick.browser.presentation.ui.browser
+
+import android.content.Context
+import android.view.View
+import android.webkit.JavascriptInterface
+import android.webkit.WebView
+import android.webkit.WebViewClient
+import android.widget.ProgressBar
+import android.widget.Toast
+import androidx.core.content.ContextCompat
+import com.google.android.material.button.MaterialButton
+import com.quick.browser.R
+import com.quick.browser.service.ReadabilityService
+import com.quick.browser.service.SettingsService
+import com.quick.browser.utils.Logger
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.withContext
+
+/**
+ * Manages the read mode functionality for BubbleView.
+ * 
+ * This class handles all read mode-related operations including content extraction,
+ * HTML styling, UI state management, and WebView configuration. It provides
+ * a clean interface for toggling between normal web view and reader mode.
+ * 
+ * Responsibilities:
+ * - Read mode toggle and UI state management
+ * - Content extraction using ReadabilityExtractor
+ * - HTML styling and theme application
+ * - WebView settings configuration for read mode
+ * - Error handling and fallback mechanisms
+ * 
+ * @param context Android context for accessing resources and services
+ * @param settingsService Manager for accessing user preferences like dark theme
+ */
+class BubbleReadModeManager(
+    private val context: Context,
+    private val settingsService: SettingsService
+) {
+    
+    companion object {
+        private const val TAG = "BubbleReadModeManager"
+    }
+    
+    // UI components - will be initialized when views are set up
+    private var btnReadMode: MaterialButton? = null
+    private var webView: WebView? = null
+    private var progressBar: ProgressBar? = null
+    
+    // Read mode state
+    private var isReadMode = false
+    private var originalContent: String? = null
+    private var currentUrl: String? = null
+    
+    // Content extraction
+    private val contentExtractor by lazy { ReadabilityService(context) }
+    
+    // Callback interface for BubbleView to respond to read mode events
+    interface ReadModeManagerListener {
+        fun onReadModeChanged(isReadMode: Boolean)
+        fun onReadModeLoadingStarted()
+        fun onReadModeLoadingCompleted(success: Boolean)
+        fun onReadModeError(message: String)
+        fun onBubbleExpandRequested()
+        fun onReadModeScrollDown()
+        fun onReadModeScrollUp()
+    }
+    
+    private var listener: ReadModeManagerListener? = null
+    
+    /**
+     * Set the listener for read mode manager events
+     */
+    fun setListener(listener: ReadModeManagerListener?) {
+        this.listener = listener
+    }
+    
+    /**
+     * Initialize the read mode manager with the required UI components
+     * 
+     * @param btnReadMode The button to toggle read mode
+     * @param webView The WebView instance to display content
+     * @param progressBar The progress indicator for loading
+     * @param currentUrl The current URL being displayed
+     */
+    fun initialize(
+        btnReadMode: MaterialButton,
+        webView: WebView,
+        progressBar: ProgressBar,
+        currentUrl: String
+    ) {
+        this.btnReadMode = btnReadMode
+        this.webView = webView
+        this.progressBar = progressBar
+        this.currentUrl = currentUrl
+        
+        updateReadModeButton()
+    }
+    
+    /**
+     * Toggle between normal web view and read mode
+     */
+    fun toggleReadMode() {
+        isReadMode = !isReadMode
+        listener?.onReadModeChanged(isReadMode)
+        
+        if (isReadMode) {
+            enterReadMode()
+        } else {
+            exitReadMode()
+        }
+        updateReadModeButton()
+    }
+    
+    /**
+     * Enter read mode by extracting and styling content
+     */
+    private fun enterReadMode() {
+        // Save current URL before switching to reader mode
+        originalContent = webView?.url
+        
+        // Request bubble expansion if not already expanded
+        listener?.onBubbleExpandRequested()
+        
+        openReadMode()
+    }
+    
+    /**
+     * Exit read mode and return to normal web view
+     */
+    private fun exitReadMode() {
+        // Restore WebView settings for normal mode
+        webView?.settings?.apply {
+            javaScriptEnabled = true
+            builtInZoomControls = false
+            displayZoomControls = false
+        }
+        
+        // Load original content if available
+        originalContent?.let { url ->
+            webView?.loadUrl(url)
+        }
+        
+        // Update button state
+        updateReadModeButton()
+        
+        // Announce mode change for accessibility
+        webView?.announceForAccessibility(context.getString(R.string.web_view_mode))
+        Toast.makeText(context, R.string.web_view_mode, Toast.LENGTH_SHORT).show()
+        
+        listener?.onReadModeLoadingCompleted(true)
+    }
+    
+    /**
+     * Open read mode by extracting content and applying styling
+     */
+    private fun openReadMode() {
+        try {
+            val url = currentUrl
+            if (url.isNullOrEmpty()) {
+                handleReadModeError("No URL available for read mode")
+                return
+            }
+            
+            // Show loading indicator
+            progressBar?.visibility = View.VISIBLE
+            progressBar?.isIndeterminate = true
+            listener?.onReadModeLoadingStarted()
+            
+            // Extract content in background
+            CoroutineScope(Dispatchers.Main).launch {
+                try {
+                    val readableContent = withContext(Dispatchers.IO) {
+                        contentExtractor.extractFromUrl(url)
+                    }
+                    
+                    if (readableContent == null) {
+                        handleReadModeError("Failed to extract readable content")
+                        return@launch
+                    }
+                    
+                    // Create styled HTML with current settings
+                    val styledHtml = createStyledHtml(readableContent)
+                    
+                    // Apply read mode settings to WebView
+                    configureWebViewForReadMode()
+                    
+                    // Load the styled content with proper encoding
+                    webView?.loadDataWithBaseURL(url, styledHtml, "text/html; charset=UTF-8", "UTF-8", null)
+                    
+                    // Add JavaScript interface for scroll detection
+                    setupScrollDetection()
+                    
+                    // Set up a WebViewClient to inject scroll detection JavaScript after page loads
+                    webView?.webViewClient = object : WebViewClient() {
+                        override fun onPageFinished(view: WebView?, url: String?) {
+                            super.onPageFinished(view, url)
+                            // Inject scroll detection JavaScript
+                            injectScrollDetectionJavaScript()
+                        }
+                    }
+                    
+                    // Hide loading indicator
+                    progressBar?.visibility = View.GONE
+                    progressBar?.isIndeterminate = false
+                    webView?.alpha = 1f
+                    
+                    // Announce success
+                    webView?.announceForAccessibility(context.getString(R.string.reader_mode_loaded))
+                    Toast.makeText(context, R.string.reader_mode_loaded, Toast.LENGTH_SHORT).show()
+                    
+                    listener?.onReadModeLoadingCompleted(true)
+                    
+                } catch (e: Exception) {
+                    Logger.e(TAG, "Error extracting content for read mode", e)
+                    handleReadModeError("Error processing content: ${e.message}")
+                }
+            }
+        } catch (e: Exception) {
+            Logger.e(TAG, "Failed to open read mode", e)
+            handleReadModeError("Failed to enter read mode: ${e.message}")
+        }
+    }
+    
+    /**
+     * Configure WebView settings for optimal read mode experience
+     */
+    private fun configureWebViewForReadMode() {
+        webView?.settings?.apply {
+            // Enable JavaScript for scroll detection, but disable other scripts for cleaner experience
+            javaScriptEnabled = true
+            // Enable built-in zoom for text scaling
+            builtInZoomControls = true
+            displayZoomControls = false
+            // Reset text zoom to default
+            textZoom = 100
+        }
+    }
+    
+    /**
+     * Handle read mode errors and reset state
+     */
+    private fun handleReadModeError(message: String) {
+        // Remove JavaScript interface for reader mode
+        webView?.removeJavascriptInterface("ReaderModeScrollDetector")
+        
+        // Hide loading indicator
+        progressBar?.visibility = View.GONE
+        progressBar?.isIndeterminate = false
+        
+        // Show error message
+        Toast.makeText(context, R.string.failed_to_load_reader_mode, Toast.LENGTH_SHORT).show()
+        Logger.e(TAG, "Read mode error: $message")
+        
+        // Reset read mode state on error
+        isReadMode = false
+        updateReadModeButton()
+        
+        // Restore original content if available
+        originalContent?.let { url ->
+            webView?.loadUrl(url)
+        }
+        
+        listener?.onReadModeError(message)
+        listener?.onReadModeLoadingCompleted(false)
+    }
+    
+    /**
+     * Set up JavaScript interface for scroll detection in reader mode
+     */
+    private fun setupScrollDetection() {
+        webView?.addJavascriptInterface(object {
+            @JavascriptInterface
+            fun onScrollDown() {
+                // Post to main thread to update UI
+                webView?.post {
+                    listener?.onReadModeScrollDown()
+                }
+            }
+
+            @JavascriptInterface
+            fun onScrollUp() {
+                // Post to main thread to update UI
+                webView?.post {
+                    listener?.onReadModeScrollUp()
+                }
+            }
+        }, "ReaderModeScrollDetector") // Use a different name to avoid conflicts
+    }
+    
+    /**
+     * Inject JavaScript for scroll detection in reader mode
+     */
+    private fun injectScrollDetectionJavaScript() {
+        val js = """
+            (function() {
+                // Variables for scroll tracking
+                var lastScrollY = window.scrollY || document.documentElement.scrollTop;
+                var lastScrollDirection = null;
+                var scrollThreshold = 3; // Lower threshold for more sensitivity
+                var consecutiveThreshold = 2; // Number of consecutive scrolls in same direction to trigger
+                var consecutiveCount = 0;
+                var lastNotifiedDirection = null;
+                
+                // Use requestAnimationFrame for smoother performance
+                var ticking = false;
+                
+                // Main scroll handler
+                window.addEventListener('scroll', function() {
+                    if (!ticking) {
+                        window.requestAnimationFrame(function() {
+                            var currentScrollY = window.scrollY || document.documentElement.scrollTop;
+                            var scrollDelta = currentScrollY - lastScrollY;
+                            
+                            // Determine scroll direction
+                            if (Math.abs(scrollDelta) > scrollThreshold) {
+                                var currentDirection = scrollDelta > 0 ? 'down' : 'up';
+                                
+                                // Check if we're continuing in the same direction
+                                if (currentDirection === lastScrollDirection) {
+                                    consecutiveCount++;
+                                } else {
+                                    consecutiveCount = 1;
+                                    lastScrollDirection = currentDirection;
+                                }
+                                
+                                // Only notify when we have enough consecutive scrolls in the same direction
+                                // or when direction changes from the last notification
+                                if ((consecutiveCount >= consecutiveThreshold && 
+                                    currentDirection !== lastNotifiedDirection) || 
+                                    (currentDirection !== lastNotifiedDirection && 
+                                    Math.abs(scrollDelta) > scrollThreshold * 3)) {
+                                    
+                                    if (currentDirection === 'down' && window.ReaderModeScrollDetector) {
+                                        window.ReaderModeScrollDetector.onScrollDown();
+                                    } else if (window.ReaderModeScrollDetector) {
+                                        window.ReaderModeScrollDetector.onScrollUp();
+                                    }
+                                    lastNotifiedDirection = currentDirection;
+                                }
+                                
+                                lastScrollY = currentScrollY;
+                            }
+                            
+                            ticking = false;
+                        });
+                        
+                        ticking = true;
+                    }
+                }, { passive: true });
+                
+                // Also detect touch events for more responsive mobile scrolling
+                var touchStartY = 0;
+                
+                document.addEventListener('touchstart', function(e) {
+                    touchStartY = e.touches[0].clientY;
+                }, { passive: true });
+                
+                document.addEventListener('touchmove', function(e) {
+                    var touchY = e.touches[0].clientY;
+                    var touchDelta = touchStartY - touchY;
+                    
+                    // Detect significant touch movement
+                    if (Math.abs(touchDelta) > 10) {
+                        if (touchDelta > 0) {
+                            // Swiping up = scrolling down
+                            if (window.ReaderModeScrollDetector) window.ReaderModeScrollDetector.onScrollDown();
+                        } else {
+                            // Swiping down = scrolling up
+                            if (window.ReaderModeScrollDetector) window.ReaderModeScrollDetector.onScrollUp();
+                        }
+                        touchStartY = touchY;
+                    }
+                }, { passive: true });
+            })();
+        """.trimIndent()
+        
+        webView?.evaluateJavascript(js, null)
+    }
+    
+    /**
+     * Update the read mode button appearance based on current state
+     */
+    private fun updateReadModeButton() {
+        btnReadMode?.apply {
+            val iconRes = if (isReadMode) R.drawable.ic_globe else R.drawable.ic_read_mode
+            val contentDesc = if (isReadMode) 
+                context.getString(R.string.web_view_mode) 
+            else 
+                context.getString(R.string.read_mode)
+                
+            setIconResource(iconRes)
+            setIconTint(ContextCompat.getColorStateList(context, R.color.colorPrimary))
+            contentDescription = contentDesc
+        }
+    }
+    
+    /**
+     * Create styled HTML for reader mode with responsive design and theme support
+     * 
+     * @param content The extracted readable content
+     * @return The styled HTML string
+     */
+    private fun createStyledHtml(content: ReadabilityService.ReadableContent): String {
+        // Get current reader mode settings
+        val readerBackground = settingsService.getReaderBackground()
+        val fontSize = settingsService.getReaderFontSize()
+        val textAlign = settingsService.getReaderTextAlign()
+        
+        // Define color schemes for different backgrounds
+        val colors = when (readerBackground) {
+            SettingsService.READER_BG_DARK -> arrayOf("#121212", "#E0E0E0", "#90CAF9", "#B0B0B0", "#1E1E1E", "#616161")
+            SettingsService.READER_BG_SEPIA -> arrayOf("#F4F1E8", "#5D4E37", "#8B4513", "#8B7355", "#EAE7DC", "#D2B48C")
+            else -> arrayOf("#FFFFFF", "#212121", "#1976D2", "#757575", "#F5F5F5", "#9E9E9E")
+        }
+        
+        // Map text alignment values
+        val textAlignStyle = when (textAlign) {
+            SettingsService.READER_ALIGN_LEFT -> "left"
+            SettingsService.READER_ALIGN_CENTER -> "center"
+            SettingsService.READER_ALIGN_RIGHT -> "right"
+            SettingsService.READER_ALIGN_JUSTIFY -> "justify"
+            else -> "left"
+        }
+        
+        // Create responsive HTML with embedded CSS
+        return """
+            <!DOCTYPE html>
+            <html>
+            <head>
+                <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0, user-scalable=yes">
+                <style>
+                    body {
+                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
+                        background-color: ${colors[0]};
+                        color: ${colors[1]};
+                        margin: 0;
+                        padding: 20px;
+                        font-size: ${fontSize}px;
+                        line-height: 1.6;
+                        text-align: $textAlignStyle;
+                    }
+                    h1, h2, h3, h4, h5, h6 {
+                        color: ${colors[2]};
+                        margin-top: 1.5em;
+                        margin-bottom: 0.5em;
+                    }
+                    h1 {
+                        font-size: 1.8em;
+                        border-bottom: 1px solid ${colors[3]};
+                        padding-bottom: 0.3em;
+                    }
+                    h2 {
+                        font-size: 1.5em;
+                    }
+                    h3 {
+                        font-size: 1.3em;
+                    }
+                    p {
+                        margin-top: 0;
+                        margin-bottom: 1em;
+                        text-align: $textAlignStyle;
+                    }
+                    a {
+                        color: ${colors[2]};
+                        text-decoration: none;
+                    }
+                    a:hover {
+                        text-decoration: underline;
+                    }
+                    img {
+                        max-width: 100%;
+                        height: auto;
+                        display: block;
+                        margin: 1em auto;
+                        border-radius: 4px;
+                    }
+                    blockquote {
+                        border-left: 4px solid ${colors[4]};
+                        margin: 1.5em 0;
+                        padding: 0.5em 1em;
+                        color: ${colors[5]};
+                        font-style: italic;
+                    }
+                    pre, code {
+                        background-color: ${colors[4]};
+                        border-radius: 4px;
+                        padding: 0.2em 0.4em;
+                        font-family: 'Courier New', Courier, monospace;
+                        overflow-x: auto;
+                    }
+                    pre {
+                        padding: 1em;
+                        overflow-x: auto;
+                        white-space: pre-wrap;
+                        word-wrap: break-word;
+                    }
+                    pre code {
+                        background-color: transparent;
+                        padding: 0;
+                    }
+                    hr {
+                        border: 0;
+                        border-top: 1px solid ${colors[3]};
+                        margin: 2em 0;
+                    }
+                    ul, ol {
+                        padding-left: 1.5em;
+                        margin: 1em 0;
+                    }
+                    li {
+                        margin-bottom: 0.5em;
+                    }
+                    table {
+                        border-collapse: collapse;
+                        width: 100%;
+                        margin: 1em 0;
+                    }
+                    th, td {
+                        border: 1px solid ${colors[3]};
+                        padding: 0.5em;
+                        text-align: left;
+                    }
+                    th {
+                        background-color: ${colors[4]};
+                    }
+                    // Add JavaScript for scroll detection
+                    // Variables for scroll tracking
+                    var lastScrollY = window.scrollY || document.documentElement.scrollTop;
+                    var lastScrollDirection = null;
+                    var scrollThreshold = 3; // Lower threshold for more sensitivity
+                    var consecutiveThreshold = 2; // Number of consecutive scrolls in same direction to trigger
+                    var consecutiveCount = 0;
+                    var lastNotifiedDirection = null;
+                    
+                    // Use requestAnimationFrame for smoother performance
+                    var ticking = false;
+                    
+                    // Main scroll handler
+                    window.addEventListener('scroll', function() {
+                        if (!ticking) {
+                            window.requestAnimationFrame(function() {
+                                var currentScrollY = window.scrollY || document.documentElement.scrollTop;
+                                var scrollDelta = currentScrollY - lastScrollY;
+                                
+                                // Determine scroll direction
+                                if (Math.abs(scrollDelta) > scrollThreshold) {
+                                    var currentDirection = scrollDelta > 0 ? 'down' : 'up';
+                                    
+                                    // Check if we're continuing in the same direction
+                                    if (currentDirection === lastScrollDirection) {
+                                        consecutiveCount++;
+                                    } else {
+                                        consecutiveCount = 1;
+                                        lastScrollDirection = currentDirection;
+                                    }
+                                    
+                                    // Only notify when we have enough consecutive scrolls in the same direction
+                                    // or when direction changes from the last notification
+                                    if ((consecutiveCount >= consecutiveThreshold && 
+                                        currentDirection !== lastNotifiedDirection) || 
+                                        (currentDirection !== lastNotifiedDirection && 
+                                        Math.abs(scrollDelta) > scrollThreshold * 3)) {
+                                        
+                                        if (currentDirection === 'down' && window.ReaderModeScrollDetector) {
+                        window.ReaderModeScrollDetector.onScrollDown();
+                    } else if (window.ReaderModeScrollDetector) {
+                        window.ReaderModeScrollDetector.onScrollUp();
+                    }
+                                        lastNotifiedDirection = currentDirection;
+                                    }
+                                    
+                                    lastScrollY = currentScrollY;
+                                }
+                                
+                                ticking = false;
+                            });
+                            
+                            ticking = true;
+                        }
+                    }, { passive: true });
+                </style>
+            </head>
+            <body>
+                <article>
+                    <header>
+                        <h1>${content.title}</h1>
+                        ${if (content.byline != null) "<p class='byline'>By ${content.byline}</p>" else ""}
+                        ${if (content.siteName != null || content.publishDate != null) """
+                        <div class='article-meta'>
+                            ${if (content.siteName != null) "<span class='site-name'>${content.siteName}</span>" else ""}
+                            ${if (content.publishDate != null) "<span class='publish-date'>${content.publishDate}</span>" else ""}
+                        </div>
+                        """ else ""}
+                    </header>
+                    <main>
+                        ${content.content}
+                    </main>
+                </article>
+            </body>
+            </html>
+        """.trimIndent()
+    }
+    
+    /**
+     * Update the current URL (useful when navigating to new pages)
+     */
+    fun updateCurrentUrl(url: String) {
+        currentUrl = url
+        // Clear cached content when URL changes
+        originalContent = null
+    }
+    
+    /**
+     * Check if currently in read mode
+     */
+    fun isReadMode(): Boolean {
+        return isReadMode
+    }
+    
+    /**
+     * Force exit read mode (useful when bubble is collapsed or closed)
+     */
+    fun forceExitReadMode() {
+        if (isReadMode) {
+            isReadMode = false
+            exitReadMode()
+        }
+    }
+    
+    /**
+     * Check if read mode is available for the current URL
+     */
+    fun isReadModeAvailable(): Boolean {
+        val url = currentUrl ?: return false
+        // Read mode is available for HTTP/HTTPS URLs
+        return url.startsWith("http://") || url.startsWith("https://")
+    }
+    
+    /**
+     * Get the original URL before entering read mode
+     */
+    fun getOriginalUrl(): String? {
+        return originalContent
+    }
+    
+    /**
+     * Refresh reader mode content with current settings
+     * Should be called when reader mode settings change
+     */
+    fun refreshReaderModeContent() {
+        if (isReadMode && currentUrl != null) {
+            openReadMode()
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleResizeBarHandler.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleResizeBarHandler.kt
new file mode 100644
index 0000000..d3a41d5
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleResizeBarHandler.kt
@@ -0,0 +1,164 @@
+package com.quick.browser.presentation.ui.browser
+
+import android.content.Context
+import android.view.MotionEvent
+import android.view.View
+import android.view.WindowManager
+import com.quick.browser.utils.Logger
+
+/**
+ * Handles touch interactions for the resize bar at the bottom of the bubble.
+ */
+class BubbleResizeBarHandler(
+    private val context: Context,
+    private val bubbleView: BubbleView
+) {
+    
+    private var initialTouchY = 0f
+    private var initialHeight = 0
+    private var initialWidth = 0
+    private var initialX = 0
+    private var initialY = 0
+    private val windowManager = context.getSystemService(Context.WINDOW_SERVICE) as WindowManager
+    
+    companion object {
+        private const val TAG = "BubbleResizeBarHandler"
+    }
+    
+    /**
+     * Set up touch listener for the resize bar
+     */
+    fun setupResizeBarTouch(resizeBar: View, delegate: BubbleTouchHandler.BubbleTouchDelegate) {
+        resizeBar.setOnTouchListener { view, event ->
+            if (bubbleView.layoutParams !is WindowManager.LayoutParams) return@setOnTouchListener false
+            
+            when (event.action) {
+                MotionEvent.ACTION_DOWN -> {
+                    // Start resizing
+                    initialTouchY = event.rawY
+                    initialHeight = delegate.getExpandedContainer().height
+                    initialWidth = delegate.getExpandedContainer().width
+                    
+                    // Get current window position
+                    val windowParams = bubbleView.layoutParams as WindowManager.LayoutParams
+                    initialX = windowParams.x
+                    initialY = windowParams.y
+                    
+                    Logger.d(TAG, "Resize bar touch started")
+                    return@setOnTouchListener true
+                }
+                
+                MotionEvent.ACTION_MOVE -> {
+                    // Calculate the change in position
+                    val dy = event.rawY - initialTouchY
+                    
+                    // Resize based on vertical movement
+                    resizeBubbleFromBottom(dy, delegate)
+                    
+                    // Keep the resize bar under the finger during dragging
+                    // This is handled by the system, but we ensure we consume the event
+                    return@setOnTouchListener true
+                }
+                
+                MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL -> {
+                    Logger.d(TAG, "Resize bar touch ended")
+                    return@setOnTouchListener true
+                }
+            }
+            
+            return@setOnTouchListener false
+        }
+    }
+    
+    /**
+     * Resize the bubble from the bottom (uniform scaling from all sides)
+     */
+    private fun resizeBubbleFromBottom(dy: Float, delegate: BubbleTouchHandler.BubbleTouchDelegate) {
+        // Define minimum and maximum dimensions
+        val minWidth = context.resources.displayMetrics.widthPixels / 3 // Keep the old width value
+        val minHeight = (context.resources.displayMetrics.heightPixels / 3) * 3 / 4 // Reduce height by 25% (multiply by 0.75)
+        val maxWidth = context.resources.displayMetrics.widthPixels - 50
+        val maxHeight = context.resources.displayMetrics.heightPixels - 100
+        
+        // Calculate new dimensions (moving up decreases size, moving down increases size)
+        // Positive dy means moving down, negative dy means moving up
+        val sizeChange = (dy * 0.7).toInt() // Increase speed to 0.7x for better responsiveness
+        var newWidth = (initialWidth + sizeChange).coerceIn(minWidth, maxWidth)
+        var newHeight = (initialHeight + sizeChange).coerceIn(minHeight, maxHeight)
+        
+        // Calculate new position to keep the center fixed
+        val widthChange = newWidth - initialWidth
+        val heightChange = newHeight - initialHeight
+        val newX = initialX - widthChange / 2
+        val newY = initialY - heightChange / 2
+        
+        // Apply the new dimensions (removed auto-collapse feature)
+        applyBubbleResize(newWidth, newHeight, newX, newY, delegate)
+    }
+    
+    /**
+     * Apply the resize changes to the bubble
+     */
+    private fun applyBubbleResize(
+        newWidth: Int,
+        newHeight: Int,
+        newX: Int,
+        newY: Int,
+        delegate: BubbleTouchHandler.BubbleTouchDelegate
+    ) {
+        val expandedContainer = delegate.getExpandedContainer()
+        val webViewContainer = delegate.getWebViewContainer()
+        val contentContainer = delegate.getContentContainer()
+        
+        // Apply the new dimensions to the container
+        val containerParams = expandedContainer.layoutParams
+        containerParams.width = newWidth
+        containerParams.height = newHeight
+        expandedContainer.layoutParams = containerParams
+        
+        // Update the WebView dimensions to match the container
+        val webViewParams = webViewContainer.layoutParams
+        webViewParams.width = newWidth
+        webViewParams.height = newHeight
+        webViewContainer.layoutParams = webViewParams
+        
+        // Also update content container to match
+        val contentParams = contentContainer.layoutParams
+        contentParams.width = newWidth
+        contentParams.height = newHeight
+        contentContainer.layoutParams = contentParams
+        
+        // Update delegate with new dimensions
+        delegate.updateDimensions(newWidth, newHeight)
+        
+        // Update window position with bottom margin constraint
+        val windowParams = bubbleView.layoutParams as WindowManager.LayoutParams
+        windowParams.x = newX.coerceAtLeast(0)
+        
+        // Ensure the window doesn't go too far down - leave space for the resize bar
+        val screenHeight = context.resources.displayMetrics.heightPixels
+        val resizeBarHeight = 4 // Height of the resize bar
+        val bottomMargin = 20 // Additional margin to prevent touching bottom edge
+        val maxY = screenHeight - newHeight - resizeBarHeight - bottomMargin
+        windowParams.y = newY.coerceIn(0, maxY)
+        
+        try {
+            windowManager.updateViewLayout(bubbleView, windowParams)
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error updating window layout", e)
+        }
+        
+        // Calculate and apply zoom level
+        val screenWidth = context.resources.displayMetrics.widthPixels
+        val widthRatio = newWidth.toFloat() / screenWidth
+        val calculatedZoomPercent = delegate.calculateBubbleZoomLevel(widthRatio)
+        
+        // Apply the dynamic zoom level
+        delegate.applyBubbleDynamicZoom(calculatedZoomPercent)
+        
+        // Force layout update
+        expandedContainer.requestLayout()
+        webViewContainer.requestLayout()
+        contentContainer.requestLayout()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleSettingsPanel.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleSettingsPanel.kt
new file mode 100644
index 0000000..547c7c3
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleSettingsPanel.kt
@@ -0,0 +1,566 @@
+package com.quick.browser.presentation.ui.browser
+
+import android.content.Context
+import android.graphics.Rect
+import android.view.MotionEvent
+import android.view.View
+import android.webkit.WebView
+import android.widget.TextView
+import androidx.core.content.ContextCompat
+import com.google.android.material.button.MaterialButton
+import com.google.android.material.switchmaterial.SwitchMaterial
+import com.quick.browser.R
+import com.quick.browser.service.SettingsService
+
+/**
+ * Handles the settings panel functionality for BubbleView.
+ *
+ * This class manages the settings panel visibility, animations, and controls
+ * for features like ad blocking and JavaScript toggles. It encapsulates all
+ * settings-related logic that was previously scattered throughout BubbleView.
+ *
+ * Responsibilities:
+ * - Settings panel show/hide with animations
+ * - Settings controls setup and event handling
+ * - Settings value updates and synchronization
+ * - Touch event handling for click-outside-to-close behavior
+ *
+ * @param context Android context for accessing resources and services
+ * @param settingsService Manager for persisting and retrieving user settings
+ * @param bubbleAnimator Enhanced animator for professional animations
+ */
+class BubbleSettingsPanel(
+    private val context: Context,
+    private val settingsService: SettingsService,
+    private val bubbleAnimator: BubbleAnimator
+) {
+
+    // Settings panel state
+    private var isVisible = false
+    private var isReaderMode = false
+    private var webView: WebView? = null
+
+    // Settings controls - will be initialized when panel is set up
+    private var adBlockSwitch: SwitchMaterial? = null
+    private var javascriptSwitch: SwitchMaterial? = null
+    private var btnNavBack: MaterialButton? = null
+    private var btnNavForward: MaterialButton? = null
+    private var btnSaveArticleIcon: MaterialButton? = null
+    private var btnShareIcon: MaterialButton? = null
+
+    // UI sections
+    private var browserSettingsSection: View? = null
+    private var readerSettingsSection: View? = null
+
+    // Reader mode controls
+    private var btnFontDecrease: MaterialButton? = null
+    private var btnFontIncrease: MaterialButton? = null
+    private var fontSizeDisplay: TextView? = null
+    private var btnBgWhite: MaterialButton? = null
+    private var btnBgSepia: MaterialButton? = null
+    private var btnBgDark: MaterialButton? = null
+    private var btnAlignLeft: MaterialButton? = null
+    private var btnAlignCenter: MaterialButton? = null
+    private var btnAlignRight: MaterialButton? = null
+    private var btnAlignJustify: MaterialButton? = null
+
+    // Callback interface for BubbleView to respond to settings changes
+    interface SettingsPanelListener {
+        fun onAdBlockingChanged(enabled: Boolean)
+        fun onJavaScriptChanged(enabled: Boolean)
+        fun onSettingsPanelVisibilityChanged(isVisible: Boolean)
+        fun onReaderFontSizeChanged(size: Int)
+        fun onReaderBackgroundChanged(background: String)
+        fun onReaderTextAlignChanged(alignment: String)
+        fun onSaveOfflineRequested()
+        fun onShareRequested()
+    }
+
+    private var listener: SettingsPanelListener? = null
+
+    /**
+     * Set the listener for settings panel events
+     */
+    fun setListener(listener: SettingsPanelListener?) {
+        this.listener = listener
+    }
+
+    /**
+     * Initialize the settings panel with the provided view and controls
+     *
+     * @param settingsPanel The root view of the settings panel
+     * @param webView The WebView instance to apply settings changes to
+     */
+    fun initialize(settingsPanel: View, webView: WebView) {
+        this.webView = webView
+        setupSettingsControls(settingsPanel, webView)
+        setupReaderModeControls(settingsPanel)
+        setupTouchHandling(settingsPanel)
+    }
+
+    /**
+     * Set up settings panel controls and their event listeners
+     *
+     * @param settingsPanel The root view of the settings panel
+     * @param webView The WebView instance to apply settings changes to
+     */
+    private fun setupSettingsControls(settingsPanel: View, webView: WebView) {
+        // Get UI sections
+        browserSettingsSection = settingsPanel.findViewById(R.id.browser_settings_section)
+        readerSettingsSection = settingsPanel.findViewById(R.id.reader_settings_section)
+
+        // Get new controls
+        btnNavBack = settingsPanel.findViewById(R.id.btn_nav_back)
+        btnNavForward = settingsPanel.findViewById(R.id.btn_nav_forward)
+        btnSaveArticleIcon = settingsPanel.findViewById(R.id.btn_save_article_icon)
+        btnShareIcon = settingsPanel.findViewById(R.id.btn_share_icon)
+
+        // Set up ad blocking switch
+        adBlockSwitch = settingsPanel.findViewById(R.id.ad_block_switch)
+        adBlockSwitch?.let { switch ->
+            switch.isChecked = settingsService.isAdBlockEnabled()
+            switch.setOnCheckedChangeListener { _, isChecked ->
+                settingsService.setAdBlockEnabled(isChecked)
+                listener?.onAdBlockingChanged(isChecked)
+
+                // Reload page to apply ad blocking changes
+                if (webView.visibility == View.VISIBLE) {
+                    webView.reload()
+                }
+            }
+        }
+
+        // Set up JavaScript switch
+        javascriptSwitch = settingsPanel.findViewById(R.id.javascript_switch)
+        javascriptSwitch?.let { switch ->
+            switch.isChecked = settingsService.isJavaScriptEnabled()
+            switch.setOnCheckedChangeListener { _, isChecked ->
+                settingsService.setJavaScriptEnabled(isChecked)
+                webView.settings.javaScriptEnabled = isChecked
+                listener?.onJavaScriptChanged(isChecked)
+
+                // Reload page to apply JavaScript changes
+                if (webView.visibility == View.VISIBLE) {
+                    webView.reload()
+                }
+            }
+        }
+
+        // Set up navigation buttons
+        btnNavBack?.setOnClickListener {
+            webView.goBack()
+            // Update button states after navigation
+            updateNavigationButtons(webView)
+        }
+
+        btnNavForward?.setOnClickListener {
+            webView.goForward()
+            // Update button states after navigation
+            updateNavigationButtons(webView)
+        }
+
+        // Set up save article icon
+        btnSaveArticleIcon?.setOnClickListener {
+            listener?.onSaveOfflineRequested()
+            // Hide the settings panel after the action
+            settingsPanel.post {
+                hide(settingsPanel)
+            }
+        }
+
+        // Set up share icon
+        btnShareIcon?.setOnClickListener {
+            listener?.onShareRequested()
+            // Hide the settings panel after the action
+            settingsPanel.post {
+                hide(settingsPanel)
+            }
+        }
+    }
+
+    /**
+     * Set up reader mode controls and their event listeners
+     *
+     * @param settingsPanel The root view of the settings panel
+     */
+    private fun setupReaderModeControls(settingsPanel: View) {
+        // Initialize reader mode controls
+        btnFontDecrease = settingsPanel.findViewById(R.id.btn_font_decrease)
+        btnFontIncrease = settingsPanel.findViewById(R.id.btn_font_increase)
+        fontSizeDisplay = settingsPanel.findViewById(R.id.font_size_display)
+        btnBgWhite = settingsPanel.findViewById(R.id.btn_bg_white)
+        btnBgSepia = settingsPanel.findViewById(R.id.btn_bg_sepia)
+        btnBgDark = settingsPanel.findViewById(R.id.btn_bg_dark)
+        btnAlignLeft = settingsPanel.findViewById(R.id.btn_align_left)
+        btnAlignCenter = settingsPanel.findViewById(R.id.btn_align_center)
+        btnAlignRight = settingsPanel.findViewById(R.id.btn_align_right)
+        btnAlignJustify = settingsPanel.findViewById(R.id.btn_align_justify)
+
+        // Font size controls
+        btnFontDecrease?.setOnClickListener {
+            val currentSize = settingsService.getReaderFontSize()
+            val newSize = (currentSize - 1).coerceAtLeast(8)
+            settingsService.setReaderFontSize(newSize)
+            updateFontSizeDisplay()
+            updateFontSizeButtons()
+            listener?.onReaderFontSizeChanged(newSize)
+        }
+
+        btnFontIncrease?.setOnClickListener {
+            val currentSize = settingsService.getReaderFontSize()
+            val newSize = (currentSize + 1).coerceAtMost(32)
+            settingsService.setReaderFontSize(newSize)
+            updateFontSizeDisplay()
+            updateFontSizeButtons()
+            listener?.onReaderFontSizeChanged(newSize)
+        }
+
+        // Background color controls
+        btnBgWhite?.setOnClickListener {
+            settingsService.setReaderBackground(SettingsService.READER_BG_WHITE)
+            updateBackgroundButtons()
+            listener?.onReaderBackgroundChanged(SettingsService.READER_BG_WHITE)
+        }
+
+        btnBgSepia?.setOnClickListener {
+            settingsService.setReaderBackground(SettingsService.READER_BG_SEPIA)
+            updateBackgroundButtons()
+            listener?.onReaderBackgroundChanged(SettingsService.READER_BG_SEPIA)
+        }
+
+        btnBgDark?.setOnClickListener {
+            settingsService.setReaderBackground(SettingsService.READER_BG_DARK)
+            updateBackgroundButtons()
+            listener?.onReaderBackgroundChanged(SettingsService.READER_BG_DARK)
+        }
+
+        // Text alignment controls
+        btnAlignLeft?.setOnClickListener {
+            settingsService.setReaderTextAlign(SettingsService.READER_ALIGN_LEFT)
+            updateAlignmentButtons()
+            listener?.onReaderTextAlignChanged(SettingsService.READER_ALIGN_LEFT)
+        }
+
+        btnAlignCenter?.setOnClickListener {
+            settingsService.setReaderTextAlign(SettingsService.READER_ALIGN_CENTER)
+            updateAlignmentButtons()
+            listener?.onReaderTextAlignChanged(SettingsService.READER_ALIGN_CENTER)
+        }
+
+        btnAlignRight?.setOnClickListener {
+            settingsService.setReaderTextAlign(SettingsService.READER_ALIGN_RIGHT)
+            updateAlignmentButtons()
+            listener?.onReaderTextAlignChanged(SettingsService.READER_ALIGN_RIGHT)
+        }
+
+        btnAlignJustify?.setOnClickListener {
+            settingsService.setReaderTextAlign(SettingsService.READER_ALIGN_JUSTIFY)
+            updateAlignmentButtons()
+            listener?.onReaderTextAlignChanged(SettingsService.READER_ALIGN_JUSTIFY)
+        }
+    }
+
+    /**
+     * Set up touch handling for the settings panel to prevent unwanted closures
+     *
+     * @param settingsPanel The root view of the settings panel
+     */
+    private fun setupTouchHandling(settingsPanel: View) {
+        // Prevent settings panel from closing when clicking on it
+        settingsPanel.setOnTouchListener { _, _ ->
+            // Consume touch events to prevent them from propagating to parent views
+            // This ensures settings panel stays open when interacting with its content
+            true
+        }
+    }
+
+    /**
+     * Toggle settings panel visibility
+     *
+     * @param panel The settings panel view to toggle
+     */
+    fun toggle(panel: View) {
+        if (isVisible) {
+            hide(panel)
+        } else {
+            show(panel)
+        }
+    }
+
+    /**
+     * Show settings panel with animation
+     *
+     * @param panel The settings panel view to show
+     * @param triggerButton Optional button that triggered the panel (for positioning)
+     */
+    fun show(panel: View, triggerButton: View? = null) {
+        if (isVisible) return // Already visible
+
+        // Update settings values to current state
+        updateSettingsValues()
+
+        // Show panel with enhanced animation
+        isVisible = true
+        listener?.onSettingsPanelVisibilityChanged(true)
+
+        bubbleAnimator.animateSettingsPanelShow(panel, triggerButton) {
+            // Animation complete
+        }
+    }
+
+    /**
+     * Hide settings panel with animation
+     *
+     * @param panel The settings panel view to hide
+     */
+    fun hide(panel: View) {
+        if (!isVisible) return // Already hidden
+
+        isVisible = false
+
+        bubbleAnimator.animateSettingsPanelHide(panel) {
+            listener?.onSettingsPanelVisibilityChanged(false)
+        }
+    }
+
+    /**
+     * Helper method to safely dismiss settings panel if it's visible
+     *
+     * @param panel The settings panel view to dismiss
+     */
+    fun dismissIfVisible(panel: View) {
+        if (isVisible) {
+            hide(panel)
+        }
+    }
+
+    /**
+     * Update settings values to reflect current state
+     */
+    private fun updateSettingsValues() {
+        // Update switches to reflect current settings state
+        adBlockSwitch?.isChecked = settingsService.isAdBlockEnabled()
+        javascriptSwitch?.isChecked = settingsService.isJavaScriptEnabled()
+    }
+
+    /**
+     * Check if the settings panel is currently visible
+     *
+     * @return true if the settings panel is visible, false otherwise
+     */
+    fun isVisible(): Boolean {
+        return isVisible
+    }
+
+    /**
+     * Handle touch events to determine if settings panel should be closed
+     * This method should be called from the parent view's touch handler
+     *
+     * @param event The motion event to process
+     * @param settingsPanel The settings panel view
+     * @return true if the touch was handled (panel was closed), false otherwise
+     */
+    fun handleTouchEvent(event: MotionEvent, settingsPanel: View): Boolean {
+        if (!isVisible || event.action != MotionEvent.ACTION_DOWN) {
+            return false
+        }
+
+        val touchX = event.rawX.toInt()
+        val touchY = event.rawY.toInt()
+
+        // Check if touch is not on settings panel
+        val settingsPanelRect = Rect()
+        settingsPanel.getGlobalVisibleRect(settingsPanelRect)
+
+        if (!settingsPanelRect.contains(touchX, touchY)) {
+            hide(settingsPanel)
+            return true
+        }
+
+        return false
+    }
+
+    /**
+     * Get current ad blocking setting
+     *
+     * @return true if ad blocking is enabled, false otherwise
+     */
+    fun isAdBlockEnabled(): Boolean {
+        return settingsService.isAdBlockEnabled()
+    }
+
+    /**
+     * Get current JavaScript setting
+     *
+     * @return true if JavaScript is enabled, false otherwise
+     */
+    fun isJavaScriptEnabled(): Boolean {
+        return settingsService.isJavaScriptEnabled()
+    }
+
+    /**
+     * Force update settings values (useful when settings change externally)
+     */
+    fun refreshSettingsValues() {
+        updateSettingsValues()
+        updateReaderModeValues()
+        webView?.let { updateNavigationButtons(it) }
+    }
+
+    /**
+     * Set reader mode state and update UI accordingly
+     */
+    fun setReaderMode(isReaderMode: Boolean) {
+        this.isReaderMode = isReaderMode
+        updatePanelSections()
+        if (isReaderMode) {
+            updateReaderModeValues()
+        }
+    }
+
+    /**
+     * Update which panel sections are visible based on reader mode state
+     */
+    private fun updatePanelSections() {
+        if (isReaderMode) {
+            browserSettingsSection?.visibility = View.GONE
+            readerSettingsSection?.visibility = View.VISIBLE
+        } else {
+            browserSettingsSection?.visibility = View.VISIBLE
+            readerSettingsSection?.visibility = View.GONE
+        }
+    }
+
+    /**
+     * Update all reader mode values to reflect current settings
+     */
+    private fun updateReaderModeValues() {
+        updateFontSizeDisplay()
+        updateFontSizeButtons()
+        updateBackgroundButtons()
+        updateAlignmentButtons()
+    }
+
+    /**
+     * Update font size display
+     */
+    private fun updateFontSizeDisplay() {
+        val fontSize = settingsService.getReaderFontSize()
+        fontSizeDisplay?.text = "${fontSize}sp"
+    }
+
+    /**
+     * Update font size button states
+     */
+    private fun updateFontSizeButtons() {
+        val fontSize = settingsService.getReaderFontSize()
+        val textColor = ContextCompat.getColor(context, android.R.color.black)
+        val backgroundColor = ContextCompat.getColor(context, android.R.color.white)
+
+        btnFontDecrease?.let { button ->
+            button.setBackgroundColor(backgroundColor)
+            button.setTextColor(textColor)
+            button.isEnabled = fontSize > 8
+            button.alpha = if (fontSize > 8) 1.0f else 0.5f
+        }
+
+        btnFontIncrease?.let { button ->
+            button.setBackgroundColor(backgroundColor)
+            button.setTextColor(textColor)
+            button.isEnabled = fontSize < 32
+            button.alpha = if (fontSize < 32) 1.0f else 0.5f
+        }
+    }
+
+    /**
+     * Update background button states
+     */
+    private fun updateBackgroundButtons() {
+        val currentBg = settingsService.getReaderBackground()
+        val strokeWidth = 4
+
+        // White button
+        btnBgWhite?.let { button ->
+            val whiteColor = ContextCompat.getColor(context, android.R.color.white)
+            val textColor = ContextCompat.getColor(context, android.R.color.black)
+            button.setBackgroundColor(whiteColor)
+            button.setTextColor(textColor)
+            button.strokeWidth = if (currentBg == SettingsService.READER_BG_WHITE) strokeWidth else 1
+            button.strokeColor = ContextCompat.getColorStateList(
+                context,
+                if (currentBg == SettingsService.READER_BG_WHITE) R.color.primary else android.R.color.darker_gray
+            )
+        }
+
+        // Sepia button
+        btnBgSepia?.let { button ->
+            val sepiaColor = ContextCompat.getColor(context, R.color.read_mode_background_sepia)
+            val textColor = ContextCompat.getColor(context, R.color.read_mode_text_sepia)
+            button.setBackgroundColor(sepiaColor)
+            button.setTextColor(textColor)
+            button.strokeWidth = if (currentBg == SettingsService.READER_BG_SEPIA) strokeWidth else 1
+            button.strokeColor = ContextCompat.getColorStateList(
+                context,
+                if (currentBg == SettingsService.READER_BG_SEPIA) R.color.primary else android.R.color.darker_gray
+            )
+        }
+
+        // Dark button
+        btnBgDark?.let { button ->
+            val darkColor = ContextCompat.getColor(context, R.color.read_mode_background_dark)
+            val textColor = ContextCompat.getColor(context, R.color.read_mode_text_dark)
+            button.setBackgroundColor(darkColor)
+            button.setTextColor(textColor)
+            button.strokeWidth = if (currentBg == SettingsService.READER_BG_DARK) strokeWidth else 1
+            button.strokeColor = ContextCompat.getColorStateList(
+                context,
+                if (currentBg == SettingsService.READER_BG_DARK) R.color.primary else android.R.color.darker_gray
+            )
+        }
+    }
+
+    /**
+     * Update navigation button states based on WebView capabilities
+     */
+    private fun updateNavigationButtons(webView: WebView) {
+        btnNavBack?.let { button ->
+            val canGoBack = webView.canGoBack()
+            button.isEnabled = canGoBack
+            button.alpha = if (canGoBack) 1.0f else 0.5f
+        }
+
+        btnNavForward?.let { button ->
+            val canGoForward = webView.canGoForward()
+            button.isEnabled = canGoForward
+            button.alpha = if (canGoForward) 1.0f else 0.5f
+        }
+    }
+
+    /**
+     * Update alignment button states
+     */
+    private fun updateAlignmentButtons() {
+        val currentAlign = settingsService.getReaderTextAlign()
+        val backgroundColor = ContextCompat.getColor(context, android.R.color.white)
+        val textColor = ContextCompat.getColor(context, android.R.color.black)
+        val strokeWidth = 4
+
+        // Helper function to update alignment button
+        fun updateAlignButton(button: MaterialButton?, isSelected: Boolean) {
+            button?.let {
+                it.setBackgroundColor(backgroundColor)
+                it.setTextColor(textColor)
+                it.strokeWidth = if (isSelected) strokeWidth else 1
+                it.strokeColor = ContextCompat.getColorStateList(
+                    context,
+                    if (isSelected) R.color.primary else android.R.color.darker_gray
+                )
+            }
+        }
+
+        updateAlignButton(btnAlignLeft, currentAlign == SettingsService.READER_ALIGN_LEFT)
+        updateAlignButton(btnAlignCenter, currentAlign == SettingsService.READER_ALIGN_CENTER)
+        updateAlignButton(btnAlignRight, currentAlign == SettingsService.READER_ALIGN_RIGHT)
+        updateAlignButton(btnAlignJustify, currentAlign == SettingsService.READER_ALIGN_JUSTIFY)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleStateManager.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleStateManager.kt
new file mode 100644
index 0000000..ec4a731
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleStateManager.kt
@@ -0,0 +1,434 @@
+package com.quick.browser.presentation.ui.browser
+
+import com.quick.browser.utils.Logger
+
+/**
+ * Manages the state of a BubbleView, including expansion state, dimensions, zoom, 
+ * toolbar visibility, and various mode states.
+ * 
+ * This class extracts state management logic from BubbleView to improve maintainability
+ * and testability while following the Single Responsibility Principle.
+ * 
+ * @property bubbleId Unique identifier for the bubble this state manager belongs to
+ */
+class BubbleStateManager(private val bubbleId: String) {
+    
+    companion object {
+        private const val TAG = "BubbleStateManager"
+        
+        // Default zoom level
+        const val DEFAULT_ZOOM_PERCENT = 100f
+        
+        // State change listeners
+        interface StateChangeListener {
+            fun onExpansionStateChanged(isExpanded: Boolean)
+            fun onActiveStateChanged(isActive: Boolean)
+            fun onDimensionsChanged(width: Int, height: Int)
+            fun onZoomChanged(zoomPercent: Float)
+            fun onToolbarVisibilityChanged(isVisible: Boolean)
+        }
+    }
+    
+    // State change listener
+    private var stateChangeListener: StateChangeListener? = null
+    
+    // ======================================
+    // Core Bubble State
+    // ======================================
+    
+    /**
+     * Whether the bubble is currently expanded to show content
+     */
+    private var _isBubbleExpanded = false
+    val isBubbleExpanded: Boolean get() = _isBubbleExpanded
+    
+    /**
+     * Whether the bubble is currently active (visible and interactive)
+     */
+    private var _isActive = false
+    val isActive: Boolean get() = _isActive
+    
+    /**
+     * Whether all bubbles are currently being shown (for visualization purposes)
+     */
+    private var _isShowingAllBubbles = false
+    val isShowingAllBubbles: Boolean get() = _isShowingAllBubbles
+    
+    /**
+     * Callback to invoke when the bubble is closed
+     */
+    private var onCloseListener: (() -> Unit)? = null
+    
+    // ======================================
+    // Dimension State
+    // ======================================
+    
+    /**
+     * Stored width of the expanded container
+     */
+    private var _storedWidth = 0
+    val storedWidth: Int get() = _storedWidth
+    
+    /**
+     * Stored height of the expanded container
+     */
+    private var _storedHeight = 0
+    val storedHeight: Int get() = _storedHeight
+    
+    /**
+     * Whether dimensions have been stored
+     */
+    private var _hasStoredDimensions = false
+    val hasStoredDimensions: Boolean get() = _hasStoredDimensions
+    
+    // ======================================
+    // Zoom State
+    // ======================================
+    
+    /**
+     * Current zoom level as a percentage (100% = normal size)
+     */
+    private var _currentZoomPercent = DEFAULT_ZOOM_PERCENT
+    val currentZoomPercent: Float get() = _currentZoomPercent
+    
+    // ======================================
+    // Toolbar State
+    // ======================================
+    
+    /**
+     * Whether the toolbar is currently visible
+     */
+    private var _isToolbarVisible = true
+    val isToolbarVisible: Boolean get() = _isToolbarVisible
+    
+    /**
+     * Last recorded scroll Y position (for toolbar animation)
+     */
+    private var _lastScrollY = 0
+    val lastScrollY: Int get() = _lastScrollY
+    
+    // ======================================
+    // Mode States
+    // ======================================
+    
+    /**
+     * Whether read mode is currently active
+     */
+    private var _isReadModeActive = false
+    val isReadModeActive: Boolean get() = _isReadModeActive
+    
+    /**
+     * Whether summary mode is currently active
+     */
+    private var _isSummaryModeActive = false
+    val isSummaryModeActive: Boolean get() = _isSummaryModeActive
+    
+    /**
+     * Whether settings panel is currently visible
+     */
+    private var _isSettingsPanelVisible = false
+    val isSettingsPanelVisible: Boolean get() = _isSettingsPanelVisible
+    
+    // ======================================
+    // State Management Methods
+    // ======================================
+    
+    /**
+     * Set the state change listener
+     * 
+     * @param listener The listener to notify of state changes
+     */
+    fun setStateChangeListener(listener: StateChangeListener) {
+        stateChangeListener = listener
+    }
+    
+    /**
+     * Toggle the expansion state of the bubble
+     * 
+     * @return The new expansion state
+     */
+    fun toggleExpansion(): Boolean {
+        setExpanded(!_isBubbleExpanded)
+        return _isBubbleExpanded
+    }
+    
+    /**
+     * Set the expansion state of the bubble
+     * 
+     * @param expanded Whether the bubble should be expanded
+     */
+    fun setExpanded(expanded: Boolean) {
+        if (_isBubbleExpanded != expanded) {
+            _isBubbleExpanded = expanded
+            Logger.d(TAG, "Bubble $bubbleId expansion state changed to: $expanded")
+            stateChangeListener?.onExpansionStateChanged(expanded)
+            
+            // Reset toolbar state when expanding
+            if (expanded) {
+                setToolbarVisible(true)
+            }
+        }
+    }
+    
+    /**
+     * Set the active state of the bubble
+     * 
+     * @param active Whether the bubble should be active
+     */
+    fun setActive(active: Boolean) {
+        if (_isActive != active) {
+            _isActive = active
+            Logger.d(TAG, "Bubble $bubbleId active state changed to: $active")
+            stateChangeListener?.onActiveStateChanged(active)
+        }
+    }
+    
+    /**
+     * Set whether all bubbles are being shown
+     * 
+     * @param showing Whether all bubbles are being shown
+     */
+    fun setShowingAllBubbles(showing: Boolean) {
+        _isShowingAllBubbles = showing
+        Logger.d(TAG, "Bubble $bubbleId showing all bubbles state changed to: $showing")
+    }
+    
+    /**
+     * Set the close listener
+     * 
+     * @param listener Callback to invoke when bubble is closed
+     */
+    fun setOnCloseListener(listener: (() -> Unit)?) {
+        onCloseListener = listener
+    }
+    
+    /**
+     * Trigger the close listener
+     */
+    fun triggerClose() {
+        Logger.d(TAG, "Triggering close for bubble $bubbleId")
+        onCloseListener?.invoke()
+    }
+    
+    // ======================================
+    // Dimension Management
+    // ======================================
+    
+    /**
+     * Update the stored dimensions
+     * 
+     * @param width The width to store
+     * @param height The height to store
+     */
+    fun updateDimensions(width: Int, height: Int) {
+        if (width > 0 && height > 0) {
+            _storedWidth = width
+            _storedHeight = height
+            _hasStoredDimensions = true
+            Logger.d(TAG, "Updated dimensions for bubble $bubbleId: ${width}x${height}")
+            stateChangeListener?.onDimensionsChanged(width, height)
+        } else {
+            Logger.w(TAG, "Invalid dimensions provided for bubble $bubbleId: ${width}x${height}")
+        }
+    }
+    
+    /**
+     * Clear stored dimensions
+     */
+    fun clearDimensions() {
+        _storedWidth = 0
+        _storedHeight = 0
+        _hasStoredDimensions = false
+        Logger.d(TAG, "Cleared dimensions for bubble $bubbleId")
+    }
+    
+    /**
+     * Get dimensions as a Pair
+     * 
+     * @return Pair of (width, height) or null if no dimensions stored
+     */
+    fun getDimensions(): Pair<Int, Int>? {
+        return if (_hasStoredDimensions && _storedWidth > 0 && _storedHeight > 0) {
+            Pair(_storedWidth, _storedHeight)
+        } else {
+            null
+        }
+    }
+    
+    // ======================================
+    // Zoom Management
+    // ======================================
+    
+    /**
+     * Set the current zoom percentage
+     * 
+     * @param zoomPercent The zoom percentage (e.g., 75.0 for 75%)
+     */
+    fun setZoomPercent(zoomPercent: Float) {
+        val clampedZoom = zoomPercent.coerceIn(50f, 200f) // Reasonable zoom range
+        if (_currentZoomPercent != clampedZoom) {
+            _currentZoomPercent = clampedZoom
+            Logger.d(TAG, "Zoom changed for bubble $bubbleId: $clampedZoom%")
+            stateChangeListener?.onZoomChanged(clampedZoom)
+        }
+    }
+    
+    /**
+     * Reset zoom to default
+     */
+    fun resetZoom() {
+        setZoomPercent(DEFAULT_ZOOM_PERCENT)
+    }
+    
+    // ======================================
+    // Toolbar Management
+    // ======================================
+    
+    /**
+     * Set toolbar visibility
+     * 
+     * @param visible Whether the toolbar should be visible
+     */
+    fun setToolbarVisible(visible: Boolean) {
+        if (_isToolbarVisible != visible) {
+            _isToolbarVisible = visible
+            Logger.d(TAG, "Toolbar visibility changed for bubble $bubbleId: $visible")
+            stateChangeListener?.onToolbarVisibilityChanged(visible)
+        }
+    }
+    
+    /**
+     * Toggle toolbar visibility
+     * 
+     * @return The new visibility state
+     */
+    fun toggleToolbarVisibility(): Boolean {
+        setToolbarVisible(!_isToolbarVisible)
+        return _isToolbarVisible
+    }
+    
+    /**
+     * Update the last scroll Y position
+     * 
+     * @param scrollY The current scroll Y position
+     */
+    fun updateScrollY(scrollY: Int) {
+        _lastScrollY = scrollY
+    }
+    
+    // ======================================
+    // Mode State Management
+    // ======================================
+    
+    /**
+     * Set read mode state
+     * 
+     * @param active Whether read mode should be active
+     */
+    fun setReadModeActive(active: Boolean) {
+        if (_isReadModeActive != active) {
+            _isReadModeActive = active
+            Logger.d(TAG, "Read mode state changed for bubble $bubbleId: $active")
+            
+            // Exit summary mode if read mode is activated
+            if (active && _isSummaryModeActive) {
+                setSummaryModeActive(false)
+            }
+        }
+    }
+    
+    /**
+     * Set summary mode state
+     * 
+     * @param active Whether summary mode should be active
+     */
+    fun setSummaryModeActive(active: Boolean) {
+        if (_isSummaryModeActive != active) {
+            _isSummaryModeActive = active
+            Logger.d(TAG, "Summary mode state changed for bubble $bubbleId: $active")
+            
+            // Exit read mode if summary mode is activated
+            if (active && _isReadModeActive) {
+                setReadModeActive(false)
+            }
+        }
+    }
+    
+    /**
+     * Set settings panel visibility
+     * 
+     * @param visible Whether the settings panel should be visible
+     */
+    fun setSettingsPanelVisible(visible: Boolean) {
+        _isSettingsPanelVisible = visible
+        Logger.d(TAG, "Settings panel visibility changed for bubble $bubbleId: $visible")
+    }
+    
+    /**
+     * Exit all special modes (read mode, summary mode)
+     */
+    fun exitAllModes() {
+        setReadModeActive(false)
+        setSummaryModeActive(false)
+        setSettingsPanelVisible(false)
+        Logger.d(TAG, "Exited all modes for bubble $bubbleId")
+    }
+    
+    // ======================================
+    // State Reset and Cleanup
+    // ======================================
+    
+    /**
+     * Reset the bubble to its default state
+     */
+    fun resetToDefault() {
+        Logger.d(TAG, "Resetting bubble $bubbleId to default state")
+        
+        _isBubbleExpanded = false
+        _isActive = false
+        _isShowingAllBubbles = false
+        
+        // Don't reset dimensions as they should persist
+        
+        _currentZoomPercent = DEFAULT_ZOOM_PERCENT
+        _isToolbarVisible = true
+        _lastScrollY = 0
+        
+        exitAllModes()
+        
+        // Notify listener of state reset
+        stateChangeListener?.onExpansionStateChanged(false)
+        stateChangeListener?.onActiveStateChanged(false)
+        stateChangeListener?.onZoomChanged(DEFAULT_ZOOM_PERCENT)
+        stateChangeListener?.onToolbarVisibilityChanged(true)
+    }
+    
+    /**
+     * Get a summary of the current state for debugging
+     * 
+     * @return String representation of the current state
+     */
+    fun getStateSnapshot(): String {
+        return """
+            BubbleState[$bubbleId]:
+            - Expanded: $_isBubbleExpanded
+            - Active: $_isActive
+            - ShowingAll: $_isShowingAllBubbles
+            - Dimensions: ${if (_hasStoredDimensions) "${_storedWidth}x${_storedHeight}" else "none"}
+            - Zoom: $_currentZoomPercent%
+            - Toolbar: $_isToolbarVisible
+            - ReadMode: $_isReadModeActive
+            - SummaryMode: $_isSummaryModeActive
+            - SettingsPanel: $_isSettingsPanelVisible
+        """.trimIndent()
+    }
+    
+    /**
+     * Cleanup resources
+     */
+    fun cleanup() {
+        Logger.d(TAG, "Cleaning up state for bubble $bubbleId")
+        stateChangeListener = null
+        onCloseListener = null
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleSummaryManager.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleSummaryManager.kt
new file mode 100644
index 0000000..2839e4d
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleSummaryManager.kt
@@ -0,0 +1,438 @@
+package com.quick.browser.presentation.ui.browser
+
+import android.content.Context
+import android.graphics.Color
+import android.view.View
+import android.webkit.WebView
+import android.widget.*
+import androidx.core.content.ContextCompat
+import androidx.core.widget.NestedScrollView
+import com.google.android.material.button.MaterialButton
+import com.quick.browser.R
+import com.quick.browser.service.SummarizationService
+import com.quick.browser.utils.Logger
+import kotlinx.coroutines.*
+import org.jsoup.Jsoup
+
+/**
+ * Manages the summarization functionality for BubbleView.
+ *
+ * This class handles all summary-related operations including UI management,
+ * content extraction, summarization processing, and error handling. It provides
+ * a clean interface for toggling between web view and summary view.
+ *
+ * Responsibilities:
+ * - Summary mode toggle and UI state management
+ * - HTML content extraction and cleaning
+ * - AI-powered summarization processing
+ * - Summary results display and error handling
+ * - Background summarization for performance
+ *
+ * @param context Android context for accessing resources and services
+ * @param bubbleAnimator Enhanced animator for smooth mode transitions
+ */
+class BubbleSummaryManager(
+    private val context: Context,
+    private val summarizationService: SummarizationService,
+    private val bubbleAnimator: BubbleAnimator? = null
+) {
+
+    companion object {
+        private const val TAG = "BubbleSummaryManager"
+        private const val MIN_CONTENT_LENGTH = 100
+    }
+
+    // UI components - will be initialized when views are set up
+    private var summaryContainer: FrameLayout? = null
+    private var summaryContent: LinearLayout? = null
+    private var summaryProgress: ProgressBar? = null
+    private var btnSummarize: MaterialButton? = null
+    private var webView: WebView? = null
+
+    // Summary state
+    private var isSummaryMode = false
+    private var isSummarizationInProgress = false
+    private var cachedHtmlContent: String? = null
+
+    // Summarization service is now injected via constructor
+
+    // Callback interface for BubbleView to respond to summary events
+    interface SummaryManagerListener {
+        fun onSummaryModeChanged(isSummaryMode: Boolean)
+        fun onSummarizationStarted()
+        fun onSummarizationCompleted(success: Boolean)
+        fun onSummarizationError(message: String)
+        fun onSummaryScrollDown()
+        fun onSummaryScrollUp()
+    }
+
+    private var listener: SummaryManagerListener? = null
+
+    /**
+     * Set the listener for summary manager events
+     */
+    fun setListener(listener: SummaryManagerListener?) {
+        this.listener = listener
+    }
+
+    /**
+     * Initialize the summary manager with the required UI components
+     *
+     * @param summaryContainer The container for summary content
+     * @param summaryContent The content layout for summary points
+     * @param summaryProgress The progress indicator for summarization
+     * @param btnSummarize The button to toggle summary mode
+     * @param webView The WebView instance to extract content from
+     */
+    fun initialize(
+        summaryContainer: FrameLayout,
+        summaryContent: LinearLayout,
+        summaryProgress: ProgressBar,
+        btnSummarize: MaterialButton,
+        webView: WebView
+    ) {
+        this.summaryContainer = summaryContainer
+        this.summaryContent = summaryContent
+        this.summaryProgress = summaryProgress
+        this.btnSummarize = btnSummarize
+        this.webView = webView
+
+        setupSummaryViews()
+    }
+
+    /**
+     * Set up summary views with proper styling and background
+     */
+    private fun setupSummaryViews() {
+        // Set background color for summary container and content
+        summaryContainer?.setBackgroundColor(Color.WHITE)
+        summaryContent?.setBackgroundColor(Color.WHITE)
+        
+        // Set up scroll listener for the summary container
+        summaryContainer?.let { container ->
+            // If it's a NestedScrollView, we can set up a scroll listener
+            if (container is NestedScrollView) {
+                container.setOnScrollChangeListener { _, _, scrollY, _, oldScrollY ->
+                    // Detect scroll direction
+                    if (scrollY > oldScrollY) {
+                        // Scrolling down
+                        listener?.onSummaryScrollDown()
+                    } else if (scrollY < oldScrollY) {
+                        // Scrolling up
+                        listener?.onSummaryScrollUp()
+                    }
+                }
+            }
+        }
+    }
+
+    /**
+     * Toggle between web view and summary view
+     */
+    fun toggleSummaryMode() {
+        if (isSummaryMode) {
+            showWebViewOnly()
+        } else {
+            showSummaryView()
+        }
+    }
+
+    /**
+     * Show only the web view, hide summary
+     */
+    fun showWebViewOnly() {
+        if (!isSummaryMode) return // Already in web view mode
+
+        isSummaryMode = false
+
+        // Update button appearance
+        btnSummarize?.apply {
+            setIconResource(R.drawable.ic_summarize)
+            setIconTint(ContextCompat.getColorStateList(context, R.color.colorPrimary))
+            contentDescription = context.getString(R.string.summarize)
+        }
+
+        // Use enhanced animation if available
+        if (bubbleAnimator != null && summaryContainer != null && webView != null) {
+            bubbleAnimator.animateFromSummaryMode(summaryContainer!!, webView!!) {
+                Toast.makeText(context, R.string.showing_web_view, Toast.LENGTH_SHORT).show()
+                listener?.onSummaryModeChanged(false)
+            }
+        } else {
+            // Fallback to direct visibility change
+            webView?.visibility = View.VISIBLE
+            summaryContainer?.visibility = View.GONE
+            Toast.makeText(context, R.string.showing_web_view, Toast.LENGTH_SHORT).show()
+            listener?.onSummaryModeChanged(false)
+        }
+    }
+
+    /**
+     * Show the summary view and hide the web view
+     */
+    fun showSummaryView() {
+        if (webView?.visibility != View.VISIBLE) {
+            Toast.makeText(context, R.string.summary_error, Toast.LENGTH_SHORT).show()
+            return
+        }
+
+        if (isSummaryMode) return // Already in summary mode
+
+        isSummaryMode = true
+        summaryProgress?.visibility = View.VISIBLE
+        summaryContent?.removeAllViews()
+
+        // Update button appearance
+        btnSummarize?.apply {
+            setIconResource(R.drawable.ic_web_page)
+            setIconTint(ContextCompat.getColorStateList(context, R.color.colorPrimary))
+            contentDescription = context.getString(R.string.show_web_view)
+        }
+
+        // Use enhanced animation if available
+        if (bubbleAnimator != null && summaryContainer != null && webView != null) {
+            bubbleAnimator.animateToSummaryMode(webView!!, summaryContainer!!) {
+                Toast.makeText(context, R.string.summarizing, Toast.LENGTH_SHORT).show()
+                listener?.onSummaryModeChanged(true)
+                listener?.onSummarizationStarted()
+                summarizeContent()
+            }
+        } else {
+            // Fallback to direct visibility change
+            webView?.visibility = View.GONE
+            summaryContainer?.visibility = View.VISIBLE
+            Toast.makeText(context, R.string.summarizing, Toast.LENGTH_SHORT).show()
+            listener?.onSummaryModeChanged(true)
+            listener?.onSummarizationStarted()
+            summarizeContent()
+        }
+    }
+
+    /**
+     * Summarize the current page content
+     */
+    private fun summarizeContent() {
+        try {
+            if (cachedHtmlContent != null && cachedHtmlContent!!.length > MIN_CONTENT_LENGTH) {
+                processSummarization(cachedHtmlContent!!)
+            } else {
+                extractContentFromWebView { htmlContent ->
+                    if (htmlContent != null) {
+                        cachedHtmlContent = htmlContent
+                        processSummarization(htmlContent)
+                    } else {
+                        showSummaryError(context.getString(R.string.summary_error))
+                    }
+                }
+            }
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error in summarizeContent", e)
+            showSummaryError(context.getString(R.string.summary_error))
+        }
+    }
+
+    /**
+     * Extract HTML content from the WebView
+     */
+    private fun extractContentFromWebView(callback: (String?) -> Unit) {
+        webView?.evaluateJavascript("(function() { return document.documentElement.outerHTML; })()") { html ->
+            try {
+                if (html != null && html.length > 50) {
+                    val unescapedHtml = html.substring(1, html.length - 1)
+                        .replace("\\\"", "\"")
+                        .replace("\\n", "\n")
+                        .replace("\\\\", "\\")
+                    callback(unescapedHtml)
+                } else {
+                    callback(null)
+                }
+            } catch (e: Exception) {
+                Logger.e(TAG, "Error processing HTML for summary", e)
+                callback(null)
+            }
+        }
+    }
+
+    /**
+     * Process the HTML content for summarization
+     */
+    private fun processSummarization(htmlContent: String) {
+        isSummarizationInProgress = true
+        CoroutineScope(Dispatchers.Main).launch {
+            try {
+                // Add a timeout for the entire summarization process
+                withTimeout(30000) { // 30 second timeout
+                    val cleanedHtml = withContext(Dispatchers.IO) {
+                        try {
+                            cleanHtmlContent(htmlContent)
+                        } catch (e: Exception) {
+                            Logger.e(TAG, "Error cleaning HTML", e)
+                            null
+                        }
+                    }
+
+                    if (cleanedHtml == null || cleanedHtml.length < MIN_CONTENT_LENGTH) {
+                        showSummaryError(context.getString(R.string.summary_not_article))
+                        listener?.onSummarizationCompleted(false)
+                        return@withTimeout
+                    }
+
+                    val summaryPoints = withContext(Dispatchers.Default) {
+                        summarizationService.summarizeContent(cleanedHtml)
+                    }
+
+                    if (summaryPoints.isNotEmpty()) {
+                        displaySummaryPoints(summaryPoints)
+                        listener?.onSummarizationCompleted(true)
+                    } else {
+                        showSummaryError(context.getString(R.string.summary_not_article))
+                        listener?.onSummarizationCompleted(false)
+                    }
+                }
+            } catch (e: Exception) {
+                Logger.e(TAG, "Error processing summarization", e)
+                showSummaryError(context.getString(R.string.summary_error))
+                listener?.onSummarizationError(e.message ?: "Unknown error")
+            } catch (e: TimeoutCancellationException) {
+                Logger.e(TAG, "Summarization timed out", e)
+                showSummaryError(context.getString(R.string.summary_timeout))
+                listener?.onSummarizationError("Summarization timed out")
+            } finally {
+                isSummarizationInProgress = false
+            }
+        }
+    }
+
+    /**
+     * Clean HTML content by removing unwanted elements and extracting text
+     */
+    private fun cleanHtmlContent(htmlContent: String): String? {
+        val doc = Jsoup.parse(htmlContent)
+        doc.select("script, style, noscript, iframe, object, embed, header, footer, nav, aside").remove()
+        return doc.text()
+    }
+
+    /**
+     * Display the summary points in the UI
+     */
+    private fun displaySummaryPoints(points: List<String>) {
+        summaryProgress?.visibility = View.GONE
+        summaryContent?.let { container ->
+            for (point in points) {
+                val bulletPoint = createSummaryPointView(point)
+                container.addView(bulletPoint)
+            }
+        }
+    }
+
+    /**
+     * Create a styled TextView for a summary point
+     */
+    private fun createSummaryPointView(point: String): TextView {
+        return TextView(context).apply {
+            text = "• $point"
+            setPadding(16, 16, 16, 16)
+            textSize = 16f
+            setTextColor(ContextCompat.getColor(context, android.R.color.black))
+        }
+    }
+
+    /**
+     * Show an error in the summary view
+     */
+    private fun showSummaryError(message: String) {
+        summaryProgress?.visibility = View.GONE
+        summaryContent?.let { container ->
+            val errorText = TextView(context).apply {
+                text = message
+                setPadding(16, 16, 16, 16)
+                textSize = 16f
+                setTextColor(ContextCompat.getColor(context, android.R.color.holo_red_dark))
+            }
+            container.addView(errorText)
+        }
+    }
+
+    /**
+     * Start background summarization of the HTML content
+     * This is useful for pre-caching summaries without showing UI
+     */
+    fun startBackgroundSummarization(htmlContent: String) {
+        if (isSummarizationInProgress || htmlContent.length < MIN_CONTENT_LENGTH) return
+
+        isSummarizationInProgress = true
+        CoroutineScope(Dispatchers.IO).launch {
+            try {
+                // Add a timeout for background summarization
+                withTimeout(30000) { // 30 second timeout
+                    val cleanedText = cleanHtmlContent(htmlContent)
+                    if (cleanedText != null && cleanedText.length > MIN_CONTENT_LENGTH) {
+                        summarizationService.summarizeContent(cleanedText)
+                    }
+                }
+            } catch (e: Exception) {
+                Logger.e(TAG, "Background summarization failed", e)
+            } catch (e: TimeoutCancellationException) {
+                Logger.e(TAG, "Background summarization timed out", e)
+            } finally {
+                isSummarizationInProgress = false
+            }
+        }
+    }
+
+    /**
+     * Cache HTML content for faster summarization
+     */
+    fun cacheHtmlContent(htmlContent: String) {
+        if (htmlContent.length > MIN_CONTENT_LENGTH) {
+            cachedHtmlContent = htmlContent
+        }
+    }
+
+    /**
+     * Check if currently in summary mode
+     */
+    fun isSummaryMode(): Boolean {
+        return isSummaryMode
+    }
+
+    /**
+     * Check if summarization is currently in progress
+     */
+    fun isSummarizationInProgress(): Boolean {
+        return isSummarizationInProgress
+    }
+
+    /**
+     * Clear cached content to force re-summarization
+     */
+    fun clearCache() {
+        cachedHtmlContent = null
+    }
+
+    /**
+     * Get the current cached HTML content
+     */
+    fun getCachedContent(): String? {
+        return cachedHtmlContent
+    }
+
+    /**
+     * Force exit summary mode (useful when bubble is collapsed)
+     */
+    fun forceExitSummaryMode() {
+        if (isSummaryMode) {
+            isSummaryMode = false
+            webView?.visibility = View.VISIBLE
+            summaryContainer?.visibility = View.GONE
+
+            btnSummarize?.apply {
+                setIconResource(R.drawable.ic_summarize)
+                setIconTint(ContextCompat.getColorStateList(context, R.color.colorPrimary))
+                contentDescription = context.getString(R.string.summarize)
+            }
+
+            listener?.onSummaryModeChanged(false)
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleTouchHandler.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleTouchHandler.kt
new file mode 100644
index 0000000..b7d0079
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleTouchHandler.kt
@@ -0,0 +1,414 @@
+package com.quick.browser.presentation.ui.browser
+
+import android.content.Context
+import android.graphics.Rect
+import android.view.MotionEvent
+import android.view.View
+import android.view.ViewConfiguration
+import android.view.WindowManager
+import android.widget.FrameLayout
+import android.widget.ImageView
+import com.google.android.material.button.MaterialButton
+import com.quick.browser.utils.Logger
+import kotlin.math.abs
+import kotlin.math.hypot
+import kotlin.math.max
+import kotlin.math.min
+
+/**
+ * Handles all touch interactions for the BubbleView including:
+ * - Bubble dragging
+ * - Resize handle interactions
+ * - Toolbar dragging
+ * - Settings panel touch handling
+ *
+ * This class extracts the complex touch handling logic from BubbleView
+ * to improve maintainability and testability.
+ */
+class BubbleTouchHandler(
+    private val context: Context,
+    private val bubbleView: BubbleView
+) {
+
+    // Touch handling state
+    private var initialX = 0f
+    private var initialY = 0f
+    private var initialTouchX = 0f
+    private var initialTouchY = 0f
+    private var isDragging = false
+
+    // Resize state
+    private var isResizing = false
+    private var activeResizeHandle: ImageView? = null
+    private var initialWidth = 0
+    private var initialHeight = 0
+
+    // Services and utilities
+    private val touchSlop = ViewConfiguration.get(context).scaledTouchSlop
+    private val windowManager = context.getSystemService(Context.WINDOW_SERVICE) as WindowManager
+
+    // Delegate interface for communicating with BubbleView
+    interface BubbleTouchDelegate {
+        fun onBubbleDragged(x: Int, y: Int)
+        fun onBubbleClicked()
+        fun onBubbleClosed()
+        fun onBubbleToggleExpanded()
+        fun hideBubbleSettingsPanel()
+        fun isSettingsPanelVisible(): Boolean
+        fun isBubbleExpanded(): Boolean
+        fun getExpandedContainer(): View
+        fun getSettingsPanel(): View
+        fun getSettingsButton(): MaterialButton
+        fun getToolbarContainer(): View
+        fun getResizeHandles(): List<ImageView>
+        fun getResizeHandlesContainer(): View
+        fun getResizeBar(): View
+        fun getContentContainer(): FrameLayout
+        fun getWebViewContainer(): View
+        fun updateDimensions(width: Int, height: Int)
+        fun applyBubbleDynamicZoom(zoomPercent: Float)
+        fun calculateBubbleZoomLevel(widthRatio: Float): Float
+        fun getCurrentZoomPercent(): Float
+        fun performClick(): Boolean
+    }
+
+    private lateinit var delegate: BubbleTouchDelegate
+
+    companion object {
+        private const val TAG = "BubbleTouchHandler"
+    }
+
+    /**
+     * Initialize the touch handler with the delegate
+     */
+    fun initialize(delegate: BubbleTouchDelegate) {
+        this.delegate = delegate
+        setupResizeHandles()
+    }
+
+    /**
+     * Handle touch events for the main bubble view
+     */
+    fun handleTouchEvent(event: MotionEvent): Boolean {
+        if (bubbleView.layoutParams !is WindowManager.LayoutParams) return false
+
+        // If we're currently resizing, let the resize handle touch listener handle it
+        if (isResizing) {
+            return true
+        }
+
+        // Handle settings panel touch logic
+        if (handleSettingsPanelTouch(event)) {
+            return false // Settings panel interaction handled
+        }
+
+        val params = bubbleView.layoutParams as WindowManager.LayoutParams
+        val screenWidth = context.resources.displayMetrics.widthPixels
+        val screenHeight = context.resources.displayMetrics.heightPixels
+
+        when (event.action) {
+            MotionEvent.ACTION_DOWN -> {
+                handleTouchDown(event, params)
+                return true
+            }
+
+            MotionEvent.ACTION_MOVE -> {
+                handleTouchMove(event, params, screenWidth, screenHeight)
+                return isDragging
+            }
+
+            MotionEvent.ACTION_UP -> {
+                handleTouchUp(params)
+                return true
+            }
+        }
+
+        return false
+    }
+
+    /**
+     * Handle settings panel touch interactions
+     */
+    private fun handleSettingsPanelTouch(event: MotionEvent): Boolean {
+        if (!delegate.isSettingsPanelVisible() || event.action != MotionEvent.ACTION_DOWN) {
+            return false
+        }
+
+        val touchX = event.rawX.toInt()
+        val touchY = event.rawY.toInt()
+
+        // Get rect for settings panel
+        val settingsPanelRect = Rect()
+        delegate.getSettingsPanel().getGlobalVisibleRect(settingsPanelRect)
+
+        // Get rect for settings button
+        val settingsButtonRect = Rect()
+        delegate.getSettingsButton().getGlobalVisibleRect(settingsButtonRect)
+
+        // Check if touch is inside settings panel - if so, keep settings open
+        if (settingsPanelRect.contains(touchX, touchY)) {
+            return true // Allow normal interaction with settings
+        }
+
+        // Check if touch is on settings button - let button handle toggle
+        if (settingsButtonRect.contains(touchX, touchY)) {
+            return true // Let button handle the click
+        }
+
+        // For any other click, hide settings
+        delegate.hideBubbleSettingsPanel()
+        return false // Don't consume the event
+    }
+
+    /**
+     * Handle the touch down event
+     */
+    private fun handleTouchDown(event: MotionEvent, params: WindowManager.LayoutParams) {
+        initialX = params.x.toFloat()
+        initialY = params.y.toFloat()
+        initialTouchX = event.rawX
+        initialTouchY = event.rawY
+        isDragging = false
+    }
+
+    /**
+     * Handle the touch move event
+     */
+    private fun handleTouchMove(
+        event: MotionEvent,
+        params: WindowManager.LayoutParams,
+        screenWidth: Int,
+        screenHeight: Int
+    ) {
+
+        // Only handle dragging when bubble is collapsed
+        if (delegate.isBubbleExpanded()) {
+            return
+        }
+        
+        val dx = event.rawX - initialTouchX
+        val dy = event.rawY - initialTouchY
+
+        // Check if we've moved enough to consider it a drag
+        if (!isDragging && hypot(dx, dy) > touchSlop) {
+            isDragging = true
+        }
+
+        if (isDragging) {
+            // Keep bubble within screen bounds
+            val newX = max(0, min(screenWidth - bubbleView.width, (initialX + dx).toInt()))
+            val newY = max(0, min(screenHeight - bubbleView.height, (initialY + dy).toInt()))
+
+            params.x = newX
+            params.y = newY
+
+            // Check if the bubble is moved to the bottom edge
+            if (params.y >= screenHeight - bubbleView.height) {
+                delegate.onBubbleClosed()
+                return
+            }
+
+            windowManager.updateViewLayout(bubbleView, params)
+            delegate.onBubbleDragged(newX, newY)
+        }
+    }
+
+    /**
+     * Handle the touch up event
+     */
+    private fun handleTouchUp(params: WindowManager.LayoutParams) {
+        if (!isDragging) {
+            delegate.onBubbleClicked()
+        } else {
+            windowManager.updateViewLayout(bubbleView, params)
+        }
+        isDragging = false
+    }
+
+    /**
+     * Set up resize handles with touch listeners
+     */
+    private fun setupResizeHandles() {
+        delegate.getResizeHandles().forEach { handle ->
+            setupResizeHandleTouch(handle)
+        }
+    }
+
+    /**
+     * Set up touch listener for a specific resize handle
+     */
+    private fun setupResizeHandleTouch(handle: ImageView) {
+        handle.setOnTouchListener { _, event ->
+            if (bubbleView.layoutParams !is WindowManager.LayoutParams) return@setOnTouchListener false
+
+            when (event.action) {
+                MotionEvent.ACTION_DOWN -> {
+                    // Start resizing
+                    initialTouchX = event.rawX
+                    initialTouchY = event.rawY
+                    initialWidth = delegate.getExpandedContainer().width
+                    initialHeight = delegate.getExpandedContainer().height
+                    isResizing = true
+                    activeResizeHandle = handle
+                    
+                    // Show resize handle when resizing starts
+                    handle.alpha = 1.0f
+                    return@setOnTouchListener true
+                }
+
+                MotionEvent.ACTION_MOVE -> {
+                    if (isResizing) {
+                        // Calculate the change in position
+                        val dx = event.rawX - initialTouchX
+                        val dy = event.rawY - initialTouchY
+
+                        // Resize based on which handle is being dragged
+                        resizeBubble(handle, dx, dy)
+                        return@setOnTouchListener true
+                    }
+                }
+
+                MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL -> {
+                    // Stop resizing
+                    isResizing = false
+                    activeResizeHandle = null
+                    
+                    // Hide resize handle after resizing is complete (make it transparent but keep visible for touch)
+                    handle.alpha = 0.0f
+                    return@setOnTouchListener true
+                }
+            }
+
+            return@setOnTouchListener false
+        }
+    }
+
+    /**
+     * Resize the bubble based on which handle is being dragged
+     */
+    private fun resizeBubble(handle: ImageView, dx: Float, dy: Float) {
+        // Define minimum and maximum dimensions (consistent with BubbleResizeBarHandler)
+        val minWidth = context.resources.displayMetrics.widthPixels / 3
+        val minHeight = (context.resources.displayMetrics.heightPixels / 3) * 3 / 4 // Reduce height by 25%
+        val maxWidth = context.resources.displayMetrics.widthPixels - 50
+        val maxHeight = context.resources.displayMetrics.heightPixels - 100
+
+        // Get current window position and dimensions
+        val windowParams = bubbleView.layoutParams as WindowManager.LayoutParams
+        val expandedContainer = delegate.getExpandedContainer()
+        val containerParams = expandedContainer.layoutParams
+
+        // Store original values to calculate changes
+        val originalX = windowParams.x
+        val originalY = windowParams.y
+        val originalWidth = containerParams.width
+        val originalHeight = containerParams.height
+
+        // Variables to track changes
+        var newWidth = originalWidth
+        var newHeight = originalHeight
+        var newX = originalX
+        var newY = originalY
+
+        // Get resize handles (now only bottom handles)
+        val resizeHandles = delegate.getResizeHandles()
+        val resizeHandleBottomLeft = resizeHandles[0] // Assuming order: BL, BR
+        val resizeHandleBottomRight = resizeHandles[1]
+
+        when (handle) {
+            resizeHandleBottomRight -> {
+                // Bottom-right corner: just resize width and height
+                newWidth = (initialWidth + dx).toInt().coerceIn(minWidth, maxWidth)
+                newHeight = (initialHeight + dy).toInt().coerceIn(minHeight, maxHeight)
+            }
+
+            resizeHandleBottomLeft -> {
+                // Bottom-left corner: resize width inversely and height directly
+                val desiredWidth = (initialWidth - dx).toInt().coerceIn(minWidth, maxWidth)
+                newHeight = (initialHeight + dy).toInt().coerceIn(minHeight, maxHeight)
+
+                // Calculate how much the width will actually change
+                val widthChange = originalWidth - desiredWidth
+
+                // Only change width if we can also adjust the X position
+                if (originalX + widthChange >= 0) {
+                    newWidth = desiredWidth
+                    newX = originalX + widthChange
+                }
+            }
+        }
+
+        // Apply the new dimensions
+        applyBubbleResize(newWidth, newHeight, newX, newY, originalX, originalY)
+    }
+
+    /**
+     * Apply the resize changes to the bubble
+     */
+    private fun applyBubbleResize(
+        newWidth: Int,
+        newHeight: Int,
+        newX: Int,
+        newY: Int,
+        originalX: Int,
+        originalY: Int
+    ) {
+        val expandedContainer = delegate.getExpandedContainer()
+        val webViewContainer = delegate.getWebViewContainer()
+        val contentContainer = delegate.getContentContainer()
+
+        // Apply the new dimensions to the container (removed auto-collapse feature)
+        val containerParams = expandedContainer.layoutParams
+        containerParams.width = newWidth
+        containerParams.height = newHeight
+        expandedContainer.layoutParams = containerParams
+
+        // Update the WebView dimensions to match the container
+        val webViewParams = webViewContainer.layoutParams
+        webViewParams.width = newWidth
+        webViewParams.height = newHeight
+        webViewContainer.layoutParams = webViewParams
+
+        // Also update content container to match
+        val contentParams = contentContainer.layoutParams
+        contentParams.width = newWidth
+        contentParams.height = newHeight
+        contentContainer.layoutParams = contentParams
+
+        // Update delegate with new dimensions
+        delegate.updateDimensions(newWidth, newHeight)
+
+        // Update window position if it changed
+        if (newX != originalX || newY != originalY) {
+            val windowParams = bubbleView.layoutParams as WindowManager.LayoutParams
+            windowParams.x = newX
+            windowParams.y = newY
+            try {
+                windowManager.updateViewLayout(bubbleView, windowParams)
+            } catch (e: Exception) {
+                Logger.e(TAG, "Error updating window layout", e)
+            }
+        }
+
+        // Calculate and apply zoom level
+        val screenWidth = context.resources.displayMetrics.widthPixels
+        val widthRatio = newWidth.toFloat() / screenWidth
+        val calculatedZoomPercent = delegate.calculateBubbleZoomLevel(widthRatio)
+
+        // Only update the zoom if it's significantly different from the current zoom
+        val currentZoomPercent = delegate.getCurrentZoomPercent()
+        val zoomPercent = if (abs(calculatedZoomPercent - currentZoomPercent) > 2f) {
+            calculatedZoomPercent
+        } else {
+            currentZoomPercent
+        }
+
+        // Apply the dynamic zoom level
+        delegate.applyBubbleDynamicZoom(zoomPercent)
+
+        // Force layout update
+        expandedContainer.requestLayout()
+        webViewContainer.requestLayout()
+        contentContainer.requestLayout()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleUIManager.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleUIManager.kt
new file mode 100644
index 0000000..4e77a09
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleUIManager.kt
@@ -0,0 +1,497 @@
+package com.quick.browser.presentation.ui.browser
+
+import android.content.Context
+import android.graphics.Bitmap
+import android.view.*
+import android.view.inputmethod.EditorInfo
+import android.view.inputmethod.InputMethodManager
+import android.widget.EditText
+import android.widget.FrameLayout
+import android.widget.ImageView
+import android.widget.ProgressBar
+import com.google.android.material.button.MaterialButton
+import com.google.android.material.card.MaterialCardView
+import com.quick.browser.R
+import com.quick.browser.utils.Logger
+import kotlin.math.hypot
+
+/**
+ * BubbleUIManager handles all UI components and interactions for a single BubbleView.
+ * 
+ * This class is responsible for:
+ * - View initialization and references
+ * - Click listeners setup
+ * - Progress bar and icon management
+ * - Keyboard/input handling
+ * - Toolbar and UI element visibility
+ * - URL bar management
+ * 
+ * This separates UI concerns from the main BubbleView class, making the code more maintainable
+ * and testable while following the Single Responsibility Principle.
+ */
+class BubbleUIManager(
+    private val context: Context,
+    private val bubbleView: BubbleView,
+    private val bubbleId: String
+) {
+    
+    companion object {
+        private const val TAG = "BubbleUIManager"
+    }
+    
+    // Core UI components
+    private lateinit var rootView: View
+    private lateinit var bubbleIcon: ImageView
+    private lateinit var progressBar: ProgressBar
+    private lateinit var bubbleContainer: View
+    private lateinit var urlBarContainer: MaterialCardView
+    private lateinit var urlBarIcon: ImageView
+    private lateinit var urlBarText: EditText
+    private lateinit var btnUrlBarMinimize: MaterialButton
+    private lateinit var expandedContainer: View
+    private lateinit var contentContainer: FrameLayout
+    private lateinit var toolbarContainer: View
+    
+    // Resize handles
+    private lateinit var resizeHandlesContainer: FrameLayout
+    private lateinit var resizeHandleBottomLeft: ImageView
+    private lateinit var resizeHandleBottomRight: ImageView
+    private lateinit var resizeBar: View
+    
+    // Action buttons
+    private lateinit var btnClose: MaterialButton
+    private lateinit var btnReadMode: MaterialButton
+    private lateinit var btnSummarize: MaterialButton
+    private lateinit var btnMinimize: MaterialButton
+    private lateinit var btnToolbarSettings: MaterialButton
+    
+    // Utility
+    private val windowManager = context.getSystemService(Context.WINDOW_SERVICE) as WindowManager
+    
+    // Callbacks for UI interactions
+    interface UIInteractionListener {
+        fun onToggleBubbleExpanded()
+        fun onCloseBubble()
+        fun onOpenFullWebView()
+        fun onToggleReadMode()
+        fun onToggleSummaryMode()
+        fun onSaveArticle()
+        fun onSettingsButtonClicked()
+        fun onMinimizeBubble()
+        fun onUrlSubmitted(url: String)
+        fun onUrlBarFocusChanged(hasFocus: Boolean)
+        fun onUrlBarClicked()
+    }
+    
+    private var uiListener: UIInteractionListener? = null
+    
+    /**
+     * Initialize all UI components and set up the bubble layout
+     */
+    fun initialize(listener: UIInteractionListener) {
+        this.uiListener = listener
+        initializeViews()
+        setupClickListeners()
+        setupUrlBarInput()
+        setupDefaultStates()
+    }
+    
+    /**
+     * Initialize all view components from the layout
+     */
+    private fun initializeViews() {
+        Logger.d(TAG, "Initializing UI components for bubble: $bubbleId")
+        
+        try {
+            // Create a themed context with the app's theme to ensure Material Components work properly
+            // This is necessary because bubbles are created as system overlay windows
+            val themedContext = ContextThemeWrapper(context.applicationContext, R.style.Theme_QBrowser)
+            
+            // Inflate the bubble layout with the themed context
+            rootView = LayoutInflater.from(themedContext).inflate(R.layout.bubble_layout, bubbleView, true)
+            Logger.d(TAG, "Layout inflated successfully for bubble: $bubbleId")
+            
+            // Initialize core UI components
+            bubbleIcon = bubbleView.findViewById(R.id.bubble_icon) ?: throw IllegalStateException("bubble_icon not found")
+            progressBar = bubbleView.findViewById(R.id.progress_circular) ?: throw IllegalStateException("progress_circular not found")
+            bubbleContainer = bubbleView.findViewById(R.id.bubble_container) ?: throw IllegalStateException("bubble_container not found")
+            urlBarContainer = bubbleView.findViewById(R.id.url_bar_container) ?: throw IllegalStateException("url_bar_container not found")
+            urlBarIcon = bubbleView.findViewById(R.id.url_bar_icon) ?: throw IllegalStateException("url_bar_icon not found")
+            urlBarText = bubbleView.findViewById(R.id.url_bar_text) ?: throw IllegalStateException("url_bar_text not found")
+            btnUrlBarMinimize = bubbleView.findViewById(R.id.btn_url_bar_minimize) ?: throw IllegalStateException("btn_url_bar_minimize not found")
+            expandedContainer = bubbleView.findViewById(R.id.expanded_container) ?: throw IllegalStateException("expanded_container not found")
+            contentContainer = bubbleView.findViewById(R.id.content_container) ?: throw IllegalStateException("content_container not found")
+            toolbarContainer = bubbleView.findViewById(R.id.toolbar_container) ?: throw IllegalStateException("toolbar_container not found")
+            
+            // Initialize resize handles
+            resizeHandlesContainer = bubbleView.findViewById(R.id.resize_handles_container) ?: throw IllegalStateException("resize_handles_container not found")
+            resizeHandleBottomLeft = bubbleView.findViewById(R.id.resize_handle_bottom_left) ?: throw IllegalStateException("resize_handle_bottom_left not found")
+            resizeHandleBottomRight = bubbleView.findViewById(R.id.resize_handle_bottom_right) ?: throw IllegalStateException("resize_handle_bottom_right not found")
+            resizeBar = bubbleView.findViewById(R.id.resize_bar) ?: throw IllegalStateException("resize_bar not found")
+            
+            // Initialize action buttons
+            btnClose = bubbleView.findViewById(R.id.btn_close) ?: throw IllegalStateException("btn_close not found")
+            btnReadMode = bubbleView.findViewById(R.id.btn_read_mode) ?: throw IllegalStateException("btn_read_mode not found")
+            btnSummarize = bubbleView.findViewById(R.id.btn_summarize) ?: throw IllegalStateException("btn_summarize not found")
+            btnMinimize = bubbleView.findViewById(R.id.btn_minimize) ?: throw IllegalStateException("btn_minimize not found")
+            btnToolbarSettings = bubbleView.findViewById(R.id.btn_toolbar_settings) ?: throw IllegalStateException("btn_toolbar_settings not found")
+            
+            Logger.d(TAG, "UI components initialized successfully for bubble: $bubbleId")
+            
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error initializing UI components for bubble: $bubbleId", e)
+            throw e
+        }
+    }
+    
+    /**
+     * Set up click listeners for all interactive elements
+     */
+    private fun setupClickListeners() {
+        Logger.d(TAG, "Setting up click listeners for bubble: $bubbleId")
+        
+        // Main bubble click listener
+        bubbleView.setOnClickListener {
+            uiListener?.onToggleBubbleExpanded()
+        }
+        
+        // Action button listeners
+        btnClose.setOnClickListener { 
+            uiListener?.onCloseBubble()
+        }
+        
+        btnReadMode.setOnClickListener { 
+            uiListener?.onToggleReadMode()
+        }
+        
+        btnSummarize.setOnClickListener { 
+            uiListener?.onToggleSummaryMode()
+        }
+        
+        // Toolbar minimize button listener
+        btnMinimize.setOnClickListener { 
+            uiListener?.onMinimizeBubble()
+        }
+        
+        // URL bar minimize button listener
+        btnUrlBarMinimize.setOnClickListener { 
+            uiListener?.onMinimizeBubble()
+        }
+        
+        // Toolbar settings button listener
+        btnToolbarSettings.setOnClickListener { 
+            uiListener?.onSettingsButtonClicked()
+        }
+        
+        // URL bar icon touch listener for drag functionality
+        var isDragging = false
+        var startX = 0f
+        var startY = 0f
+        var lastX = 0f
+        var lastY = 0f
+        val touchSlop = ViewConfiguration.get(context).scaledTouchSlop
+        
+        urlBarIcon.setOnTouchListener { _, event ->
+            when (event.action) {
+                MotionEvent.ACTION_DOWN -> {
+                    startX = event.rawX
+                    startY = event.rawY
+                    lastX = startX
+                    lastY = startY
+                    isDragging = false
+                    true // Consume the event
+                }
+                MotionEvent.ACTION_MOVE -> {
+                    val deltaX = event.rawX - startX
+                    val deltaY = event.rawY - startY
+                    
+                    // Check if movement exceeds touch slop to start dragging
+                    if (!isDragging && hypot(deltaX, deltaY) > touchSlop) {
+                        isDragging = true
+                    }
+                    
+                    // If dragging, move the bubble
+                    if (isDragging) {
+                        val moveX = event.rawX - lastX
+                        val moveY = event.rawY - lastY
+                        // Notify the bubble view to move the bubble
+                        bubbleView.handleFaviconDrag(moveX, moveY)
+                        lastX = event.rawX
+                        lastY = event.rawY
+                    }
+                    true // Consume the event
+                }
+                MotionEvent.ACTION_UP, MotionEvent.ACTION_CANCEL -> {
+                    // If it was just a click (not a drag), minimize the bubble
+                    if (!isDragging) {
+                        uiListener?.onMinimizeBubble()
+                    }
+                    isDragging = false
+                    true // Consume the event
+                }
+                else -> false
+            }
+        }
+        
+        Logger.d(TAG, "Click listeners set up successfully for bubble: $bubbleId")
+    }
+    
+    /**
+     * Set up URL bar input handling
+     */
+    private fun setupUrlBarInput() {
+        Logger.d(TAG, "Setting up URL bar input for bubble: $bubbleId")
+        
+        // Handle URL input submission
+        urlBarText.setOnEditorActionListener { _, actionId, _ ->
+            if (actionId == EditorInfo.IME_ACTION_GO) {
+                val inputUrl = urlBarText.text.toString().trim()
+                if (inputUrl.isNotEmpty()) {
+                    uiListener?.onUrlSubmitted(inputUrl)
+                    hideKeyboard()
+                }
+                true
+            } else {
+                false
+            }
+        }
+        
+        // Handle focus changes
+        urlBarText.setOnFocusChangeListener { _, hasFocus ->
+            uiListener?.onUrlBarFocusChanged(hasFocus)
+        }
+        
+        // Handle click to show keyboard and select all text
+        urlBarText.setOnClickListener {
+            uiListener?.onUrlBarClicked()
+            urlBarText.requestFocus()
+            urlBarText.selectAll()
+            showKeyboard()
+        }
+        
+        Logger.d(TAG, "URL bar input setup complete for bubble: $bubbleId")
+    }
+    
+    /**
+     * Set up default states for UI components
+     */
+    private fun setupDefaultStates() {
+        // Set default favicon
+        bubbleIcon.setImageResource(R.drawable.ic_globe)
+        
+        // Set default progress
+        progressBar.progress = 0
+        
+        // Hide expanded container initially
+        expandedContainer.visibility = View.GONE
+        
+        // Hide resize handles initially
+        resizeHandlesContainer.visibility = View.GONE
+        
+        Logger.d(TAG, "Default UI states set for bubble: $bubbleId")
+    }
+    
+    // ================== PUBLIC INTERFACE METHODS ==================
+    
+    /**
+     * Update the bubble icon with a new bitmap
+     */
+    fun updateBubbleIcon(bitmap: Bitmap?) {
+        if (bitmap != null) {
+            bubbleIcon.setImageBitmap(bitmap)
+            Logger.d(TAG, "Bubble icon updated for bubble: $bubbleId")
+        } else {
+            bubbleIcon.setImageResource(R.drawable.ic_globe)
+            Logger.d(TAG, "Bubble icon reset to default for bubble: $bubbleId")
+        }
+    }
+    
+    /**
+     * Update the URL bar icon
+     */
+    fun updateUrlBarIcon(bitmap: Bitmap?) {
+        Logger.d(TAG, "Updating URL bar icon, bitmap is null: ${bitmap == null}")
+        if (bitmap != null) {
+            urlBarIcon.setImageBitmap(bitmap)
+            Logger.d(TAG, "Set custom favicon in URL bar, dimensions: ${bitmap.width}x${bitmap.height}")
+        } else {
+            urlBarIcon.setImageResource(R.drawable.ic_globe)
+            Logger.d(TAG, "Set default globe icon in URL bar")
+        }
+    }
+    
+    /**
+     * Update progress bar value
+     */
+    fun updateProgress(progress: Int) {
+        progressBar.progress = progress.coerceIn(0, 100)
+    }
+    
+    /**
+     * Show or hide progress bar
+     */
+    fun setProgressVisible(visible: Boolean) {
+        progressBar.visibility = if (visible) View.VISIBLE else View.GONE
+    }
+    
+    /**
+     * Update URL bar text
+     */
+    fun updateUrlBarText(url: String) {
+        if (urlBarText.text.toString() != url) {
+            urlBarText.setText(url)
+        }
+    }
+    
+    /**
+     * Show expanded container with animation
+     */
+    fun showExpandedContainer(showUrlBar: Boolean = true) {
+        expandedContainer.visibility = View.VISIBLE
+        urlBarContainer.visibility = if (showUrlBar) View.VISIBLE else View.GONE
+    }
+    
+    /**
+     * Hide expanded container
+     */
+    fun hideExpandedContainer() {
+        expandedContainer.visibility = View.GONE
+        urlBarContainer.visibility = View.GONE
+        hideKeyboard()
+    }
+    
+    /**
+     * Show resize handles
+     */
+    fun showResizeHandles() {
+        resizeHandlesContainer.visibility = View.VISIBLE
+        val handles = listOf(
+            resizeHandleBottomLeft,
+            resizeHandleBottomRight
+        )
+        // Animation would be handled by animator
+        handles.forEach { 
+            it.visibility = View.VISIBLE
+            it.alpha = 1.0f
+        }
+    }
+    
+    /**
+     * Hide resize handles (make them transparent but still visible for touch detection)
+     */
+    fun hideResizeHandles() {
+        val handles = listOf(
+            resizeHandleBottomLeft,
+            resizeHandleBottomRight
+        )
+        // Make handles transparent but keep them visible for touch detection
+        handles.forEach { 
+            it.visibility = View.VISIBLE
+            it.alpha = 0.0f
+        }
+        resizeHandlesContainer.visibility = View.VISIBLE
+    }
+    
+    /**
+     * Hide the resize bar
+     */
+    fun hideResizeBar() {
+        resizeBar.visibility = View.GONE
+    }
+    
+    /**
+     * Show the resize bar
+     */
+    fun showResizeBar() {
+        resizeBar.visibility = View.VISIBLE
+    }
+    
+    /**
+     * Show toolbar
+     */
+    fun showToolbar() {
+        toolbarContainer.visibility = View.VISIBLE
+    }
+    
+    /**
+     * Hide toolbar
+     */
+    fun hideToolbar() {
+        toolbarContainer.visibility = View.GONE
+    }
+    
+    /**
+     * Enable window focus to allow keyboard input
+     */
+    fun enableWindowFocus() {
+        try {
+            val params = bubbleView.layoutParams as? WindowManager.LayoutParams ?: return
+            params.flags = params.flags and WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE.inv()
+            params.flags = params.flags or WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS
+            windowManager.updateViewLayout(bubbleView, params)
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error enabling window focus for bubble: $bubbleId", e)
+        }
+    }
+    
+    /**
+     * Disable window focus to prevent accidental keyboard
+     */
+    fun disableWindowFocus() {
+        try {
+            val params = bubbleView.layoutParams as? WindowManager.LayoutParams ?: return
+            params.flags = params.flags or WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
+            params.flags = params.flags or WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS
+            windowManager.updateViewLayout(bubbleView, params)
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error disabling window focus for bubble: $bubbleId", e)
+        }
+    }
+    
+    /**
+     * Show the soft keyboard
+     */
+    fun showKeyboard() {
+        urlBarText.post {
+            val imm = context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
+            imm.showSoftInput(urlBarText, InputMethodManager.SHOW_IMPLICIT)
+        }
+    }
+    
+    /**
+     * Hide the soft keyboard
+     */
+    fun hideKeyboard() {
+        val imm = context.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
+        imm.hideSoftInputFromWindow(urlBarText.windowToken, 0)
+        urlBarText.clearFocus()
+    }
+    
+    // ================== GETTERS FOR VIEW REFERENCES ==================
+    
+    fun getBubbleIcon(): ImageView = bubbleIcon
+    fun getProgressBar(): ProgressBar = progressBar
+    fun getBubbleContainer(): View = bubbleContainer
+    fun getUrlBarContainer(): View = urlBarContainer
+    fun getUrlBarIcon(): ImageView = urlBarIcon
+    fun getUrlBarText(): EditText = urlBarText
+    fun getBtnUrlBarMinimize(): MaterialButton = btnUrlBarMinimize
+    fun getExpandedContainer(): View = expandedContainer
+    fun getContentContainer(): FrameLayout = contentContainer
+    fun getToolbarContainer(): View = toolbarContainer
+    fun getResizeHandlesContainer(): FrameLayout = resizeHandlesContainer
+    fun getResizeHandleBottomLeft(): ImageView = resizeHandleBottomLeft
+    fun getResizeHandleBottomRight(): ImageView = resizeHandleBottomRight
+    fun getResizeBar(): View = resizeBar
+    
+    fun getBtnMinimize(): MaterialButton = btnMinimize
+    fun getBtnToolbarSettings(): MaterialButton = btnToolbarSettings
+    
+    /**
+     * Clean up resources and references
+     */
+    fun cleanup() {
+        uiListener = null
+        Logger.d(TAG, "UI manager cleaned up for bubble: $bubbleId")
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleView.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleView.kt
new file mode 100755
index 0000000..aa83510
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleView.kt
@@ -0,0 +1,1734 @@
+/*
+ * Quick Browser
+ * Copyright (C) 2024  Quick Browser Contributors
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <https://www.gnu.org/licenses/>.
+ */
+
+package com.quick.browser.presentation.ui.browser
+
+import android.content.Context
+import android.content.Intent
+import android.graphics.Bitmap
+import android.graphics.Color
+import android.graphics.PorterDuff
+import android.os.Handler
+import android.os.Looper
+import android.util.AttributeSet
+import android.view.MotionEvent
+import android.view.View
+import android.view.ViewGroup
+import android.view.WindowManager
+import android.webkit.WebView
+import android.widget.*
+import androidx.core.content.ContextCompat
+import androidx.core.graphics.drawable.DrawableCompat
+import androidx.core.net.toUri
+import androidx.lifecycle.*
+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
+import com.google.android.material.button.MaterialButton
+import com.quick.browser.R
+import com.quick.browser.service.*
+import com.quick.browser.utils.Constants
+import com.quick.browser.utils.Logger
+import com.quick.browser.utils.UrlUtils
+import com.quick.browser.utils.security.SecurityPolicyManager
+import kotlin.math.exp
+
+/**
+ * Enhanced floating bubble view that displays web content in a draggable, expandable bubble.
+ *
+ * This view provides a floating UI element that can be dragged around the screen,
+ * expanded to show web content, and collapsed to a small bubble icon. It manages
+ * its own WebView instance and handles touch events for dragging and expanding.
+ *
+ * @property bubbleId Unique identifier for this bubble
+ * @property url The URL to load in this bubble's WebView
+ * @property settingsService Settings manager for configuration
+ * @property adBlockingService Ad blocker for content filtering
+ * @property summarizationService Manager for text summarization
+ */
+class BubbleView @JvmOverloads constructor(
+    context: Context,
+    val bubbleId: String,
+    var url: String,  // Changed from val to var to allow URL updates when navigating
+    private val settingsService: SettingsService,
+    private val adBlockingService: AdBlockingService,
+    private val summarizationService: SummarizationService,
+    private val offlineArticleSaver: OfflineArticleSaver,
+    attrs: AttributeSet? = null,
+    defStyleAttr: Int = 0
+) : FrameLayout(context, attrs, defStyleAttr), BubbleTouchHandler.BubbleTouchDelegate,
+    BubbleStateManager.Companion.StateChangeListener, BubbleWebViewManagerInterface,
+    BubbleUIManager.UIInteractionListener {
+
+    // UI Manager - handles all UI components and interactions
+    private var uiManager: BubbleUIManager
+
+    // WebView needs to remain separate as it's managed by WebViewManager
+    private lateinit var webViewContainer: WebView
+
+    // Touch handling state - moved to BubbleTouchHandler
+    // Resize state - moved to BubbleTouchHandler
+
+    // State Management - centralized in BubbleStateManager
+    private val stateManager = BubbleStateManager(bubbleId).apply {
+        setStateChangeListener(this@BubbleView)
+    }
+
+    // Dependencies passed through constructor
+    private val bubbleAnimator = BubbleAnimator()
+    private val touchHandler = BubbleTouchHandler(context, this)
+    private val resizeBarHandler = BubbleResizeBarHandler(context, this)
+    private var webViewModel: WebViewModel? = null
+
+    /**
+     * Get the bubble animator instance
+     */
+    fun getBubbleAnimator(): BubbleAnimator = bubbleAnimator
+
+    // WebView Manager - handles all WebView-related functionality
+    private lateinit var webViewManager: BubbleWebViewManager
+
+    // Current favicon for the URL bar
+    private var currentFavicon: Bitmap? = null
+
+    // Summary/Summarization UI and State
+    private lateinit var btnSummarize: MaterialButton // Changed from fabSummarize to btnSummarize
+    private lateinit var summaryContainer: FrameLayout
+    private lateinit var summaryContent: LinearLayout
+    private lateinit var summaryProgress: ProgressBar
+    private lateinit var summaryManager: BubbleSummaryManager
+
+    // Read Mode UI and State
+    private lateinit var btnReadMode: MaterialButton
+    private lateinit var readModeManager: BubbleReadModeManager
+
+    // Settings panel
+    private lateinit var settingsPanel: View
+    private lateinit var settingsPanelManager: BubbleSettingsPanel
+
+    // Add SwipeRefreshLayout property
+    private lateinit var swipeRefreshLayout: SwipeRefreshLayout
+    
+    // WindowManager for handling window layout updates
+    private val windowManager = context.getSystemService(Context.WINDOW_SERVICE) as WindowManager
+
+    companion object {
+        private const val TAG = "BubbleView"
+    }
+
+    /**
+     * Initialize the bubble view, set up UI components and event listeners
+     */
+    init {
+        try {
+            Logger.d(TAG, "Initializing BubbleView for bubble: $bubbleId")
+
+            // Initialize UI Manager first - this inflates the layout
+            uiManager = BubbleUIManager(context, this, bubbleId)
+            uiManager.initialize(this)
+
+            // Initialize remaining views that are not managed by UIManager
+            // This must happen after UIManager initialization since it depends on inflated layout
+            initializeViews()
+
+            // Set up WebViewModel for favicon and title management
+            post { initializeWebViewModel() }
+
+            // Set up content based on bubble type
+            setupContent()
+
+            // Initialize touch handler after all views are set up
+            touchHandler.initialize(this)
+            
+            // Initialize resize bar handler
+            post {
+                resizeBarHandler.setupResizeBarTouch(uiManager.getResizeBar(), this)
+            }
+
+            Logger.d(TAG, "BubbleView initialization completed for bubble: $bubbleId")
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error initializing BubbleView for bubble: $bubbleId", e)
+            throw e
+        }
+    }
+
+    /**
+     * Initialize remaining view components not handled by UIManager
+     *
+     * @return Unit
+     */
+    private fun initializeViews() {
+        try {
+            Logger.d(TAG, "Initializing remaining views for bubble: $bubbleId")
+
+            // WebView container (managed separately due to WebViewManager requirements)
+            webViewContainer = findViewById(R.id.web_view) ?: throw IllegalStateException("WebView not found in layout")
+            swipeRefreshLayout = findViewById(R.id.swipe_refresh_layout) ?: throw IllegalStateException("SwipeRefreshLayout not found in layout")
+
+            // Set up SwipeRefreshLayout
+            swipeRefreshLayout.setOnRefreshListener {
+                webViewManager.reload()
+            }
+
+            // Initialize and set arrow views
+
+            // Ensure summary views and FAB are initialized after layout is ready
+            initializeSummaryViews()
+
+            // Initialize settings panel
+            settingsPanel =
+                findViewById(R.id.settings_panel) ?: throw IllegalStateException("Settings panel not found in layout")
+
+            // Initialize settings panel manager
+            settingsPanelManager = BubbleSettingsPanel(context, settingsService, bubbleAnimator)
+
+            // Initialize summary manager
+            summaryManager = BubbleSummaryManager(context, summarizationService, bubbleAnimator)
+
+            // Initialize read mode manager
+            readModeManager = BubbleReadModeManager(context, settingsService)
+
+            // Initialize WebView manager
+            webViewManager = BubbleWebViewManager(context, bubbleId, this, settingsService, adBlockingService,
+                SecurityPolicyManager(context)
+            )
+
+            Logger.d(TAG, "Remaining views initialized successfully for bubble: $bubbleId")
+
+            // Note: All basic UI components are now handled by BubbleUIManager
+            // Note: Resize handle setup is now handled by BubbleTouchHandler
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error initializing remaining views for bubble: $bubbleId", e)
+            throw e
+        }
+    }
+
+    /**
+     * Initialize WebViewModel and set up favicon observers
+     *
+     * @return Unit
+     */
+    private fun initializeWebViewModel() {
+        val lifecycleOwner = findViewTreeLifecycleOwner()
+        val viewModelStoreOwner = findViewTreeViewModelStoreOwner()
+
+        when {
+            // Best case: We have both lifecycle owner and view model store owner
+            lifecycleOwner != null && viewModelStoreOwner != null -> {
+                try {
+                    webViewModel = ViewModelProvider(viewModelStoreOwner)[WebViewModel::class.java]
+                    observeFaviconChanges(lifecycleOwner)
+                } catch (e: Exception) {
+                    Logger.e(TAG, "Error initializing WebViewModel", e)
+                }
+            }
+
+            // Fallback: We have lifecycle owner but need to use application context
+            lifecycleOwner != null -> {
+                val application = context.applicationContext
+                if (application is ViewModelStoreOwner) {
+                    try {
+                        Logger.d(TAG, "Using application context as ViewModelStoreOwner")
+                        webViewModel = ViewModelProvider(application)[WebViewModel::class.java]
+                        observeFaviconChanges(lifecycleOwner)
+                    } catch (e: Exception) {
+                        Logger.e(TAG, "Error initializing WebViewModel with application context", e)
+                        createStandaloneWebViewModel()
+                    }
+                } else {
+                    Logger.e(TAG, "Could not find ViewModelStoreOwner and application is not a ViewModelStoreOwner")
+                    createStandaloneWebViewModel()
+                }
+            }
+
+            // Last resort: Create standalone WebViewModel
+            else -> {
+                Logger.e(TAG, "Could not find LifecycleOwner")
+                createStandaloneWebViewModel()
+            }
+        }
+    }
+
+    /**
+     * Observe favicon changes from WebViewModel
+     *
+     * @param lifecycleOwner The lifecycle owner to use for launching coroutines
+     * @return Unit
+     */
+    private fun observeFaviconChanges(lifecycleOwner: LifecycleOwner) {
+        // Note: This is a temporary fix. In a real application, we should properly observe the UI state.
+        // For now, we'll comment out this functionality.
+        /*
+        lifecycleOwner.lifecycleScope.launch {
+            webViewModel?.webPages?.collectLatest { pages ->
+                pages[url]?.let { webPage ->
+                    webPage.favicon?.let { favicon ->
+                        Logger.d(TAG, "Updating bubble icon with favicon for URL: $url")
+                        uiManager.updateBubbleIcon(favicon)
+                        // Also update URL bar icon if bubble is expanded
+                        if (stateManager.isBubbleExpanded) {
+                            uiManager.updateUrlBarIcon(favicon)
+                        }
+                    }
+                }
+            }
+        }
+        */
+    }
+
+    // Note: Click listeners are now handled by BubbleUIManager
+
+    // Note: URL bar input handling is now managed by BubbleUIManager
+
+    /**
+     * Load a new URL in the WebView
+     */
+    private fun loadNewUrl(inputUrl: String) {
+        var formattedUrl = inputUrl
+
+        // Check if it looks like a valid URL or domain
+        val isValidUrl = formattedUrl.startsWith("http://") || formattedUrl.startsWith("https://") || 
+                         (formattedUrl.contains(".") && !formattedUrl.contains(" ") && !formattedUrl.contains("\\"))
+
+        if (!isValidUrl) {
+            // Treat as search query
+            formattedUrl = "https://www.google.com/search?q=${android.net.Uri.encode(formattedUrl)}"
+        } else if (!formattedUrl.startsWith("http://") && !formattedUrl.startsWith("https://")) {
+            // Add https:// if no protocol is specified but it looks like a domain
+            formattedUrl = "https://$formattedUrl"
+        }
+
+        url = formattedUrl
+        webViewManager.loadUrl(formattedUrl)
+        updateUrlBar()
+
+        // Update read mode manager with new URL
+        readModeManager.updateCurrentUrl(formattedUrl)
+    }
+
+    // Note: Keyboard and window focus methods are now handled by BubbleUIManager
+
+    // Resize handle setup is now handled by BubbleTouchHandler
+
+    // Resize functionality moved to BubbleTouchHandler
+
+    /**
+     * Calculate a smooth zoom level based on the width ratio of the bubble to screen
+     *
+     * This function uses a sigmoid function to create an extremely smooth S-curve:
+     * - Provides a very natural, gradual transition between zoom levels
+     * - Creates a mathematically elegant curve with no sudden changes
+     * - Maintains higher zoom levels until the window gets quite small
+     * - Ensures zoom never goes below 75% even for very small windows
+     *
+     * @param widthRatio The ratio of bubble width to screen width (0.0-1.0)
+     * @return The calculated zoom percentage (75-100)
+     */
+    private fun calculateSmoothZoomLevel(widthRatio: Float): Float {
+        // Sigmoid function parameters
+        val steepness = 10.0 // Controls how steep the S-curve is (higher = steeper transition)
+        val midpoint = 0.6 // The width ratio at which the sigmoid is centered (inflection point)
+        val minZoom = 75f // Minimum zoom level
+        val maxZoom = 100f // Maximum zoom level
+        val zoomRange = maxZoom - minZoom
+
+        // Apply sigmoid function: f(x) = 1 / (1 + e^(-steepness * (x - midpoint)))
+        // This creates a smooth S-curve that transitions gradually between 0 and 1
+        val sigmoidValue = 1.0 / (1.0 + exp(-steepness * (widthRatio - midpoint)))
+
+        // Map the sigmoid output (0-1) to our zoom range (75-100)
+        return (minZoom + (sigmoidValue * zoomRange).toFloat()).coerceIn(minZoom, maxZoom)
+    }
+
+    /**
+     * Apply dynamic zoom level to the WebView content based on window size
+     *
+     * @param zoomPercent The zoom percentage to apply (75-100)
+     */
+    private fun applyDynamicZoom(zoomPercent: Float) {
+        // Store the current zoom level for persistence when bubble is collapsed/expanded
+        stateManager.setZoomPercent(zoomPercent)
+
+        // Apply zoom via WebViewManager
+        webViewManager.applyDynamicZoom(zoomPercent.toInt())
+    }
+
+    /**
+     * Hide resize handles when bubble is collapsed
+     */
+    private fun hideResizeHandles() {
+        val handles = listOf(
+            uiManager.getResizeHandleBottomLeft(),
+            uiManager.getResizeHandleBottomRight()
+        )
+
+        bubbleAnimator.animateResizeHandlesHide(handles) {
+            uiManager.getResizeHandlesContainer().visibility = GONE
+        }
+    }
+
+    /**
+     * Notify the BubbleService that this bubble has been activated
+     */
+    private fun notifyBubbleActivated() {
+        val intent = Intent(context, BubbleService::class.java).apply {
+            action = BubbleService.ACTION_ACTIVATE_BUBBLE
+            putExtra(Constants.EXTRA_BUBBLE_ID, bubbleId)
+        }
+        context.startService(intent)
+    }
+
+    /**
+     * Set up the content container with appropriate visibility
+     */
+    private fun setupContent() {
+        // Show SwipeRefreshLayout for all bubbles
+        swipeRefreshLayout.visibility = VISIBLE
+
+        // Set up WebView using the WebViewManager
+        setupWebViewManager()
+    }
+
+    /**
+     * Set up WebView manager with proper initialization and callbacks
+     */
+    private fun setupWebViewManager() {
+        try {
+            Logger.d(TAG, "Setting up WebViewManager for bubble: $bubbleId with URL: $url")
+
+            // Initialize the manager with WebView components
+            webViewManager.initialize(webViewContainer, uiManager.getProgressBar(), webViewModel)
+            
+            // Connect WebView progress updates to UI progress bar
+            webViewManager.setOnProgressChangedCallback { progress -> onWebViewProgressChanged(progress) }
+            
+            // Connect WebView URL changes to UI URL bar updates
+            webViewManager.setOnUrlChangedCallback { newUrl -> onWebViewUrlChanged(newUrl) }
+            
+            // Connect WebView favicon updates to UI favicon updates
+            webViewManager.setOnFaviconReceivedCallback { favicon -> onWebViewFaviconReceived(favicon) }
+            
+            // Connect WebView page finished to stop swipe refresh
+            webViewManager.setOnPageFinishedCallback { onWebViewPageFinished() }
+
+            // Initialize settings panel manager with WebView
+            setupSettingsPanelManager()
+
+            // Initialize summary manager with WebView
+            setupSummaryManager()
+
+            // Initialize read mode manager with WebView
+            setupReadModeManager()
+
+            // Set up touch listener for WebView to handle settings dismissal
+            webViewContainer.setOnTouchListener { _, event ->
+                settingsPanelManager.handleTouchEvent(event, settingsPanel)
+                false // Don't consume the event, let WebView handle it normally
+            }
+
+            // Make WebView ready to load content in the background with alpha=0
+            webViewContainer.alpha = 0f
+
+            // Load the initial URL
+            if (url.isNotEmpty()) {
+                post { 
+                    webViewManager.loadUrl(url)
+                    // Inject scroll detection JavaScript after a short delay to ensure the page is loaded
+                    postDelayed({ webViewManager.injectScrollDetectionJavaScript() }, 1000)
+                }
+            }
+
+            Logger.d(TAG, "WebViewManager setup complete for bubble: $bubbleId")
+
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error setting up WebViewManager for bubble $bubbleId", e)
+        }
+    }
+
+    // Note: Scroll listener functionality is now handled by BubbleWebViewManager
+
+    /**
+     * Hide toolbar with animation
+     */
+    private fun hideToolbar() {
+        if (!stateManager.isToolbarVisible) return // Already hidden
+
+        stateManager.setToolbarVisible(false)
+        uiManager.getToolbarContainer().let { toolbar ->
+            bubbleAnimator.animateToolbarSlide(toolbar, false) {
+                // Ensure toolbar is hidden after animation
+                toolbar.visibility = GONE
+            }
+        }
+    }
+
+    /**
+     * Show toolbar with animation
+     */
+    private fun showToolbar() {
+        if (stateManager.isToolbarVisible) return // Already visible
+
+        stateManager.setToolbarVisible(true)
+        uiManager.getToolbarContainer().let { toolbar ->
+            // Make sure toolbar is visible before starting animation
+            toolbar.visibility = VISIBLE
+            bubbleAnimator.animateToolbarSlide(toolbar, true)
+        }
+    }
+
+
+    // Note: setupWebView() method removed - functionality moved to BubbleWebViewManager
+
+    /**
+     * Set up the settings panel manager with proper initialization and listener
+     */
+    private fun setupSettingsPanelManager() {
+        // Initialize the settings panel manager with WebView
+        settingsPanelManager.initialize(settingsPanel, webViewContainer)
+
+        // Set up listener for settings changes
+        settingsPanelManager.setListener(object : BubbleSettingsPanel.SettingsPanelListener {
+            override fun onAdBlockingChanged(enabled: Boolean) {
+                // Handle ad blocking change - refresh page if needed
+                Logger.d(TAG, "Ad blocking ${if (enabled) "enabled" else "disabled"} for bubble $bubbleId")
+            }
+
+            override fun onJavaScriptChanged(enabled: Boolean) {
+                // Handle JavaScript change - refresh page if needed
+                Logger.d(TAG, "JavaScript ${if (enabled) "enabled" else "disabled"} for bubble $bubbleId")
+            }
+
+            override fun onSettingsPanelVisibilityChanged(isVisible: Boolean) {
+                // Update any UI state that depends on settings panel visibility
+                Logger.d(TAG, "Settings panel ${if (isVisible) "shown" else "hidden"} for bubble $bubbleId")
+            }
+
+            override fun onReaderFontSizeChanged(size: Int) {
+                // Refresh reader mode content with new font size
+                Logger.d(TAG, "Reader font size changed to ${size}px for bubble $bubbleId")
+                readModeManager.refreshReaderModeContent()
+            }
+
+            override fun onReaderBackgroundChanged(background: String) {
+                // Refresh reader mode content with new background
+                Logger.d(TAG, "Reader background changed to $background for bubble $bubbleId")
+                readModeManager.refreshReaderModeContent()
+            }
+
+            override fun onReaderTextAlignChanged(alignment: String) {
+                // Refresh reader mode content with new text alignment
+                Logger.d(TAG, "Reader text alignment changed to $alignment for bubble $bubbleId")
+                readModeManager.refreshReaderModeContent()
+            }
+            
+            override fun onSaveOfflineRequested() {
+                // Handle save for offline reading
+                Logger.d(TAG, "Save for offline reading requested for bubble $bubbleId")
+                saveArticleForOfflineReading()
+            }
+            
+            override fun onShareRequested() {
+                // Handle share functionality
+                Logger.d(TAG, "Share requested for bubble $bubbleId")
+                shareCurrentUrl()
+            }
+        })
+    }
+
+    /**
+     * Set up the summary manager with proper initialization and listener
+     */
+    private fun setupSummaryManager() {
+        // Initialize the summary manager with WebView and UI components
+        summaryManager.initialize(
+            summaryContainer,
+            summaryContent,
+            summaryProgress,
+            btnSummarize,
+            webViewContainer
+        )
+
+        // Set up listener for summary events
+        summaryManager.setListener(object : BubbleSummaryManager.SummaryManagerListener {
+            override fun onSummaryModeChanged(isSummaryMode: Boolean) {
+                // Update any UI state that depends on summary mode
+                Logger.d(TAG, "Summary mode ${if (isSummaryMode) "enabled" else "disabled"} for bubble $bubbleId")
+            }
+
+            override fun onSummarizationStarted() {
+                Logger.d(TAG, "Summarization started for bubble $bubbleId")
+            }
+
+            override fun onSummarizationCompleted(success: Boolean) {
+                Logger.d(TAG, "Summarization ${if (success) "completed successfully" else "failed"} for bubble $bubbleId")
+            }
+
+            override fun onSummarizationError(message: String) {
+                Logger.e(TAG, "Summarization error for bubble $bubbleId: $message")
+            }
+
+            override fun onSummaryScrollDown() {
+                // Hide toolbar when scrolling down in summary mode
+                if (stateManager.isToolbarVisible) {
+                    hideToolbar()
+                }
+            }
+
+            override fun onSummaryScrollUp() {
+                // Show toolbar when scrolling up in summary mode
+                if (!stateManager.isToolbarVisible) {
+                    showToolbar()
+                }
+            }
+        })
+    }
+
+    /**
+     * Set up the read mode manager with proper initialization and listener
+     */
+    private fun setupReadModeManager() {
+        // Initialize the read mode manager with WebView and UI components
+        readModeManager.initialize(
+            findViewById(R.id.btn_read_mode), // btnReadMode is handled by separate managers, not UIManager
+            webViewContainer,
+            uiManager.getProgressBar(),
+            url
+        )
+
+        // Set up listener for read mode events
+        readModeManager.setListener(object : BubbleReadModeManager.ReadModeManagerListener {
+            override fun onReadModeChanged(isReadMode: Boolean) {
+                Logger.d(TAG, "Read mode ${if (isReadMode) "enabled" else "disabled"} for bubble $bubbleId")
+            }
+
+            override fun onReadModeLoadingStarted() {
+                Logger.d(TAG, "Read mode loading started for bubble $bubbleId")
+            }
+
+            override fun onReadModeLoadingCompleted(success: Boolean) {
+                Logger.d(TAG, "Read mode loading ${if (success) "completed" else "failed"} for bubble $bubbleId")
+            }
+
+            override fun onReadModeError(message: String) {
+                Logger.e(TAG, "Read mode error for bubble $bubbleId: $message")
+            }
+
+            override fun onBubbleExpandRequested() {
+                // Expand bubble if not already expanded
+                if (!stateManager.isBubbleExpanded) {
+                    toggleBubbleExpanded()
+                }
+            }
+
+            override fun onReadModeScrollDown() {
+                // Hide toolbar when scrolling down in reader mode
+                if (stateManager.isToolbarVisible) {
+                    hideToolbar()
+                }
+            }
+
+            override fun onReadModeScrollUp() {
+                // Show toolbar when scrolling up in reader mode
+                if (!stateManager.isToolbarVisible) {
+                    showToolbar()
+                }
+            }
+        })
+    }
+
+    // Note: WebView configuration methods removed - functionality moved to BubbleWebViewManager
+    // - configureWebViewSettings()
+    // - configureBasicWebViewSettings() 
+    // - configureSecuritySettings()
+    // - configurePerformanceSettings()
+    // - configureContentSettings()
+    // - setupWebViewClients()
+    // - createWebChromeClient()
+
+    // Note: handleReceivedFavicon() and handleReceivedTitle() methods removed
+    // - functionality moved to BubbleWebViewManager
+
+    // Note: Large WebView client and URL loading methods removed
+    // - createWebViewClient() - moved to BubbleWebViewManager  
+    // - loadInitialUrl() - moved to BubbleWebViewManager
+    // - reloadWebPageIfNeeded() - moved to BubbleWebViewManager
+
+    /**
+     * Save the current article for offline reading
+     */
+    private fun saveArticleForOfflineReading() {
+        Logger.d(TAG, "Save article for offline reading requested")
+        
+        // Get the current URL
+        val currentUrl = url
+        if (currentUrl.isBlank()) {
+            Toast.makeText(context, "No URL to save", Toast.LENGTH_SHORT).show()
+            return
+        }
+        
+        // Save the article using OfflineArticleSaver
+        offlineArticleSaver.saveArticleForOfflineReading(
+            url = currentUrl,
+            scope = (context as LifecycleOwner).lifecycleScope,
+            onSuccess = {
+                Logger.d(TAG, "Article saved successfully for bubble $bubbleId")
+            },
+            onError = { error ->
+                Logger.e(TAG, "Failed to save article for bubble $bubbleId: $error")
+            }
+        )
+    }
+
+    /**
+     * Share the current URL
+     */
+    private fun shareCurrentUrl() {
+        try {
+            val currentUrl = url
+            if (currentUrl.isBlank()) {
+                Toast.makeText(context, "No URL to share", Toast.LENGTH_SHORT).show()
+                return
+            }
+
+            // Collapse the bubble before showing share UI
+            setExpanded(false)
+
+            // Post the share intent to ensure the bubble is collapsed first
+            post {
+                val shareIntent = Intent(Intent.ACTION_SEND).apply {
+                    type = "text/plain"
+                    putExtra(Intent.EXTRA_TEXT, currentUrl)
+                }
+                val chooser = Intent.createChooser(shareIntent, context.getString(R.string.share_via))
+                chooser.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
+                context.startActivity(chooser)
+            }
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error sharing URL", e)
+            Toast.makeText(context, context.getString(R.string.share_failed), Toast.LENGTH_SHORT).show()
+        }
+    }
+
+    /**
+     * Toggle bubble expanded state with animation
+     *
+     * When expanded, the bubble shows a WebView with the loaded URL.
+     * When collapsed, only the bubble icon is visible.
+     */
+    private fun toggleBubbleExpanded() {
+        stateManager.toggleExpansion()
+
+        if (stateManager.isBubbleExpanded) {
+            expandBubble()
+        } else {
+            collapseBubble()
+        }
+    }
+
+    /**
+     * Expand the bubble to show web content
+     */
+    private fun expandBubble() {
+        // Update URL bar with current URL
+        updateUrlBar()
+
+        // Enable input focus for keyboard
+        uiManager.enableWindowFocus()
+
+        // Reset toolbar state
+        stateManager.setToolbarVisible(true)
+        uiManager.getToolbarContainer().translationY = 0f
+
+        // Configure container visibility
+        webViewContainer.visibility = VISIBLE
+        webViewContainer.alpha = 1f
+
+        // Set the dimensions for the expanded container BEFORE starting animation
+        resizeExpandedContainer()
+
+        // Check if URL bar should be visible based on settings
+        val showUrlBar = settingsService.isUrlBarVisible()
+        
+        // Show or hide the minimize button in the toolbar based on URL bar visibility
+        // When URL bar is hidden, show the minimize button in the toolbar
+        uiManager.getBtnMinimize().visibility = if (showUrlBar) View.GONE else View.VISIBLE
+
+        // Start the expand animation with proper sequencing
+        bubbleAnimator.animateExpandFromBubble(
+            bubbleContainer = uiManager.getBubbleContainer(),
+            urlBarContainer = uiManager.getUrlBarContainer(),
+            expandedContainer = uiManager.getExpandedContainer(),
+            showUrlBar = showUrlBar,
+            onEnd = {
+                // Show resize handles container and resize bar
+                uiManager.getResizeHandlesContainer().visibility = VISIBLE
+                uiManager.showResizeBar()
+                uiManager.hideResizeHandles()
+
+                // Make WebView visible and ensure content is loaded
+                loadContentInExpandedWebView()
+            }
+        )
+    }
+
+    /**
+     * Update the URL bar with current URL and favicon
+     */
+    private fun updateUrlBar() {
+        Logger.d(TAG, "Updating URL bar for bubble: $bubbleId, URL: $url")
+        
+        // Set the URL text
+        uiManager.updateUrlBarText(url)
+
+        // Use the stored favicon if available, otherwise try to get it from WebViewModel
+        if (currentFavicon != null) {
+            Logger.d(TAG, "Using stored favicon for bubble: $bubbleId")
+            uiManager.updateUrlBarIcon(currentFavicon)
+            return
+        }
+
+        // Update the favicon in the URL bar from WebViewModel
+        try {
+            webViewModel?.uiState?.value?.webPages?.let { webPages ->
+                Logger.d(TAG, "Found WebViewModel with ${webPages.size} web pages")
+                
+                // Log all available keys for debugging
+                webPages.forEach { entry ->
+                    Logger.d(TAG, "Available web page key: ${entry.key}, URL: ${entry.value.url}, has favicon: ${entry.value.favicon != null}")
+                }
+                
+                // Try to find the web page with the current URL
+                // First try with the bubble ID prefix (composite key)
+                val compositeKey = "${bubbleId}_${url}"
+                var favicon = webPages[compositeKey]?.favicon
+                Logger.d(TAG, "Looking for favicon with composite key: $compositeKey, found: ${favicon != null}")
+                
+                // If not found, try with just the URL
+                if (favicon == null) {
+                    favicon = webPages[url]?.favicon
+                    Logger.d(TAG, "Looking for favicon with URL key: $url, found: ${favicon != null}")
+                }
+                
+                // Update the URL bar icon
+                if (favicon != null) {
+                    Logger.d(TAG, "Updating URL bar with favicon from WebViewModel for bubble: $bubbleId")
+                    // Store the favicon for future use
+                    currentFavicon = favicon
+                    uiManager.updateUrlBarIcon(favicon)
+                } else {
+                    Logger.d(TAG, "No favicon found, using default globe icon for bubble: $bubbleId")
+                    // Use default globe icon if no favicon available
+                    uiManager.updateUrlBarIcon(null)
+                }
+            } ?: run {
+                Logger.d(TAG, "No WebViewModel available, using default globe icon for bubble: $bubbleId")
+                // Use default globe icon if webViewModel is not available
+                uiManager.updateUrlBarIcon(null)
+            }
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error updating URL bar favicon for bubble: $bubbleId", e)
+            // Use default globe icon if there's an error
+            uiManager.updateUrlBarIcon(null)
+        }
+    }
+
+    /**
+     * Resize the expanded container to take appropriate screen space.
+     * Initial dimensions are defined in dimens.xml and can be customized there.
+     */
+    private fun resizeExpandedContainer() {
+        val layoutParams = uiManager.getExpandedContainer().layoutParams
+
+        if (stateManager.hasStoredDimensions && stateManager.storedWidth > 0 && stateManager.storedHeight > 0) {
+            // Use stored dimensions if available
+            layoutParams.width = stateManager.storedWidth
+            layoutParams.height = stateManager.storedHeight
+        } else {
+            // Use default dimensions from resources
+            layoutParams.width = resources.getDimensionPixelSize(R.dimen.bubble_expanded_default_width)
+            layoutParams.height = resources.getDimensionPixelSize(R.dimen.bubble_expanded_default_height)
+
+            // Store these default dimensions
+            stateManager.updateDimensions(layoutParams.width, layoutParams.height)
+        }
+
+        uiManager.getExpandedContainer().layoutParams = layoutParams
+
+        // Update SwipeRefreshLayout dimensions to match the container
+        val swipeLayoutParams = swipeRefreshLayout.layoutParams
+        swipeLayoutParams.width = layoutParams.width
+        swipeLayoutParams.height = layoutParams.height
+        swipeRefreshLayout.layoutParams = swipeLayoutParams
+
+        // Update content container dimensions to match
+        val contentParams = uiManager.getContentContainer().layoutParams
+        contentParams.width = layoutParams.width
+        contentParams.height = layoutParams.height
+        uiManager.getContentContainer().layoutParams = contentParams
+
+        // If we have a stored zoom level from previous resize operations, use it
+        // Otherwise, calculate based on window width
+        val zoomPercent = if (stateManager.currentZoomPercent != 100f) {
+            // Use the previously stored zoom level
+            stateManager.currentZoomPercent
+        } else {
+            // Calculate initial zoom level based on window width relative to screen width
+            val screenWidth = resources.displayMetrics.widthPixels
+            val widthRatio = layoutParams.width.toFloat() / screenWidth
+            calculateSmoothZoomLevel(widthRatio)
+        }
+
+        // Apply the dynamic zoom level using JavaScript
+        applyDynamicZoom(zoomPercent)
+
+        // Force layout update
+        uiManager.getExpandedContainer().requestLayout()
+        swipeRefreshLayout.requestLayout()
+        uiManager.getContentContainer().requestLayout()
+    }
+
+    /**
+     * Make WebView visible when bubble is expanded
+     */
+    private fun loadContentInExpandedWebView() {
+        try {
+            Logger.d(TAG, "Making WebView visible for bubble $bubbleId with URL: $url")
+
+            // Make SwipeRefreshLayout and WebView visible
+            swipeRefreshLayout.visibility = VISIBLE
+            webViewContainer.visibility = VISIBLE
+            swipeRefreshLayout.animate()
+                .alpha(1f)
+                .setDuration(200)
+                .start()
+
+            // Check if the page is loaded using WebViewManager
+            val currentUrl = webViewManager.getCurrentUrl()
+            Logger.d(TAG, "Current WebView URL: $currentUrl")
+
+            // If the page hasn't loaded yet or is blank, reload it
+            if (currentUrl == null || currentUrl == "about:blank" || currentUrl.isEmpty()) {
+                if (url.isNotEmpty()) {
+                    Logger.d(TAG, "Loading URL in expanded bubble (fallback): $url")
+
+                    // Use WebViewManager to load the URL
+                    webViewManager.loadUrl(url)
+
+                    // Apply the stored zoom level after a short delay to ensure the page has loaded
+                    postDelayed({
+                        applyDynamicZoom(stateManager.currentZoomPercent)
+                    }, 500)
+                }
+            } else {
+                // If the page is already loaded, make sure it's visible
+                // Also reapply the stored zoom level
+                applyDynamicZoom(stateManager.currentZoomPercent)
+                webViewContainer.invalidate()
+                Logger.d(TAG, "WebView already has content loaded: $currentUrl")
+            }
+
+            // Force layout update to ensure content is visible
+            swipeRefreshLayout.requestLayout()
+            webViewContainer.requestLayout()
+
+            Logger.d(TAG, "WebView is now visible for bubble $bubbleId")
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error handling WebView visibility for bubble $bubbleId", e)
+        }
+    }
+
+    /**\n     * Collapse the bubble to show only the icon\n     */
+    private fun collapseBubble() {
+        // Disable input focus to prevent accidental keyboard
+        uiManager.disableWindowFocus()
+
+        // Hide keyboard if visible
+        uiManager.hideKeyboard()
+
+        // Hide settings panel if visible
+        settingsPanelManager.dismissIfVisible(settingsPanel)
+
+        // Exit summary mode if active
+        summaryManager.forceExitSummaryMode()
+
+        // Exit read mode if active
+        readModeManager.forceExitReadMode()
+
+        // Hide resize handles and resize bar immediately
+        hideResizeHandles()
+        uiManager.hideResizeBar()
+
+        // Keep WebView loaded but make it invisible immediately to prevent flash
+        swipeRefreshLayout.visibility = INVISIBLE
+        swipeRefreshLayout.alpha = 0f
+
+        // Start the collapse animation with proper sequencing
+        bubbleAnimator.animateCollapseToBubble(
+            expandedContainer = uiManager.getExpandedContainer(),
+            urlBarContainer = uiManager.getUrlBarContainer(),
+            bubbleContainer = uiManager.getBubbleContainer(),
+            onEnd = {
+                // Final cleanup after animation completes
+                // Don't destroy WebView content - just hide it
+                // This ensures the content stays loaded in the background
+            }
+        )
+    }
+
+    /**
+     * Close the bubble with animation
+     *
+     * Directly animates the bubble disappearing, regardless of its current state.
+     */
+    private fun closeBubbleWithAnimation() {
+        // Hide resize handles and resize bar immediately to prevent them from showing during animation
+        if (stateManager.isBubbleExpanded) {
+            hideResizeHandles()
+            uiManager.hideResizeBar()
+        }
+
+        // Hide settings panel if visible
+        settingsPanelManager.dismissIfVisible(settingsPanel)
+
+        // Exit summary mode if active
+        summaryManager.forceExitSummaryMode()
+
+        // Exit read mode if active
+        readModeManager.forceExitReadMode()
+
+        // Hide WebView immediately to prevent flash during animation
+        if (stateManager.isBubbleExpanded) {
+            swipeRefreshLayout.visibility = INVISIBLE
+            swipeRefreshLayout.alpha = 0f
+        }
+
+        // Animate the entire bubble view disappearing directly
+        animateBubbleDisappearance()
+    }
+
+    /**
+     * Animate the bubble disappearing and notify listeners
+     */
+    private fun animateBubbleDisappearance() {
+        if (stateManager.isBubbleExpanded) {
+            // For expanded bubbles, animate the expanded UI elements scaling down gracefully
+            bubbleAnimator.animateExpandedBubbleClose(
+                urlBarContainer = uiManager.getUrlBarContainer(),
+                expandedContainer = uiManager.getExpandedContainer(),
+                bubbleContainer = uiManager.getBubbleContainer(),
+                onEnd = {
+                    stateManager.triggerClose()
+                }
+            )
+        } else {
+            // For collapsed bubbles, just animate the bubble icon disappearing
+            uiManager.getBubbleContainer().visibility = INVISIBLE
+            bubbleAnimator.animateDisappear(this, onEnd = {
+                stateManager.triggerClose()
+            })
+        }
+    }
+
+    /**
+     * Open the web page in the device's default browser
+     */
+    private fun openFullWebView() {
+        try {
+            val formattedUrl = formatUrl(url)
+            if (formattedUrl.isNotEmpty()) {
+                val intent = Intent(Intent.ACTION_VIEW, formattedUrl.toUri()).apply {
+                    addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
+                }
+                context.startActivity(intent)
+            } else {
+                Toast.makeText(context, "Invalid URL", Toast.LENGTH_SHORT).show()
+            }
+            // Close the bubble if openFullWebView is called
+            closeBubbleWithAnimation()
+        } catch (e: Exception) {
+            Logger.e(TAG, "Failed to open in default browser", e)
+            Toast.makeText(context, "Could not open in browser", Toast.LENGTH_SHORT).show()
+        }
+    }
+
+
+    /**
+     * Helper method to launch activities with extras
+     */
+    private fun launchActivity(activityClass: Class<*>, vararg extras: Pair<String, String>) {
+        val intent = Intent(context, activityClass).apply {
+            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
+            extras.forEach { (key, value) -> putExtra(key, value) }
+        }
+        context.startActivity(intent)
+    }
+
+    /**
+     * Format and validate URL to ensure it loads correctly
+     *
+     * @param inputUrl The URL to format
+     * @return A properly formatted URL or empty string if invalid
+     */
+    private fun formatUrl(inputUrl: String): String {
+        return UrlUtils.formatUrl(inputUrl)
+    }
+
+    /**
+     * Handle favicon drag to move the bubble window
+     */
+    fun handleFaviconDrag(deltaX: Float, deltaY: Float) {
+        try {
+            val params = layoutParams as? WindowManager.LayoutParams
+            if (params != null) {
+                // Calculate new position
+                val newX = params.x + deltaX.toInt()
+                val newY = params.y + deltaY.toInt()
+                
+                // Update position
+                params.x = newX
+                params.y = newY
+                windowManager.updateViewLayout(this, params)
+            }
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error handling favicon drag", e)
+        }
+    }
+
+    /**
+     * Handle touch events for dragging the bubble and handling click events.
+     *
+     * This method delegates to BubbleTouchHandler for all touch handling logic.
+     */
+    override fun onTouchEvent(event: MotionEvent): Boolean {
+        // Delegate to touch handler
+        val handled = touchHandler.handleTouchEvent(event)
+        return if (handled) true else super.onTouchEvent(event)
+    }
+
+    /**
+     * Close the bubble (called by touch handler)
+     */
+    private fun closeBubble() {
+        // Logic to close the bubble
+        stateManager.setActive(false)
+        uiManager.getExpandedContainer().visibility = GONE
+        uiManager.getBubbleContainer().visibility = GONE
+        uiManager.getResizeHandlesContainer().visibility = GONE
+        stateManager.triggerClose()
+    }
+
+    /**
+     * Override performClick for accessibility
+     */
+    override fun performClick(): Boolean {
+        super.performClick()
+        return true
+    }
+
+    // ======================================
+    // BubbleTouchDelegate Implementation
+    // ======================================
+
+    override fun onBubbleDragged(x: Int, y: Int) {
+        // Handle bubble drag position updates by updating the window layout
+        try {
+            val params = layoutParams as? WindowManager.LayoutParams
+            if (params != null) {
+                params.x = x
+                params.y = y
+                windowManager.updateViewLayout(this, params)
+            }
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error dragging bubble", e)
+        }
+    }
+
+    override fun onBubbleClicked() {
+        toggleBubbleExpanded()
+        notifyBubbleActivated()
+    }
+
+    override fun onBubbleClosed() {
+        closeBubble()
+    }
+
+    override fun onBubbleToggleExpanded() {
+        toggleBubbleExpanded()
+    }
+
+    override fun hideBubbleSettingsPanel() {
+        settingsPanelManager.dismissIfVisible(settingsPanel)
+    }
+
+    override fun isSettingsPanelVisible(): Boolean {
+        return settingsPanelManager.isVisible()
+    }
+
+    override fun isBubbleExpanded(): Boolean {
+        return stateManager.isBubbleExpanded
+    }
+
+    override fun getExpandedContainer(): View {
+        return uiManager.getExpandedContainer()
+    }
+
+    override fun getSettingsPanel(): View {
+        return settingsPanel
+    }
+
+    override fun getSettingsButton(): MaterialButton {
+        return uiManager.getBtnToolbarSettings()
+    }
+
+    override fun getToolbarContainer(): View {
+        return uiManager.getToolbarContainer()
+    }
+
+    override fun getResizeHandles(): List<ImageView> {
+        return listOf(
+            uiManager.getResizeHandleBottomLeft(),
+            uiManager.getResizeHandleBottomRight()
+        )
+    }
+
+    override fun getResizeHandlesContainer(): View {
+        return uiManager.getResizeHandlesContainer()
+    }
+
+    override fun getResizeBar(): View {
+        return uiManager.getResizeBar()
+    }
+
+    override fun getContentContainer(): FrameLayout {
+        return uiManager.getContentContainer()
+    }
+
+    override fun getWebViewContainer(): View {
+        return swipeRefreshLayout
+    }
+
+    override fun updateDimensions(width: Int, height: Int) {
+        stateManager.updateDimensions(width, height)
+    }
+
+    override fun applyBubbleDynamicZoom(zoomPercent: Float) {
+        // Call the existing private method
+        applyDynamicZoom(zoomPercent)
+    }
+
+    override fun calculateBubbleZoomLevel(widthRatio: Float): Float {
+        return calculateSmoothZoomLevel(widthRatio)
+    }
+
+    override fun getCurrentZoomPercent(): Float {
+        return stateManager.currentZoomPercent
+    }
+
+    /**
+     * Set a listener to be called when the bubble is closed
+     *
+     * @param listener Callback function to invoke when bubble is closed
+     */
+    fun setOnCloseListener(listener: () -> Unit) {
+        stateManager.setOnCloseListener(listener)
+    }
+
+    /**
+     * Update the favicon of the bubble (public method)
+     *
+     * @param favicon Bitmap to use as favicon
+     */
+    fun updateFavicon(favicon: Bitmap) {
+        updateBubbleIcon(favicon)
+    }
+
+    /**
+     * Update the bubble icon with a favicon
+     *
+     * @param favicon Bitmap to use as favicon
+     */
+    private fun updateBubbleIcon(favicon: Bitmap) {
+        try {
+            // Run on UI thread to update the ImageView
+            post {
+                uiManager.updateBubbleIcon(favicon)
+                Logger.d(TAG, "Bubble icon updated with favicon for bubble: $bubbleId")
+            }
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error updating bubble icon", e)
+            // Fallback to default icon if there's an error
+            post {
+                uiManager.updateBubbleIcon(null)
+            }
+        }
+    }
+
+    /**
+     * Create a standalone instance of WebViewModel when we can't get it from ViewModelProvider
+     *
+     * This is a fallback mechanism when the normal ViewModel architecture can't be used.
+     *
+     * @return Unit
+     */
+    private fun createStandaloneWebViewModel() {
+        try {
+            Logger.d(TAG, "Creating standalone WebViewModel instance")
+            // Note: This is a temporary fix. In a real application, we should use dependency injection.
+            // For now, we'll create a placeholder instance.
+            webViewModel = null
+
+            // Set up periodic favicon checking
+            setupPeriodicFaviconCheck()
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error creating standalone WebViewModel", e)
+        }
+    }
+
+    /**
+     * Helper method to safely update the WebViewModel
+     * Creates a new instance if needed
+     *
+     * @param action The action to perform with the WebViewModel
+     * @return Unit
+     */
+    private fun updateWebViewModel(action: (WebViewModel) -> Unit) {
+        webViewModel?.let { viewModel ->
+            try {
+                action(viewModel)
+            } catch (e: Exception) {
+                Logger.e(TAG, "Error updating WebViewModel", e)
+            }
+        } ?: run {
+            // If WebViewModel is null, try to create it
+            try {
+                Logger.d(TAG, "WebViewModel is null, creating new instance")
+                // Note: This is a temporary fix. In a real application, we should use dependency injection.
+                // For now, we'll create a placeholder instance.
+                webViewModel = null
+                webViewModel?.let { action(it) }
+            } catch (e: Exception) {
+                Logger.e(TAG, "Error creating WebViewModel on the fly", e)
+            }
+        }
+    }
+
+    /**
+     * Set up a periodic check for favicon updates from the WebView
+     *
+     * @return Unit
+     */
+    private fun setupPeriodicFaviconCheck() {
+        val handler = Handler(Looper.getMainLooper())
+        val faviconRunnable = object : Runnable {
+            override fun run() {
+                // Only continue if the view is attached to window
+                if (!isAttachedToWindow) {
+                    Logger.d(TAG, "Stopping favicon checks as view is detached")
+                    return
+                }
+
+                // Check if the WebView has a favicon and update if available
+                webViewContainer.favicon?.let { favicon ->
+                    updateBubbleIcon(favicon)
+                }
+
+                // Schedule the next check with a longer interval (5 seconds instead of 2)
+                handler.postDelayed(this, 5000)
+            }
+        }
+
+        // Start the periodic check
+        handler.post(faviconRunnable)
+
+        // Make sure to remove callbacks when view is detached
+        addOnAttachStateChangeListener(object : OnAttachStateChangeListener {
+            override fun onViewAttachedToWindow(v: View) {
+                // Restart checks when view is reattached
+                handler.post(faviconRunnable)
+            }
+
+            override fun onViewDetachedFromWindow(v: View) {
+                // Stop checks when view is detached
+                handler.removeCallbacks(faviconRunnable)
+            }
+        })
+    }
+
+    /**
+     * Update the loading progress of the bubble
+     *
+     * @param progress Progress value (0-100)
+     */
+    fun updateProgress(progress: Int) {
+        if (progress !in 0..100) return
+
+        uiManager.updateProgress(progress)
+
+        // Hide the refresh indicator when loading is complete
+        if (progress in 1..99) {
+            // TODO: Implement refresh indicator if needed
+        }
+
+        when {
+            // Show progress bar when loading (1-99%)
+            progress in 1..99 -> {
+                uiManager.setProgressVisible(true)
+                updateProgressColor(progress)
+
+                // Log progress for debugging at 20% intervals
+                if (progress % 20 == 0) {
+                    Logger.d(TAG, "Loading progress: $progress%")
+                }
+            }
+            // Hide when complete or not started
+            else -> uiManager.setProgressVisible(false)
+        }
+    }
+
+    /**
+     * Update the progress bar color based on progress value
+     *
+     * @param progress Progress value (0-100)
+     */
+    private fun updateProgressColor(progress: Int) {
+        val color = when {
+            progress < 30 -> ContextCompat.getColor(context, R.color.colorAccent)
+            progress < 70 -> ContextCompat.getColor(context, R.color.colorPrimary)
+            else -> ContextCompat.getColor(context, android.R.color.holo_green_light)
+        }
+        val progressBarDrawable = uiManager.getProgressBar().progressDrawable
+        if (progressBarDrawable != null) {
+            DrawableCompat.setTint(progressBarDrawable, color)
+            DrawableCompat.setTintMode(progressBarDrawable, PorterDuff.Mode.SRC_IN)
+        }
+    }
+
+    /**
+     * Set the bubble as active (expanded and showing content)
+     */
+    fun setActive() {
+        stateManager.setActive(true)
+        uiManager.getExpandedContainer().visibility = VISIBLE
+        bubbleAnimator.animateExpand(uiManager.getExpandedContainer())
+
+        // Show resize handles when expanded container is visible
+        uiManager.getResizeHandlesContainer().visibility = VISIBLE
+
+        // Show the regular web view (not the summary view)
+        webViewContainer.visibility = VISIBLE
+        loadUrlInWebView()
+    }
+
+    /**
+     * Set the bubble as inactive (collapsed)
+     */
+    fun setInactive() {
+        stateManager.setActive(false)
+        uiManager.getExpandedContainer().visibility = GONE
+
+        // Hide resize handles and resize bar when expanded container is hidden
+        uiManager.getResizeHandlesContainer().visibility = GONE
+        uiManager.hideResizeBar()
+    }
+
+    /**
+     * Load the URL in the WebView with proper formatting
+     */
+    private fun loadUrlInWebView() {
+        val formattedUrl = formatUrl(url)
+        if (formattedUrl.isNotEmpty()) {
+            Logger.d(TAG, "Loading URL in showWebView: $formattedUrl")
+
+            // Check if this is an authentication URL that should be handled with Custom Tabs
+            if (AuthenticationService.isAuthenticationUrl(formattedUrl)) {
+                Logger.d(TAG, "Authentication URL detected in loadUrlInWebView, opening in Custom Tab: $formattedUrl")
+                AuthenticationService.openInCustomTab(context, formattedUrl, bubbleId)
+                // Load a blank page in the WebView to avoid showing the authentication page
+                webViewManager.loadUrl("about:blank")
+            } else {
+                // Load the URL in the WebView using WebViewManager
+                webViewManager.loadUrl(formattedUrl)
+            }
+        } else {
+            Logger.d(TAG, "Invalid URL format in showWebView: $url")
+            webViewManager.loadUrl("about:blank")
+        }
+    }
+
+    /**
+     * Set the expanded state of the bubble
+     *
+     * @param expanded Whether the bubble should be expanded
+     * @return Unit
+     */
+    fun setExpanded(expanded: Boolean) {
+        stateManager.setExpanded(expanded)
+
+        // Update UI based on expanded state
+        if (expanded) {
+            expandBubble()
+        } else {
+            collapseBubble()
+        }
+    }
+
+    /**
+     * Initialize summary views
+     */
+    private fun initializeSummaryViews() {
+        // Inflate or find summary container and content
+        summaryContainer = findViewById(R.id.summary_container) ?: FrameLayout(context).also {
+            it.id = R.id.summary_container
+            it.visibility = GONE
+            (uiManager.getExpandedContainer() as? ViewGroup)?.addView(it)
+        }
+        summaryContent = findViewById(R.id.summary_content) ?: LinearLayout(context).also {
+            it.id = R.id.summary_content
+            it.orientation = LinearLayout.VERTICAL
+            (summaryContainer as? ViewGroup)?.addView(it)
+        }
+        summaryProgress = findViewById(R.id.summary_progress) ?: ProgressBar(context).also {
+            it.id = R.id.summary_progress
+            it.visibility = GONE
+            (summaryContainer as? ViewGroup)?.addView(it)
+        }
+
+        // Initialize the summarize button from the toolbar
+        btnSummarize = findViewById(R.id.btn_summarize)
+        btnReadMode = findViewById(R.id.btn_read_mode)
+
+        // Set background color for summary container and content
+        summaryContainer.setBackgroundColor(Color.WHITE)
+        summaryContent.setBackgroundColor(Color.WHITE)
+    }
+
+    // ======================================
+    // BubbleStateManager.StateChangeListener Implementation
+    // ======================================
+
+    override fun onExpansionStateChanged(isExpanded: Boolean) {
+        Logger.d(TAG, "Expansion state changed for bubble $bubbleId: $isExpanded")
+        // Additional UI updates can be handled here if needed
+        // The main expansion/collapse logic is handled in toggleBubbleExpanded()
+    }
+
+    override fun onActiveStateChanged(isActive: Boolean) {
+        Logger.d(TAG, "Active state changed for bubble $bubbleId: $isActive")
+        // Handle active state UI updates
+        if (isActive) {
+            uiManager.getExpandedContainer().visibility = VISIBLE
+            uiManager.getResizeHandlesContainer().visibility = VISIBLE
+        } else {
+            uiManager.getExpandedContainer().visibility = GONE
+            uiManager.getResizeHandlesContainer().visibility = GONE
+        }
+    }
+
+    override fun onDimensionsChanged(width: Int, height: Int) {
+        Logger.d(TAG, "Dimensions changed for bubble $bubbleId: ${width}x${height}")
+        // Handle dimension changes if needed
+        // This is already handled in the updateDimensions method
+    }
+
+    override fun onZoomChanged(zoomPercent: Float) {
+        Logger.d(TAG, "Zoom changed for bubble $bubbleId: $zoomPercent%")
+        // Apply zoom changes to WebView
+        applyDynamicZoom(zoomPercent)
+    }
+
+    override fun onToolbarVisibilityChanged(isVisible: Boolean) {
+        Logger.d(TAG, "Toolbar visibility changed for bubble $bubbleId: $isVisible")
+        // Handle toolbar visibility changes
+        if (isVisible) {
+            showToolbar()
+        } else {
+            hideToolbar()
+        }
+    }
+
+    // ============================================================================
+    // Lifecycle Methods
+    // ============================================================================
+
+    /**
+     * Update font size settings when the view is attached to the window
+     */
+    override fun onAttachedToWindow() {
+        super.onAttachedToWindow()
+        
+        // Update font size settings when the bubble is shown
+        onFontSizeSettingsUpdated()
+        
+        Logger.d(TAG, "BubbleView attached for bubble: $bubbleId")
+    }
+
+    /**
+     * Clean up resources when the view is detached from the window
+     */
+    override fun onDetachedFromWindow() {
+        super.onDetachedFromWindow()
+
+        // Clean up WebViewManager resources
+        webViewManager.cleanup()
+
+        Logger.d(TAG, "BubbleView detached and cleaned up for bubble: $bubbleId")
+    }
+
+    // ============================================================================
+    // BubbleWebViewManagerInterface Implementation
+    // ============================================================================
+
+    override fun onWebViewUrlChanged(newUrl: String) {
+        url = newUrl
+        // Update URL bar if bubble is expanded
+        if (stateManager.isBubbleExpanded) {
+            updateUrlBar()
+        }
+        // Update read mode manager with new URL
+        readModeManager.updateCurrentUrl(newUrl)
+        
+        // Inject scroll detection JavaScript when URL changes
+        webViewManager.injectScrollDetectionJavaScript()
+    }
+
+    override fun onWebViewHtmlContentLoaded(htmlContent: String) {
+        // HTML content received, cache it for summarization
+        Logger.d(TAG, "HTML content received, length: ${htmlContent.length}")
+        summaryManager.cacheHtmlContent(htmlContent)
+        summaryManager.startBackgroundSummarization(htmlContent)
+    }
+
+    override fun onWebViewScrollDown() {
+        // Hide toolbar in all modes (web view, reader mode, summary mode)
+        if (stateManager.isToolbarVisible) {
+            hideToolbar()
+        }
+    }
+
+    override fun onWebViewScrollUp() {
+        // Show toolbar in all modes (web view, reader mode, summary mode)
+        if (!stateManager.isToolbarVisible) {
+            showToolbar()
+        }
+    }
+
+    override fun onWebViewFaviconReceived(favicon: Bitmap) {
+        Logger.d(TAG, "Received favicon for bubble: $bubbleId, isBubbleExpanded: ${stateManager.isBubbleExpanded}")
+        
+        // Store the current favicon
+        currentFavicon = favicon
+        
+        // Update local favicon
+        updateFavicon(favicon)
+        
+        // Update URL bar favicon if bubble is expanded
+        if (stateManager.isBubbleExpanded) {
+            Logger.d(TAG, "Updating URL bar favicon for bubble: $bubbleId")
+            uiManager.updateUrlBarIcon(favicon)
+        } else {
+            Logger.d(TAG, "Bubble is not expanded, not updating URL bar favicon for bubble: $bubbleId")
+        }
+
+        Logger.d(TAG, "Finished processing favicon for bubble: $bubbleId")
+    }
+
+    override fun onWebViewTitleReceived(title: String) {
+        Logger.d(TAG, "Received page title for bubble $bubbleId: $title")
+        // Title updates are already handled by the WebViewManager
+        // Additional UI updates can be added here if needed
+    }
+
+    override fun onWebViewProgressChanged(progress: Int) {
+        updateProgress(progress)
+    }
+    
+    override fun onWebViewPageFinished() {
+        // Stop swipe refresh when page finishes loading
+        swipeRefreshLayout.isRefreshing = false
+    }
+    
+    override fun onFontSizeSettingsUpdated() {
+        // Update font size settings in WebViewManager when settings change
+        webViewManager.updateFontSizeSettings()
+    }
+
+    // ================== UIInteractionListener Implementation ==================
+
+    override fun onToggleBubbleExpanded() {
+        toggleBubbleExpanded()
+        notifyBubbleActivated()
+    }
+
+    override fun onCloseBubble() {
+        settingsPanelManager.dismissIfVisible(settingsPanel)
+        closeBubbleWithAnimation()
+    }
+
+    override fun onOpenFullWebView() {
+        settingsPanelManager.dismissIfVisible(settingsPanel)
+        openFullWebView()
+    }
+
+    override fun onToggleReadMode() {
+        settingsPanelManager.dismissIfVisible(settingsPanel)
+        readModeManager.toggleReadMode()
+        // Update settings panel to show/hide reader mode controls
+        settingsPanelManager.setReaderMode(readModeManager.isReadMode())
+    }
+
+    override fun onToggleSummaryMode() {
+        settingsPanelManager.dismissIfVisible(settingsPanel)
+        summaryManager.toggleSummaryMode()
+    }
+
+    override fun onSettingsButtonClicked() {
+        if (settingsPanelManager.isVisible()) {
+            settingsPanelManager.hide(settingsPanel)
+        } else {
+            // Update reader mode state before showing settings panel
+            settingsPanelManager.setReaderMode(readModeManager.isReadMode())
+            // Refresh all settings values including URL bar setting
+            settingsPanelManager.refreshSettingsValues()
+            settingsPanelManager.show(settingsPanel, uiManager.getBtnToolbarSettings())
+        }
+    }
+
+    override fun onMinimizeBubble() {
+        // Collapse the bubble to its minimized state
+        setExpanded(false)
+    }
+
+    override fun onUrlSubmitted(url: String) {
+        loadNewUrl(url)
+        uiManager.hideKeyboard()
+    }
+
+    override fun onUrlBarFocusChanged(hasFocus: Boolean) {
+        if (hasFocus) {
+            uiManager.showKeyboard()
+        } else {
+            uiManager.hideKeyboard()
+        }
+    }
+
+    override fun onUrlBarClicked() {
+        settingsPanelManager.dismissIfVisible(settingsPanel)
+    }
+    
+    override fun onSaveArticle() {
+        saveArticleForOfflineReading()
+    }
+}
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleViewModel.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleViewModel.kt
new file mode 100644
index 0000000..9bd4323
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleViewModel.kt
@@ -0,0 +1,132 @@
+package com.quick.browser.presentation.ui.browser
+
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import com.quick.browser.domain.model.Bubble
+import com.quick.browser.domain.model.Settings
+import com.quick.browser.domain.usecase.GetSettingsUseCase
+import com.quick.browser.domain.usecase.UpdateSettingsUseCase
+import com.quick.browser.utils.Logger
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.StateFlow
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+/**
+ * ViewModel for the browser bubble UI
+ *
+ * This ViewModel manages the state for browser bubbles and handles
+ * interactions with use cases for settings management.
+ *
+ * @param getSettingsUseCase The use case for retrieving app settings
+ * @param updateSettingsUseCase The use case for updating app settings
+ */
+@HiltViewModel
+class BubbleViewModel @Inject constructor(
+    private val getSettingsUseCase: GetSettingsUseCase,
+    private val updateSettingsUseCase: UpdateSettingsUseCase
+) : ViewModel() {
+
+    private val _uiState = MutableStateFlow(BrowserUiState())
+    val uiState: StateFlow<BrowserUiState> = _uiState
+
+    /**
+     * Load application settings
+     *
+     * This method retrieves the current application settings using the
+     * GetSettingsUseCase and updates the UI state accordingly.
+     */
+    fun loadSettings() {
+        viewModelScope.launch {
+            try {
+                _uiState.value = _uiState.value.copy(isLoading = true)
+                when (val result = getSettingsUseCase()) {
+                    is com.quick.browser.domain.result.Result.Success -> {
+                        _uiState.value = _uiState.value.copy(
+                            isLoading = false,
+                            settings = result.data
+                        )
+                    }
+                    is com.quick.browser.domain.result.Result.Failure -> {
+                        Logger.e("BubbleViewModel", "Error loading settings: ${result.error}")
+                        _uiState.value = _uiState.value.copy(
+                            isLoading = false,
+                            error = "Failed to load settings"
+                        )
+                    }
+                }
+            } catch (e: Exception) {
+                Logger.e("BubbleViewModel", "Error loading settings", e)
+                _uiState.value = _uiState.value.copy(
+                    isLoading = false,
+                    error = "Failed to load settings"
+                )
+            }
+        }
+    }
+
+    /**
+     * Save application settings
+     *
+     * This method saves the provided settings using the UpdateSettingsUseCase
+     * and updates the UI state accordingly.
+     *
+     * @param settings The settings to save
+     */
+    fun saveSettings(settings: Settings) {
+        viewModelScope.launch {
+            try {
+                _uiState.value = _uiState.value.copy(isLoading = true)
+                updateSettingsUseCase(settings)
+                _uiState.value = _uiState.value.copy(
+                    isLoading = false,
+                    settings = settings
+                )
+            } catch (e: Exception) {
+                Logger.e("BubbleViewModel", "Error saving settings", e)
+                _uiState.value = _uiState.value.copy(
+                    isLoading = false,
+                    error = "Failed to save settings"
+                )
+            }
+        }
+    }
+
+    /**
+     * Add a bubble to the UI state
+     *
+     * @param bubble The bubble to add
+     */
+    fun addBubble(bubble: Bubble) {
+        Logger.e("BubbleViewModel", "Adding bubble: $bubble")
+        val currentList = _uiState.value.bubbles.toMutableList()
+        currentList.add(bubble)
+        _uiState.value = _uiState.value.copy(bubbles = currentList)
+    }
+
+    /**
+     * Remove a bubble from the UI state
+     *
+     * @param bubbleId The ID of the bubble to remove
+     */
+    fun removeBubble(bubbleId: String) {
+        val currentList = _uiState.value.bubbles.toMutableList()
+        currentList.removeAll { it.id == bubbleId }
+        _uiState.value = _uiState.value.copy(bubbles = currentList)
+    }
+
+    /**
+     * Update a bubble in the UI state
+     *
+     * @param bubble The updated bubble
+     */
+    fun updateBubble(bubble: Bubble) {
+        val currentList = _uiState.value.bubbles.toMutableList()
+        val index = currentList.indexOfFirst { it.id == bubble.id }
+        if (index != -1) {
+            currentList[index] = bubble
+            _uiState.value = _uiState.value.copy(bubbles = currentList)
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleWebViewManager.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleWebViewManager.kt
new file mode 100644
index 0000000..7bd9ebf
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleWebViewManager.kt
@@ -0,0 +1,672 @@
+package com.quick.browser.presentation.ui.browser
+
+import android.R
+import android.content.Context
+import android.graphics.Bitmap
+import android.view.View
+import android.webkit.*
+import android.widget.ProgressBar
+import androidx.core.content.ContextCompat
+import com.quick.browser.service.AdBlockingService
+import com.quick.browser.service.SettingsService
+import com.quick.browser.utils.JavaScriptSanitizer
+import com.quick.browser.utils.Logger
+import com.quick.browser.utils.security.SecurityPolicyManager
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+
+/**
+ * Manager class responsible for WebView setup, configuration, and interaction
+ *
+ * This class encapsulates all WebView-related functionality including:
+ * - WebView configuration and settings
+ * - WebView client setup (WebChromeClient and WebViewClient)
+ * - URL loading and navigation
+ * - JavaScript injection and evaluation
+ * - Progress tracking and error handling
+ * - Favicon and title management
+ *
+ * @param context The context used for WebView operations
+ * @param bubbleId Unique identifier for the bubble
+ * @param bubbleView Reference to the parent BubbleView for callbacks
+ * @param settingsService Manager for app settings
+ * @param adBlockingService Ad blocking functionality
+ * @param securityPolicyManager Security policy manager for WebView security
+ */
+class BubbleWebViewManager(
+    private val context: Context,
+    private val bubbleId: String,
+    private val bubbleView: BubbleView,
+    private val settingsService: SettingsService,
+    private val adBlockingService: AdBlockingService,
+    private val securityPolicyManager: SecurityPolicyManager
+) {
+
+    companion object {
+        private const val TAG = "BubbleWebViewManager"
+    }
+
+    // Dependencies
+    private val coroutineScope = CoroutineScope(Dispatchers.Main)
+
+    // WebView reference
+    private var webView: WebView? = null
+    private var progressBar: ProgressBar? = null
+    private var webViewModel: WebViewModel? = null
+
+    // Callbacks
+    private var onUrlChangedCallback: ((String) -> Unit)? = null
+    private var onHtmlContentLoadedCallback: ((String) -> Unit)? = null
+    private var onScrollDownCallback: (() -> Unit)? = null
+    private var onScrollUpCallback: (() -> Unit)? = null
+    private var onFaviconReceivedCallback: ((Bitmap) -> Unit)? = null
+    private var onTitleReceivedCallback: ((String) -> Unit)? = null
+    private var onProgressChangedCallback: ((Int) -> Unit)? = null
+    private var onPageFinishedCallback: (() -> Unit)? = null
+
+    /**
+     * Initialize the WebView manager with required components
+     *
+     * @param webView The WebView instance to manage
+     * @param progressBar Progress bar for loading indication
+     * @param webViewModel WebViewModel for favicon and title management
+     */
+    fun initialize(
+        webView: WebView,
+        progressBar: ProgressBar,
+        webViewModel: WebViewModel?
+    ) {
+        this.webView = webView
+        this.progressBar = progressBar
+        this.webViewModel = webViewModel
+
+        // Set up scroll callbacks to link JS interface to BubbleView
+        onScrollUpCallback = { bubbleView.onWebViewScrollUp() }
+        onScrollDownCallback = { bubbleView.onWebViewScrollDown() }
+
+        setupWebView()
+    }
+
+    /**
+     * Set up WebView configuration, settings, and clients
+     */
+    private fun setupWebView() {
+        val webView = this.webView ?: return
+
+        try {
+            Logger.d(TAG, "Setting up WebView for bubble: $bubbleId")
+
+            // Set WebView background
+            webView.setBackgroundColor(ContextCompat.getColor(context, R.color.white))
+
+            // Apply security settings first
+            securityPolicyManager.applySecuritySettings(webView)
+
+            // Configure WebView settings
+            configureWebViewSettings(webView)
+
+            // Set up WebView clients
+            setupWebViewClients(webView)
+
+            // Set up JavaScript interface for scroll detection
+            setupScrollDetection(webView)
+
+            Logger.d(TAG, "WebView setup complete for bubble: $bubbleId")
+
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error setting up WebView for bubble $bubbleId", e)
+        }
+    }
+
+    /**
+     * Configure WebView settings based on user preferences
+     */
+    private fun configureWebViewSettings(webView: WebView) {
+        webView.settings.apply {
+            // Basic settings
+            loadWithOverviewMode = true
+            useWideViewPort = true
+
+            // Zoom settings
+            builtInZoomControls = true
+            displayZoomControls = false
+            setSupportZoom(true)
+
+            // Default encoding
+            defaultTextEncodingName = "UTF-8"
+
+            // JavaScript settings based on user preferences and security policies
+            val isJavaScriptAllowed = settingsService.isJavaScriptEnabled()
+            javaScriptEnabled = isJavaScriptAllowed
+            javaScriptCanOpenWindowsAutomatically = isJavaScriptAllowed
+
+            // Mixed content settings - always strict for security
+            mixedContentMode = WebSettings.MIXED_CONTENT_NEVER_ALLOW
+
+            // File access settings - always disabled for security
+            allowContentAccess = false
+            allowFileAccess = false
+
+            // Storage settings
+            domStorageEnabled = true
+            databaseEnabled = false
+            cacheMode = WebSettings.LOAD_DEFAULT
+
+            // Content settings
+            loadsImagesAutomatically = true
+            blockNetworkImage = false
+            blockNetworkLoads = false
+
+            // Media settings
+            mediaPlaybackRequiresUserGesture = true
+
+            // Location settings
+            setGeolocationEnabled(false) // Disabled for security
+
+            // Window settings
+            setSupportMultipleWindows(false) // Disabled for security
+            
+            // Apply font size settings
+            applyFontSizeSettings()
+        }
+
+        // Configure performance settings
+        configurePerformanceSettings(webView)
+    }
+
+    /**
+     * Apply font size settings to the WebView based on user preferences
+     */
+    private fun applyFontSizeSettings() {
+        val webView = this.webView ?: return
+        
+        // Check if automatic font sizing is enabled
+        if (settingsService.isAutoFontSizeEnabled()) {
+            // Use default system font size
+            webView.settings.textZoom = 100
+        } else {
+            // Use manual font size setting
+            val manualFontSize = settingsService.getManualFontSize()
+            // WebView textZoom is a percentage, where 100 is normal size
+            // We'll map our font size (8-30) to a reasonable zoom percentage (50-200)
+            val zoomPercentage = when {
+                manualFontSize <= 10 -> 50
+                manualFontSize <= 12 -> 75
+                manualFontSize <= 14 -> 90
+                manualFontSize <= 16 -> 100
+                manualFontSize <= 18 -> 110
+                manualFontSize <= 20 -> 125
+                manualFontSize <= 24 -> 150
+                else -> 200
+            }
+            webView.settings.textZoom = zoomPercentage
+        }
+    }
+
+    /**
+     * Update font size settings and apply them to the WebView
+     */
+    fun updateFontSizeSettings() {
+        applyFontSizeSettings()
+    }
+
+    /**
+     * Configure performance-related WebView settings
+     */
+    private fun configurePerformanceSettings(webView: WebView) {
+        try {
+            @Suppress("DEPRECATION")
+            webView.settings.setRenderPriority(WebSettings.RenderPriority.HIGH)
+            webView.setLayerType(View.LAYER_TYPE_HARDWARE, null)
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error setting hardware acceleration", e)
+            webView.setLayerType(View.LAYER_TYPE_SOFTWARE, null)
+        }
+    }
+
+    /**
+     * Set up WebChromeClient and WebViewClient
+     */
+    private fun setupWebViewClients(webView: WebView) {
+        // Set up WebChromeClient for progress, favicon and title handling
+        webView.webChromeClient = createWebChromeClient()
+
+        // Set up WebViewClient for page loading and error handling
+        webView.webViewClient = createScrollAwareWebViewClient()
+    }
+
+    /**
+     * Create WebChromeClient for handling progress, favicons, and titles
+     */
+    private fun createWebChromeClient(): WebChromeClient {
+        return object : WebChromeClient() {
+            override fun onProgressChanged(view: WebView?, newProgress: Int) {
+                onProgressChangedCallback?.invoke(newProgress)
+            }
+
+            override fun onReceivedIcon(view: WebView?, icon: Bitmap?) {
+                icon?.let {
+                    handleReceivedFavicon(it)
+                    onFaviconReceivedCallback?.invoke(it)
+                }
+            }
+
+            override fun onReceivedTitle(view: WebView?, title: String?) {
+                title?.let {
+                    handleReceivedTitle(it)
+                    onTitleReceivedCallback?.invoke(it)
+                }
+            }
+        }
+    }
+
+    /**
+     * Create ScrollAwareWebViewClient for handling page loading and scroll detection
+     */
+    private fun createScrollAwareWebViewClient(): ScrollAwareWebViewClient {
+        return ScrollAwareWebViewClient(
+            context,
+            onPageUrlChanged = { newUrl ->
+                onUrlChangedCallback?.invoke(newUrl)
+            },
+            onHtmlContentLoaded = { htmlContent ->
+                onHtmlContentLoadedCallback?.invoke(htmlContent)
+            },
+            onScrollDown = {
+                onScrollDownCallback?.invoke()
+            },
+            onScrollUp = {
+                onScrollUpCallback?.invoke()
+            },
+            onPageFinishedCallback = {
+                onPageFinishedCallback?.invoke()
+            },
+            settingsService = settingsService,
+            adBlockingService = adBlockingService
+        )
+    }
+
+    /**
+     * Set up JavaScript interface for scroll detection
+     */
+    private fun setupScrollDetection(webView: WebView) {
+        webView.addJavascriptInterface(object {
+            @JavascriptInterface
+            fun onScrollDown() {
+                coroutineScope.launch {
+                    onScrollDownCallback?.invoke()
+                }
+            }
+
+            @JavascriptInterface
+            fun onScrollUp() {
+                coroutineScope.launch {
+                    onScrollUpCallback?.invoke()
+                }
+            }
+        }, "ScrollDetector")
+    }
+    
+    /**
+     * Inject JavaScript for scroll detection
+     */
+    fun injectScrollDetectionJavaScript() {
+        val webView = this.webView ?: return
+        
+        // Inject JavaScript to monitor scrolling in real-time
+        val js = """
+            (function() {
+                // Variables for scroll tracking
+                var lastScrollY = window.scrollY || document.documentElement.scrollTop;
+                var lastScrollDirection = null;
+                var scrollThreshold = 3; // Lower threshold for more sensitivity
+                var consecutiveThreshold = 2; // Number of consecutive scrolls in same direction to trigger
+                var consecutiveCount = 0;
+                var lastNotifiedDirection = null;
+                
+                // Use requestAnimationFrame for smoother performance
+                var ticking = false;
+                
+                // Main scroll handler
+                window.addEventListener('scroll', function() {
+                    if (!ticking) {
+                        window.requestAnimationFrame(function() {
+                            var currentScrollY = window.scrollY || document.documentElement.scrollTop;
+                            var scrollDelta = currentScrollY - lastScrollY;
+                            
+                            // Determine scroll direction
+                            if (Math.abs(scrollDelta) > scrollThreshold) {
+                                var currentDirection = scrollDelta > 0 ? 'down' : 'up';
+                                
+                                // Check if we're continuing in the same direction
+                                if (currentDirection === lastScrollDirection) {
+                                    consecutiveCount++;
+                                } else {
+                                    consecutiveCount = 1;
+                                    lastScrollDirection = currentDirection;
+                                }
+                                
+                                // Only notify when we have enough consecutive scrolls in the same direction
+                                // or when direction changes from the last notification
+                                if ((consecutiveCount >= consecutiveThreshold && 
+                                    currentDirection !== lastNotifiedDirection) || 
+                                    (currentDirection !== lastNotifiedDirection && 
+                                    Math.abs(scrollDelta) > scrollThreshold * 3)) {
+                                    
+                                    if (currentDirection === 'down' && window.ScrollDetector) {
+                                        window.ScrollDetector.onScrollDown();
+                                    } else if (window.ScrollDetector) {
+                                        window.ScrollDetector.onScrollUp();
+                                    }
+                                    lastNotifiedDirection = currentDirection;
+                                }
+                                
+                                lastScrollY = currentScrollY;
+                            }
+                            
+                            ticking = false;
+                        });
+                        
+                        ticking = true;
+                    }
+                }, { passive: true });
+                
+                // Also detect touch events for more responsive mobile scrolling
+                var touchStartY = 0;
+                
+                document.addEventListener('touchstart', function(e) {
+                    touchStartY = e.touches[0].clientY;
+                }, { passive: true });
+                
+                document.addEventListener('touchmove', function(e) {
+                    var touchY = e.touches[0].clientY;
+                    var touchDelta = touchStartY - touchY;
+                    
+                    // Detect significant touch movement
+                    if (Math.abs(touchDelta) > 10) {
+                        if (touchDelta > 0) {
+                            // Swiping up = scrolling down
+                            if (window.ScrollDetector) window.ScrollDetector.onScrollDown();
+                        } else {
+                            // Swiping down = scrolling up
+                            if (window.ScrollDetector) window.ScrollDetector.onScrollUp();
+                        }
+                        touchStartY = touchY;
+                    }
+                }, { passive: true });
+            })();
+        """.trimIndent()
+        
+        webView.evaluateJavascript(js, null)
+    }
+
+    /**
+     * Handle received favicon from WebView
+     */
+    private fun handleReceivedFavicon(favicon: Bitmap) {
+        Logger.d(TAG, "Received favicon for bubble: $bubbleId")
+
+        // Update in WebViewModel to persist the favicon
+        webViewModel?.let { viewModel ->
+            val currentUrl = webView?.url
+            if (currentUrl != null) {
+                // Pass the bubble ID so the WebViewModel can store it with the correct key
+                viewModel.updateFavicon(currentUrl, favicon, bubbleId)
+                Logger.d(TAG, "Updated favicon in WebViewModel for URL: $currentUrl with bubbleId: $bubbleId")
+            }
+        }
+    }
+
+    /**
+     * Handle received page title from WebView
+     */
+    private fun handleReceivedTitle(title: String) {
+        Logger.d(TAG, "Received page title for bubble $bubbleId: $title")
+
+        // Update title in WebViewModel
+        webViewModel?.let { viewModel ->
+            val currentUrl = webView?.url
+            if (currentUrl != null) {
+                viewModel.updateTitle(currentUrl, title)
+                Logger.d(TAG, "Updated title in WebViewModel for URL: $currentUrl")
+            }
+        }
+
+        // Note: Global WebViewModel access removed as part of DI refactoring
+        // Title updates now handled properly through injected WebViewModel instances
+    }
+
+    /**
+     * Load URL in the WebView
+     *
+     * @param url The URL to load
+     */
+    fun loadUrl(url: String) {
+        val webView = this.webView ?: return
+
+        if (url.isEmpty()) {
+            Logger.d(TAG, "Empty URL provided for bubble $bubbleId")
+            webView.loadUrl("about:blank")
+            return
+        }
+
+        // Use security policy manager to validate and format URL
+        val validatedUrl = securityPolicyManager.validateAndFormatUrl(url)
+        if (validatedUrl == null || !securityPolicyManager.isUrlSafeToLoad(validatedUrl)) {
+            Logger.d(TAG, "Invalid or unsafe URL provided for bubble $bubbleId: $url")
+            webView.loadUrl("about:blank")
+            return
+        }
+
+        try {
+            Logger.d(TAG, "Loading URL in WebView for bubble $bubbleId: $validatedUrl")
+
+            // Clear any existing page
+            webView.clearHistory()
+            webView.clearCache(true)
+
+            // Make sure WebView is in a good state for loading
+            webView.stopLoading()
+
+            // Load the URL with additional headers
+            val headers = HashMap<String, String>()
+            headers["User-Agent"] = webView.settings.userAgentString
+            headers["Accept"] = "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
+            headers["Accept-Language"] = "en-US,en;q=0.5"
+            headers["Content-Security-Policy"] = JavaScriptSanitizer.generateCSPHeader()
+
+            webView.loadUrl(validatedUrl, headers)
+
+            Logger.d(TAG, "URL load initiated for bubble $bubbleId")
+
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error loading URL for bubble $bubbleId", e)
+            webView.loadUrl("about:blank")
+        }
+    }
+
+    /**
+     * Reload the current page
+     */
+    fun reload() {
+        webView?.reload()
+    }
+
+    /**
+     * Stop loading the current page
+     */
+    fun stopLoading() {
+        webView?.stopLoading()
+    }
+
+    /**
+     * Go back in WebView history
+     */
+    fun goBack() {
+        webView?.let { webView ->
+            if (webView.canGoBack()) {
+                webView.goBack()
+            }
+        }
+    }
+
+    /**
+     * Go forward in WebView history
+     */
+    fun goForward() {
+        webView?.let { webView ->
+            if (webView.canGoForward()) {
+                webView.goForward()
+            }
+        }
+    }
+
+    /**
+     * Evaluate JavaScript in the WebView
+     *
+     * @param script The JavaScript code to execute
+     * @param callback Optional callback to receive the result
+     */
+    fun evaluateJavaScript(script: String, callback: ((String?) -> Unit)? = null) {
+        // Sanitize the JavaScript code for security
+        val sanitizedScript = JavaScriptSanitizer.sanitizeJavaScript(script)
+        
+        // Only execute if the script is considered safe
+        if (JavaScriptSanitizer.isJavaScriptSafe(sanitizedScript)) {
+            webView?.evaluateJavascript(sanitizedScript, callback)
+        } else {
+            Logger.w(TAG, "Blocked potentially unsafe JavaScript execution")
+            callback?.invoke(null)
+        }
+    }
+
+    /**
+     * Apply dynamic zoom to the WebView content
+     *
+     * @param zoomPercent The zoom percentage (e.g., 150 for 150%)
+     */
+    fun applyDynamicZoom(zoomPercent: Int) {
+        val zoomFactor = zoomPercent / 100.0
+        val widthPercent = (100.0 / zoomFactor).toInt()
+
+        val script = """
+            javascript:(function() {
+                var meta = document.querySelector('meta[name="viewport"]');
+                if (!meta) {
+                    meta = document.createElement('meta');
+                    meta.name = 'viewport';
+                    document.head.appendChild(meta);
+                }
+                meta.content = 'width=device-width, initial-scale=${zoomFactor}, maximum-scale=1.0, user-scalable=yes';
+                
+                document.body.style.zoom = "${zoomPercent}%";
+                document.body.style.transformOrigin = "0 0";
+                document.body.style.transform = "scale(${zoomFactor})";
+                document.body.style.width = "${widthPercent}%";
+                
+                return "Zoom applied: ${zoomPercent}%";
+            })()
+        """.trimIndent()
+
+        evaluateJavaScript(script)
+        Logger.d(TAG, "Applied dynamic zoom: $zoomPercent%")
+    }
+
+    /**
+     * Get the current URL of the WebView
+     */
+    fun getCurrentUrl(): String? {
+        return webView?.url
+    }
+
+    /**
+     * Get the current title of the WebView
+     */
+    fun getCurrentTitle(): String? {
+        return webView?.title
+    }
+
+    /**
+     * Check if the WebView can go back
+     */
+    fun canGoBack(): Boolean {
+        return webView?.canGoBack() ?: false
+    }
+
+    /**
+     * Check if the WebView can go forward
+     */
+    fun canGoForward(): Boolean {
+        return webView?.canGoForward() ?: false
+    }
+
+    /**
+     * Set the WebView's visibility and alpha
+     */
+    fun setVisibility(visibility: Int, alpha: Float = 1f) {
+        webView?.visibility = visibility
+        webView?.alpha = alpha
+    }
+
+    // Callback setters
+    fun setOnUrlChangedCallback(callback: (String) -> Unit) {
+        onUrlChangedCallback = callback
+    }
+
+    fun setOnHtmlContentLoadedCallback(callback: (String) -> Unit) {
+        onHtmlContentLoadedCallback = callback
+    }
+
+    fun setOnScrollDownCallback(callback: () -> Unit) {
+        onScrollDownCallback = callback
+    }
+
+    fun setOnScrollUpCallback(callback: () -> Unit) {
+        onScrollUpCallback = callback
+    }
+
+    fun setOnFaviconReceivedCallback(callback: (Bitmap) -> Unit) {
+        onFaviconReceivedCallback = callback
+    }
+
+    fun setOnTitleReceivedCallback(callback: (String) -> Unit) {
+        onTitleReceivedCallback = callback
+    }
+
+    fun setOnProgressChangedCallback(callback: (Int) -> Unit) {
+        onProgressChangedCallback = callback
+    }
+
+    fun setOnPageFinishedCallback(callback: () -> Unit) {
+        onPageFinishedCallback = callback
+    }
+
+    /**
+     * Clean up resources
+     */
+    fun cleanup() {
+        webView?.let { webView ->
+            webView.clearHistory()
+            webView.clearCache(true)
+            webView.removeJavascriptInterface("ScrollDetector")
+            webView.webViewClient = WebViewClient()  // Use default WebViewClient instead of null
+            webView.webChromeClient = WebChromeClient()  // Use default WebChromeClient instead of null
+        }
+
+        // Clear references
+        webView = null
+        progressBar = null
+        webViewModel = null
+
+        // Clear callbacks
+        onUrlChangedCallback = null
+        onHtmlContentLoadedCallback = null
+        onScrollDownCallback = null
+        onScrollUpCallback = null
+        onFaviconReceivedCallback = null
+        onTitleReceivedCallback = null
+        onProgressChangedCallback = null
+        onPageFinishedCallback = null
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleWebViewManagerInterface.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleWebViewManagerInterface.kt
new file mode 100644
index 0000000..8b82875
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/BubbleWebViewManagerInterface.kt
@@ -0,0 +1,68 @@
+package com.quick.browser.presentation.ui.browser
+
+import android.graphics.Bitmap
+
+/**
+ * Interface for BubbleView to interact with BubbleWebViewManager
+ * 
+ * This interface defines the contract between BubbleView and BubbleWebViewManager,
+ * allowing the WebView manager to communicate back to the BubbleView for UI updates
+ * and state changes.
+ */
+interface BubbleWebViewManagerInterface {
+    
+    /**
+     * Called when the WebView URL changes
+     * 
+     * @param newUrl The new URL that the WebView navigated to
+     */
+    fun onWebViewUrlChanged(newUrl: String)
+    
+    /**
+     * Called when HTML content is loaded and available for processing
+     * 
+     * @param htmlContent The HTML content of the loaded page
+     */
+    fun onWebViewHtmlContentLoaded(htmlContent: String)
+    
+    /**
+     * Called when the user scrolls down in the WebView
+     */
+    fun onWebViewScrollDown()
+    
+    /**
+     * Called when the user scrolls up in the WebView
+     */
+    fun onWebViewScrollUp()
+    
+    /**
+     * Called when a favicon is received from the WebView
+     * 
+     * @param favicon The favicon bitmap
+     */
+    fun onWebViewFaviconReceived(favicon: Bitmap)
+    
+    /**
+     * Called when a page title is received from the WebView
+     * 
+     * @param title The page title
+     */
+    fun onWebViewTitleReceived(title: String)
+    
+    /**
+     * Called when the WebView loading progress changes
+     * 
+     * @param progress The loading progress (0-100)
+     */
+    fun onWebViewProgressChanged(progress: Int)
+    
+    /**
+     * Called when the WebView page finishes loading
+     */
+    fun onWebViewPageFinished()
+    
+    /**
+     * Called when font size settings are updated
+     */
+    fun onFontSizeSettingsUpdated()
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/OfflineArticleSaver.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/OfflineArticleSaver.kt
new file mode 100644
index 0000000..d1738f3
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/OfflineArticleSaver.kt
@@ -0,0 +1,135 @@
+package com.quick.browser.presentation.ui.browser
+
+import android.content.Context
+import android.widget.Toast
+import com.quick.browser.R
+import com.quick.browser.domain.service.ArticleSavingService
+import dagger.hilt.android.qualifiers.ApplicationContext
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+/**
+ * Utility class for handling offline article saving functionality with UI feedback
+ * This class handles the UI aspects of saving articles (toasts, callbacks) while
+ * delegating the business logic to ArticleSavingService
+ */
+class OfflineArticleSaver @Inject constructor(
+    @ApplicationContext private val context: Context,
+    private val articleSavingService: ArticleSavingService
+) {
+    
+    /**
+     * Save an article for offline reading with UI feedback
+     *
+     * @param url The URL of the article to save
+     * @param scope The coroutine scope to launch the save operation
+     * @param onSuccess Callback when save is successful
+     * @param onError Callback when save fails
+     */
+    fun saveArticleForOfflineReading(
+        url: String,
+        scope: CoroutineScope,
+        onSuccess: () -> Unit = {},
+        onError: (String) -> Unit = {}
+    ) {
+        scope.launch {
+            val success = articleSavingService.saveArticleForOfflineReading(
+                url = url,
+                scope = this,
+                onSuccess = {
+                    Toast.makeText(
+                        context,
+                        context.getString(R.string.article_saved_success),
+                        Toast.LENGTH_SHORT
+                    ).show()
+                    onSuccess()
+                },
+                onError = { errorMessage ->
+                    Toast.makeText(
+                        context,
+                        getErrorMessage(errorMessage, R.string.article_extraction_failed),
+                        Toast.LENGTH_SHORT
+                    ).show()
+                    onError(errorMessage)
+                }
+            )
+            
+            if (!success) {
+                // Article already exists
+                Toast.makeText(
+                    context,
+                    context.getString(R.string.article_already_saved),
+                    Toast.LENGTH_SHORT
+                ).show()
+                onError(context.getString(R.string.article_already_saved))
+            }
+        }
+    }
+    
+    /**
+     * Save the original web page content as an article if extraction fails with UI feedback
+     *
+     * @param url The URL of the page to save
+     * @param title The title of the page
+     * @param content The HTML content of the page
+     * @param scope The coroutine scope to launch the save operation
+     * @param onSuccess Callback when save is successful
+     * @param onError Callback when save fails
+     */
+    fun saveOriginalPageAsArticle(
+        url: String,
+        title: String,
+        content: String,
+        scope: CoroutineScope,
+        onSuccess: () -> Unit = {},
+        onError: (String) -> Unit = {}
+    ) {
+        scope.launch {
+            val success = articleSavingService.saveOriginalPageAsArticle(
+                url = url,
+                title = title,
+                content = content,
+                scope = this,
+                onSuccess = {
+                    Toast.makeText(
+                        context,
+                        context.getString(R.string.original_page_saved_success),
+                        Toast.LENGTH_SHORT
+                    ).show()
+                    onSuccess()
+                },
+                onError = { errorMessage ->
+                    Toast.makeText(
+                        context,
+                        getErrorMessage(errorMessage, R.string.original_page_save_failed),
+                        Toast.LENGTH_SHORT
+                    ).show()
+                    onError(errorMessage)
+                }
+            )
+            
+            if (!success) {
+                // Article already exists
+                Toast.makeText(
+                    context,
+                    context.getString(R.string.article_already_saved),
+                    Toast.LENGTH_SHORT
+                ).show()
+                onError(context.getString(R.string.article_already_saved))
+            }
+        }
+    }
+    
+    private fun getErrorMessage(errorMessage: String, defaultResId: Int): String {
+        return if (errorMessage == "Article already saved") {
+            context.getString(R.string.article_already_saved)
+        } else if (errorMessage == "Article extraction failed") {
+            context.getString(R.string.article_extraction_failed)
+        } else if (errorMessage == "Failed to save original page") {
+            context.getString(R.string.original_page_save_failed)
+        } else {
+            errorMessage
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/ScrollAwareWebViewClient.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/ScrollAwareWebViewClient.kt
new file mode 100644
index 0000000..9ed97e4
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/ScrollAwareWebViewClient.kt
@@ -0,0 +1,186 @@
+package com.quick.browser.presentation.ui.browser
+
+import android.content.Context
+import android.webkit.WebView
+import com.quick.browser.service.AdBlockingService
+import com.quick.browser.service.SettingsService
+import com.quick.browser.utils.JavaScriptSanitizer
+import com.quick.browser.utils.Logger
+import com.quick.browser.utils.security.SecurityPolicyManager
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.launch
+
+/**
+ * WebViewClient that detects scrolling to show/hide the toolbar
+ */
+class ScrollAwareWebViewClient(
+    context: Context,
+    onPageUrlChanged: (String) -> Unit,
+    private val onHtmlContentLoaded: (String) -> Unit,
+    private val onScrollDown: () -> Unit,
+    private val onScrollUp: () -> Unit,
+    private val onPageFinishedCallback: () -> Unit,
+    settingsService: SettingsService,
+    adBlockingService: AdBlockingService
+) : WebViewClientEx(context, onPageUrlChanged, settingsService, adBlockingService) {
+
+    private val securityPolicyManager = SecurityPolicyManager(context)
+    private val coroutineScope = CoroutineScope(Dispatchers.Main)
+
+    override fun onPageFinished(view: WebView?, url: String?) {
+        super.onPageFinished(view, url)
+        
+        // Notify the callback that the page has finished loading
+        // This will stop the swipe refresh indicator
+        try {
+            onPageFinishedCallback?.invoke()
+        } catch (e: Exception) {
+            Logger.e("ScrollAwareWebViewClient", "Error notifying page finished", e)
+        }
+
+        // Capture HTML content for summarization in the background
+        view?.let { webView ->
+            // Use JavaScript to get the HTML content, but do it after a short delay
+            // to ensure the page is fully rendered and interactive first
+            coroutineScope.launch {
+                try {
+                    // Delay summarization to prioritize user interaction
+                    delay(1000)
+
+                    // Get HTML content for summarization
+                    webView.evaluateJavascript(
+                        """
+                        (function() {
+                            return document.documentElement.outerHTML;
+                        })()
+                    """.trimIndent()
+                    ) { html ->
+                        if (html != null && html.length > 50) {
+                            // Process the HTML on a background thread
+                            coroutineScope.launch(Dispatchers.IO) {
+                                try {
+                                    // The result is a JSON string, so we need to parse it
+                                    val unescapedHtml = html.substring(1, html.length - 1)
+                                        .replace("\\\"", "\"")
+                                        .replace("\\n", "\n")
+                                        .replace("\\\\", "\\")
+
+                                    // Pass the HTML content to the callback for background summarization
+                                    Logger.d(
+                                        "ScrollAwareWebViewClient",
+                                        "Captured HTML content for URL: $url (${unescapedHtml.length} chars)"
+                                    )
+                                    onHtmlContentLoaded(unescapedHtml)
+                                } catch (e: Exception) {
+                                    // Log the error but don't crash
+                                    Logger.e("ScrollAwareWebViewClient", "Error processing HTML", e)
+                                }
+                            }
+                        } else {
+                            Logger.w(
+                                "ScrollAwareWebViewClient",
+                                "HTML content too short or null for URL: $url"
+                            )
+                        }
+                    }
+
+                    // Inject JavaScript to monitor scrolling in real-time with improved responsiveness
+                    val js = """
+                        (function() {
+                            // Add Content Security Policy
+                            var meta = document.createElement('meta');
+                            meta.httpEquiv = 'Content-Security-Policy';
+                            meta.content = '${JavaScriptSanitizer.generateCSPHeader()}';
+                            document.getElementsByTagName('head')[0].appendChild(meta);
+                            
+                            // Variables for scroll tracking
+                            var lastScrollY = window.scrollY || document.documentElement.scrollTop;
+                            var lastScrollDirection = null;
+                            var scrollThreshold = 3; // Lower threshold for more sensitivity
+                            var consecutiveThreshold = 2; // Number of consecutive scrolls in same direction to trigger
+                            var consecutiveCount = 0;
+                            var lastNotifiedDirection = null;
+                            
+                            // Use requestAnimationFrame for smoother performance
+                            var ticking = false;
+                            
+                            // Main scroll handler
+                            window.addEventListener('scroll', function() {
+                                if (!ticking) {
+                                    window.requestAnimationFrame(function() {
+                                        var currentScrollY = window.scrollY || document.documentElement.scrollTop;
+                                        var scrollDelta = currentScrollY - lastScrollY;
+                                        
+                                        // Determine scroll direction
+                                        if (Math.abs(scrollDelta) > scrollThreshold) {
+                                            var currentDirection = scrollDelta > 0 ? 'down' : 'up';
+                                            
+                                            // Check if we're continuing in the same direction
+                                            if (currentDirection === lastScrollDirection) {
+                                                consecutiveCount++;
+                                            } else {
+                                                consecutiveCount = 1;
+                                                lastScrollDirection = currentDirection;
+                                            }
+                                            
+                                            // Only notify when we have enough consecutive scrolls in the same direction
+                                            // or when direction changes from the last notification
+                                            if ((consecutiveCount >= consecutiveThreshold && 
+                                                currentDirection !== lastNotifiedDirection) || 
+                                                (currentDirection !== lastNotifiedDirection && 
+                                                Math.abs(scrollDelta) > scrollThreshold * 3)) {
+                                                
+                                                if (currentDirection === 'down') {
+                                                    window.ScrollDetector.onScrollDown();
+                                                } else {
+                                                    window.ScrollDetector.onScrollUp();
+                                                }
+                                                lastNotifiedDirection = currentDirection;
+                                            }
+                                            
+                                            lastScrollY = currentScrollY;
+                                        }
+                                        
+                                        ticking = false;
+                                    });
+                                    
+                                    ticking = true;
+                                }
+                            }, { passive: true });
+                            
+                            // Also detect touch events for more responsive mobile scrolling
+                            var touchStartY = 0;
+                            
+                            document.addEventListener('touchstart', function(e) {
+                                touchStartY = e.touches[0].clientY;
+                            }, { passive: true });
+                            
+                            document.addEventListener('touchmove', function(e) {
+                                var touchY = e.touches[0].clientY;
+                                var touchDelta = touchStartY - touchY;
+                                
+                                // Detect significant touch movement
+                                if (Math.abs(touchDelta) > 10) {
+                                    if (touchDelta > 0) {
+                                        // Swiping up = scrolling down
+                                        window.ScrollDetector.onScrollDown();
+                                    } else {
+                                        // Swiping down = scrolling up
+                                        window.ScrollDetector.onScrollUp();
+                                    }
+                                    touchStartY = touchY;
+                                }
+                            }, { passive: true });
+                        })();
+                    """.trimIndent()
+
+                    webView.evaluateJavascript(js, null)
+                } catch (e: Exception) {
+                    Logger.e("ScrollAwareWebViewClient", "Error in onPageFinished", e)
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/UrlBarView.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/UrlBarView.kt
new file mode 100644
index 0000000..105c0cc
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/UrlBarView.kt
@@ -0,0 +1,176 @@
+package com.quick.browser.presentation.ui.browser
+
+import android.content.Context
+import android.graphics.Bitmap
+import android.util.AttributeSet
+import android.view.LayoutInflater
+import android.view.View
+import android.widget.EditText
+import android.widget.FrameLayout
+import android.widget.ImageView
+import com.google.android.material.button.MaterialButton
+import com.quick.browser.R
+
+/**
+ * A dedicated view for the URL bar component in the bubble.
+ * 
+ * This view handles all UI components and interactions for the URL bar,
+ * separating it from the main BubbleView class to improve maintainability.
+ */
+class UrlBarView @JvmOverloads constructor(
+    context: Context,
+    attrs: AttributeSet? = null,
+    defStyleAttr: Int = 0
+) : FrameLayout(context, attrs, defStyleAttr) {
+
+    private lateinit var urlBarContainer: View
+    private lateinit var urlBarIcon: ImageView
+    private lateinit var urlBarText: EditText
+    private lateinit var btnUrlBarShare: MaterialButton
+    private lateinit var btnUrlBarSettings: MaterialButton
+
+    init {
+        initializeViews()
+    }
+
+    private fun initializeViews() {
+        // Inflate the URL bar layout
+        LayoutInflater.from(context).inflate(R.layout.url_bar_layout, this, true)
+        
+        // Initialize UI components
+        urlBarContainer = findViewById(R.id.url_bar_container)
+        urlBarIcon = findViewById(R.id.url_bar_icon)
+        urlBarText = findViewById(R.id.url_bar_text)
+        btnUrlBarShare = findViewById(R.id.btn_url_bar_share)
+        btnUrlBarSettings = findViewById(R.id.btn_url_bar_settings)
+    }
+
+    // ================== PUBLIC INTERFACE METHODS ==================
+
+    /**
+     * Update the URL bar icon
+     */
+    fun updateUrlBarIcon(bitmap: Bitmap?) {
+        if (bitmap != null) {
+            urlBarIcon.setImageBitmap(bitmap)
+        } else {
+            urlBarIcon.setImageResource(R.drawable.ic_globe)
+        }
+    }
+
+    /**
+     * Update URL bar text
+     */
+    fun updateUrlBarText(url: String) {
+        if (urlBarText.text.toString() != url) {
+            urlBarText.setText(url)
+        }
+    }
+
+    /**
+     * Get URL bar text
+     */
+    fun getUrlBarText(): String {
+        return urlBarText.text.toString()
+    }
+
+    /**
+     * Set URL bar text listener
+     */
+    fun setOnUrlTextListener(listener: (String) -> Unit) {
+        urlBarText.setOnEditorActionListener { _, _, _ ->
+            val inputUrl = urlBarText.text.toString().trim()
+            if (inputUrl.isNotEmpty()) {
+                listener(inputUrl)
+            }
+            true
+        }
+    }
+
+    /**
+     * Set focus change listener
+     */
+    fun setOnFocusChangeListener(listener: (Boolean) -> Unit) {
+        urlBarText.setOnFocusChangeListener { _, hasFocus ->
+            listener(hasFocus)
+        }
+    }
+
+    /**
+     * Set click listener for the URL bar
+     */
+    fun setOnUrlBarClickListener(listener: () -> Unit) {
+        urlBarText.setOnClickListener {
+            listener()
+            urlBarText.requestFocus()
+            urlBarText.selectAll()
+        }
+    }
+
+    /**
+     * Set click listener for the share button
+     */
+    fun setOnShareButtonClickListener(listener: () -> Unit) {
+        btnUrlBarShare.setOnClickListener {
+            listener()
+        }
+    }
+
+    /**
+     * Set click listener for the settings button
+     */
+    fun setOnSettingsButtonClickListener(listener: () -> Unit) {
+        btnUrlBarSettings.setOnClickListener {
+            listener()
+        }
+    }
+
+    /**
+     * Show keyboard
+     */
+    fun showKeyboard() {
+        urlBarText.post {
+            urlBarText.requestFocus()
+            val imm = context.getSystemService(Context.INPUT_METHOD_SERVICE) as android.view.inputmethod.InputMethodManager
+            imm.showSoftInput(urlBarText, android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT)
+        }
+    }
+
+    /**
+     * Hide keyboard
+     */
+    fun hideKeyboard() {
+        val imm = context.getSystemService(Context.INPUT_METHOD_SERVICE) as android.view.inputmethod.InputMethodManager
+        imm.hideSoftInputFromWindow(urlBarText.windowToken, 0)
+        urlBarText.clearFocus()
+    }
+
+    /**
+     * Show URL bar
+     */
+    fun show() {
+        urlBarContainer.visibility = View.VISIBLE
+    }
+
+    /**
+     * Hide URL bar
+     */
+    fun hide() {
+        urlBarContainer.visibility = View.GONE
+    }
+
+    /**
+     * Check if URL bar is visible
+     */
+    fun isVisible(): Boolean {
+        return urlBarContainer.visibility == View.VISIBLE
+    }
+
+    // ================== GETTERS FOR VIEW REFERENCES ==================
+
+    fun getUrlBarContainer(): View = urlBarContainer
+    fun getUrlBarIcon(): ImageView = urlBarIcon
+    fun getUrlBarTextEditText(): EditText = urlBarText
+    fun getBtnUrlBarShare(): MaterialButton = btnUrlBarShare
+    fun getBtnUrlBarSettings(): MaterialButton = btnUrlBarSettings
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/WebViewClientEx.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/WebViewClientEx.kt
new file mode 100644
index 0000000..d9de0be
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/WebViewClientEx.kt
@@ -0,0 +1,215 @@
+package com.quick.browser.presentation.ui.browser
+
+import android.content.Context
+import android.content.Intent
+import android.graphics.Bitmap
+import android.net.Uri
+import android.webkit.WebResourceRequest
+import android.webkit.WebResourceResponse
+import android.webkit.WebView
+import android.webkit.WebViewClient
+import com.quick.browser.service.AdBlockingService
+import com.quick.browser.service.AuthenticationService
+import com.quick.browser.service.SettingsService
+import com.quick.browser.utils.Logger
+import com.quick.browser.utils.security.SecurityPolicyManager
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import java.io.ByteArrayInputStream
+
+/**
+ * Extended WebViewClient with ad blocking and other features
+ * This class is open for extension
+ */
+open class WebViewClientEx(
+    protected val context: Context,
+    protected val onPageUrlChanged: (String) -> Unit,
+    private val settingsService: SettingsService,
+    private val adBlockingService: AdBlockingService
+) : WebViewClient() {
+    private val securityPolicyManager = SecurityPolicyManager(context)
+    private val coroutineScope = CoroutineScope(Dispatchers.Main)
+    override open fun shouldInterceptRequest(
+        view: WebView,
+        request: WebResourceRequest
+    ): WebResourceResponse? {
+        val url = request.url.toString()
+
+        // Validate URL for security
+        if (!securityPolicyManager.isUrlSafeToLoad(url)) {
+            return WebResourceResponse("text/plain", "UTF-8", ByteArrayInputStream("".toByteArray()))
+        }
+
+        // Only block ads if enabled in settings
+        if (settingsService.isAdBlockEnabled()) {
+            // Check if this resource should be blocked
+            val blockResponse = adBlockingService.shouldBlockRequest(url)
+            return blockResponse ?: super.shouldInterceptRequest(view, request)
+        }
+
+        // If ad blocking is disabled, don't block anything
+        return super.shouldInterceptRequest(view, request)
+    }
+
+    // override open fun onPageStarted(view: WebView?, url: String?, favicon: Bitmap?) {
+    //     super.onPageStarted(view, url, favicon)
+    //     url?.let { onPageUrlChanged(it) }
+    // }
+
+    // override open fun onPageFinished(view: WebView?, url: String?) {
+    //     super.onPageFinished(view, url)
+
+    //     // Apply content extraction script for read mode only if ad blocking is enabled
+    //     url?.let {
+    //         view?.let { webView ->
+    //             // Only inject ad-blocking script if the setting is enabled AND JavaScript is enabled
+    // Check if ad blocking and JavaScript are enabled
+    // This is now handled by the AdBlockingService
+    //                 // Execute JS to strip out unnecessary elements, can be used later for read mode
+    //                 val cleanupScript = """
+    //                     javascript:(function() {
+    //                         var elements = document.querySelectorAll('iframe, ins, script[src*="ads"], script[src*="analytics"], div[id*="banner"], div[id*="ad-"], div[class*="banner"], div[class*="ad-"]');
+    //                         for (var i = 0; i < elements.length; i++) {
+    //                             elements[i].style.display = 'none';
+    //                         }
+    //                     })()
+    //                 """.trimIndent()
+
+    //                 webView.loadUrl(cleanupScript)
+    //             }
+    //         }
+    //     }
+    // }
+
+    // For newer Android versions
+    override open fun shouldOverrideUrlLoading(view: WebView?, request: WebResourceRequest?): Boolean {
+        // Custom URL handling
+        val url = request?.url?.toString() ?: return false
+
+        // Check for authentication URLs first - before any other processing
+        if (AuthenticationService.isAuthenticationUrl(url)) {
+            Logger.d("WebViewClientEx", "Authentication URL detected in shouldOverrideUrlLoading: $url")
+            view?.context?.let { context ->
+                AuthenticationService.openInCustomTab(context, url)
+                return true
+            }
+        }
+
+        // Always notify about URL change to update UI
+        onPageUrlChanged(url)
+
+        return handleUrlOverride(view, url)
+    }
+
+    // For older Android versions (API < 24)
+    @Suppress("DEPRECATION")
+    override open fun shouldOverrideUrlLoading(view: WebView?, url: String?): Boolean {
+        if (url == null) return false
+
+        // Check for authentication URLs first - before any other processing
+        if (AuthenticationService.isAuthenticationUrl(url)) {
+            Logger.d(
+                "WebViewClientEx",
+                "Authentication URL detected in shouldOverrideUrlLoading (legacy): $url"
+            )
+            view?.context?.let { context ->
+                AuthenticationService.openInCustomTab(context, url)
+                return true
+            }
+        }
+
+        // Always notify about URL change to update UI
+        onPageUrlChanged(url)
+
+        return handleUrlOverride(view, url)
+    }
+
+    // Also intercept page loads before they start
+    override fun onPageStarted(view: WebView?, url: String?, favicon: Bitmap?) {
+        // Check if this is an authentication URL before the page starts loading
+        if (url != null && AuthenticationService.isAuthenticationUrl(url)) {
+            Logger.d("WebViewClientEx", "Authentication URL detected in onPageStarted: $url")
+            view?.stopLoading() // Stop the WebView from loading this URL
+
+            view?.context?.let { context ->
+                AuthenticationService.openInCustomTab(context, url)
+                // Don't call super to prevent the WebView from loading this URL
+                return
+            }
+        }
+
+        super.onPageStarted(view, url, favicon)
+        url?.let { onPageUrlChanged(it) }
+    }
+
+    // Common URL handling logic for both API versions
+    private fun handleUrlOverride(view: WebView?, url: String): Boolean {
+        // Check if this is an authentication URL that should be handled with Custom Tabs
+        if (AuthenticationService.isAuthenticationUrl(url)) {
+            view?.context?.let { context ->
+                return AuthenticationService.openInCustomTab(context, url)
+            }
+        }
+
+        return when {
+            // Handle external schemes (tel, mailto, etc)
+            url.startsWith("tel:") ||
+                    url.startsWith("mailto:") ||
+                    url.startsWith("geo:") ||
+                    url.startsWith("sms:") ||
+                    url.startsWith("intent:") ||
+                    url.startsWith("market:") -> {
+                try {
+                    val intent = Intent(Intent.ACTION_VIEW, Uri.parse(url))
+                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
+                    view?.context?.startActivity(intent)
+                    true
+                } catch (e: Exception) {
+                    // If the intent fails, try to handle market:// links as http links to Play Store
+                    if (url.startsWith("market:")) {
+                        try {
+                            val playStoreUrl = "https://play.google.com/store/apps/details?id=" +
+                                    url.substringAfter("id=").substringBefore("&")
+                            val browserIntent =
+                                Intent(Intent.ACTION_VIEW, Uri.parse(playStoreUrl))
+                            browserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
+                            view?.context?.startActivity(browserIntent)
+                            return true
+                        } catch (e2: Exception) {
+                            // If all else fails, let the system handle it
+                            return false
+                        }
+                    }
+                    false
+                }
+            }
+            // Handle file downloads
+            url.endsWith(".pdf") ||
+                    url.endsWith(".doc") ||
+                    url.endsWith(".docx") ||
+                    url.endsWith(".xls") ||
+                    url.endsWith(".xlsx") ||
+                    url.endsWith(".zip") ||
+                    url.endsWith(".rar") ||
+                    url.endsWith(".apk") -> {
+                try {
+                    // Let the system download manager handle it
+                    val intent = Intent(Intent.ACTION_VIEW)
+                    intent.data = Uri.parse(url)
+                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
+                    view?.context?.startActivity(intent)
+                    true
+                } catch (e: Exception) {
+                    // If no app can handle it, let WebView try to handle it
+                    false
+                }
+            }
+            // Handle regular URLs - let WebView load them directly
+            else -> {
+                // Return false to let WebView handle normal URLs
+                // This is critical for links to work properly
+                false
+            }
+        }
+    }
+}
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/browser/WebViewModel.kt b/app/src/main/java/com/quick/browser/presentation/ui/browser/WebViewModel.kt
new file mode 100644
index 0000000..c9a504e
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/browser/WebViewModel.kt
@@ -0,0 +1,450 @@
+package com.quick.browser.presentation.ui.browser
+
+import android.graphics.Bitmap
+import android.webkit.WebView
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import com.quick.browser.domain.model.WebPage
+import com.quick.browser.domain.usecase.IncrementVisitCountUseCase
+import com.quick.browser.domain.usecase.SaveWebPageUseCase
+import com.quick.browser.domain.usecase.UpdateOfflineStatusUseCase
+import com.quick.browser.utils.ErrorHandler
+import com.quick.browser.utils.Logger
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.StateFlow
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.suspendCancellableCoroutine
+import kotlinx.coroutines.withContext
+import javax.inject.Inject
+import kotlin.coroutines.resume
+
+/**
+ * WebViewModel manages the web content state for bubbles in the application.
+ * It handles loading URLs, managing web page states, and coordinating between
+ * bubbles and their web content.
+ */
+@HiltViewModel
+class WebViewModel @Inject constructor(
+    private val saveWebPageUseCase: SaveWebPageUseCase,
+    private val updateOfflineStatusUseCase: UpdateOfflineStatusUseCase,
+    private val incrementVisitCountUseCase: IncrementVisitCountUseCase
+) : ViewModel() {
+    private val _uiState = MutableStateFlow(BrowserUiState())
+    val uiState: StateFlow<BrowserUiState> = _uiState
+
+    /**
+     * Loads a URL in the specified bubble
+     * @param bubbleId The ID of the bubble
+     * @param url The URL to load
+     */
+    fun loadUrl(bubbleId: String, url: String) {
+        viewModelScope.launch {
+            try {
+                Logger.d("WebViewModel", "Loading URL for bubble $bubbleId: $url")
+
+                val timestamp = System.currentTimeMillis()
+                val webPage = WebPage(
+                    url = url,
+                    title = url,
+                    timestamp = timestamp,
+                    content = "",
+                    isAvailableOffline = false,
+                    visitCount = 1
+                )
+
+                // Set the parent bubble ID to associate this web page with the bubble
+                val updatedWebPage = webPage.copy(parentBubbleId = bubbleId)
+
+                updateWebPage(updatedWebPage)
+
+                Logger.d("WebViewModel", "Successfully loaded URL for bubble $bubbleId: $url")
+            } catch (e: Exception) {
+                ErrorHandler.logError(
+                    tag = "WebViewModel",
+                    message = "Error loading URL for bubble $bubbleId: $url",
+                    throwable = e
+                )
+            }
+        }
+    }
+
+    /**
+     * Updates the web page state
+     * @param webPage The updated web page data
+     */
+    fun updateWebPage(webPage: WebPage) {
+        viewModelScope.launch {
+            try {
+                Logger.d(
+                    "WebViewModel",
+                    "Updating web page for URL: ${webPage.url}, parentBubbleId: ${webPage.parentBubbleId}"
+                )
+                val currentPages = _uiState.value.webPages.toMutableMap()
+
+                // Store the web page with a composite key that includes both URL and bubble ID
+                // This ensures each bubble can have its own version of a web page
+                val key = if (webPage.parentBubbleId != null) {
+                    "${webPage.parentBubbleId}_${webPage.url}"
+                } else {
+                    webPage.url
+                }
+
+                currentPages[key] = webPage
+                _uiState.value = _uiState.value.copy(webPages = currentPages)
+                Logger.d("WebViewModel", "Web page updated successfully, total pages: ${currentPages.size}")
+            } catch (e: Exception) {
+                Logger.e("WebViewModel", "Error updating web page: ${e.message}", e)
+            }
+        }
+    }
+
+    /**
+     * Closes a tab/web page
+     * @param bubbleId The ID of the bubble whose web page should be closed
+     */
+    fun closeTab(bubbleId: String) {
+        viewModelScope.launch {
+            try {
+                Logger.d("WebViewModel", "Closing tab for bubble ID: $bubbleId")
+                val currentPages = _uiState.value.webPages.toMutableMap()
+
+                // Find web pages associated with this bubble ID using the composite key format
+                val pagesToRemove = currentPages.entries.filter { entry ->
+                    entry.key.startsWith("${bubbleId}_") || entry.value.parentBubbleId == bubbleId
+                }
+
+                Logger.d("WebViewModel", "Found ${pagesToRemove.size} pages to remove for bubble ID: $bubbleId")
+
+                // Remove the pages
+                pagesToRemove.forEach { entry ->
+                    currentPages.remove(entry.key)
+                    Logger.d("WebViewModel", "Removed web page with key: ${entry.key}")
+                }
+
+                _uiState.value = _uiState.value.copy(webPages = currentPages)
+                Logger.d("WebViewModel", "Closed tab for bubble ID: $bubbleId, remaining pages: ${currentPages.size}")
+            } catch (e: Exception) {
+                Logger.e("WebViewModel", "Error closing tab for bubble ID: $bubbleId", e)
+            }
+        }
+    }
+
+    /**
+     * Updates the title of a web page
+     * @param url The URL of the page
+     * @param title The new title
+     */
+    fun updateTitle(url: String, title: String) {
+        // Don't update if title is empty or same as URL (which means no real title was extracted)
+        if (title.isEmpty() || title == url) {
+            Logger.d("WebViewModel", "Skipping title update for $url - title is empty or same as URL")
+            return
+        }
+
+        viewModelScope.launch {
+            try {
+                val currentPages = _uiState.value.webPages.toMutableMap()
+
+                // Find all pages with this URL (might be multiple if opened in different bubbles)
+                val matchingPages = currentPages.entries.filter {
+                    it.value.url == url || it.key.endsWith("_$url")
+                }
+
+                if (matchingPages.isNotEmpty()) {
+                    // Update all matching pages
+                    matchingPages.forEach { entry ->
+                        val currentPage = entry.value
+                        // Only update if the current title is the URL or empty
+                        if (currentPage.title == url || currentPage.title.isEmpty()) {
+                            Logger.d("WebViewModel", "Updating title for $url from '${currentPage.title}' to '$title'")
+                            val updatedPage = currentPage.copy(title = title)
+                            currentPages[entry.key] = updatedPage
+                        } else {
+                            Logger.d(
+                                "WebViewModel",
+                                "Skipping title update - page already has a title: ${currentPage.title}"
+                            )
+                        }
+                    }
+                    _uiState.value = _uiState.value.copy(webPages = currentPages)
+                } else {
+                    // If the page doesn't exist yet, create it with the title
+                    Logger.d("WebViewModel", "Creating new page with title: $title for URL: $url")
+                    val webPage = WebPage(
+                        url = url,
+                        title = title,
+                        timestamp = System.currentTimeMillis(),
+                        content = "",
+                        isAvailableOffline = false,
+                        visitCount = 1
+                    )
+                    // We don't know the bubble ID here, but we'll set it when loadUrl is called
+                    currentPages[url] = webPage
+                    _uiState.value = _uiState.value.copy(webPages = currentPages)
+                }
+            } catch (e: Exception) {
+                Logger.e("WebViewModel", "Error updating title for URL: $url", e)
+            }
+        }
+    }
+
+    /**
+     * Updates the progress of a web page
+     * @param url The URL of the web page
+     * @param progress The progress value (0-100)
+     */
+    fun updateProgress(url: String, progress: Int) {
+        viewModelScope.launch {
+            try {
+                val currentPages = _uiState.value.webPages.toMutableMap()
+
+                // Find all pages with this URL (might be multiple if opened in different bubbles)
+                val matchingPages = currentPages.entries.filter {
+                    it.value.url == url || it.key.endsWith("_$url")
+                }
+
+                matchingPages.forEach { entry ->
+                    val currentPage = entry.value
+                    val updatedContent = currentPage.content + "<div>Progress updated: $progress</div>" // Placeholder logic
+                    val updatedPage = currentPage.copy(content = updatedContent)
+                    currentPages[entry.key] = updatedPage
+                }
+
+                _uiState.value = _uiState.value.copy(webPages = currentPages)
+            } catch (e: Exception) {
+                Logger.e("WebViewModel", "Error updating progress for URL: $url", e)
+            }
+        }
+    }
+
+    /**
+     * Updates the favicon of a web page
+     * @param url The URL of the web page
+     * @param favicon The new favicon bitmap
+     * @param bubbleId The ID of the bubble (optional)
+     */
+    fun updateFavicon(url: String, favicon: Bitmap, bubbleId: String? = null) {
+        viewModelScope.launch {
+            try {
+                Logger.d("WebViewModel", "Updating favicon for URL: $url, bubbleId: $bubbleId, favicon dimensions: ${favicon.width}x${favicon.height}")
+                val currentPages = _uiState.value.webPages.toMutableMap()
+
+                // Find all pages with this URL (might be multiple if opened in different bubbles)
+                val matchingPages = if (bubbleId != null) {
+                    // If bubbleId is provided, only update pages for that bubble
+                    currentPages.entries.filter {
+                        (it.value.url == url && it.value.parentBubbleId == bubbleId) ||
+                                it.key == "${bubbleId}_$url"
+                    }
+                } else {
+                    // Otherwise check all pages with this URL
+                    currentPages.entries.filter {
+                        it.value.url == url || it.key.endsWith("_$url")
+                    }
+                }
+
+                if (matchingPages.isNotEmpty()) {
+                    // Update all matching pages
+                    matchingPages.forEach { entry ->
+                        val currentPage = entry.value
+                        // Update the favicon in the WebPage object
+                        val updatedPage = currentPage.copy(favicon = favicon)
+                        currentPages[entry.key] = updatedPage
+                        Logger.d("WebViewModel", "Updated favicon for existing page with key: ${entry.key}")
+                    }
+                    Logger.d("WebViewModel", "Favicon updated successfully for ${matchingPages.size} pages with URL: $url")
+                } else {
+                    // If the page doesn't exist yet, create it with the favicon
+                    val webPage = WebPage(
+                        url = url,
+                        title = url,
+                        timestamp = System.currentTimeMillis(),
+                        content = "",
+                        isAvailableOffline = false,
+                        visitCount = 1,
+                        favicon = favicon,
+                        parentBubbleId = bubbleId
+                    )
+                    
+                    // Set the parent bubble ID if provided
+                    val key = if (bubbleId != null) {
+                        "${bubbleId}_$url"
+                    } else {
+                        url
+                    }
+                    
+                    currentPages[key] = webPage
+                    Logger.d("WebViewModel", "Created new page with favicon for URL: $url, bubbleId: $bubbleId, stored with key: $key")
+                }
+                _uiState.value = _uiState.value.copy(webPages = currentPages)
+                Logger.d("WebViewModel", "WebViewModel now has ${currentPages.size} web pages")
+            } catch (e: Exception) {
+                Logger.e("WebViewModel", "Error updating favicon for URL: $url, bubbleId: $bubbleId", e)
+            }
+        }
+    }
+
+
+    suspend fun evaluateHtml(webView: WebView): String = suspendCancellableCoroutine { cont ->
+        webView.evaluateJavascript("document.body.innerHTML") { html ->
+            cont.resume(html ?: "")
+        }
+    }
+
+    /**
+     * Saves the current page content from WebView for offline use
+     * @param webView The WebView instance
+     * @param url The URL of the page
+     * @param title The title of the page
+     */
+    fun saveCurrentPageFromWebView(webView: WebView, url: String, title: String, bubbleId: String? = null) {
+        viewModelScope.launch {
+            try {
+                val content = withContext(Dispatchers.Main) {
+                    evaluateHtml(webView)
+                }
+
+                val webPage = WebPage(
+                    url = url,
+                    title = title,
+                    timestamp = System.currentTimeMillis(),
+                    content = content,
+                    isAvailableOffline = true,
+                    visitCount = 1,
+                    parentBubbleId = bubbleId
+                )
+
+                saveWebPageUseCase(webPage).also { result ->
+                    if (result is com.quick.browser.domain.result.Result.Failure<*>) {
+                        Logger.e("WebViewModel", "Failed to save web page: ${result.error}")
+                    }
+                }
+                updateWebPage(webPage)
+                Logger.d("WebViewModel", "Saved page content from WebView for URL: $url, bubbleId: $bubbleId")
+            } catch (e: Exception) {
+                Logger.e("WebViewModel", "Error saving page content from WebView: ${e.message}", e)
+            }
+        }
+    }
+
+    // In-memory cache for summaries since they're not stored in the database
+    private val summaryCache = mutableMapOf<String, List<String>>()
+
+    /**
+     * Updates the summary for a web page
+     * @param url The URL of the page
+     * @param summary The list of summary points
+     */
+    fun updateSummary(url: String, summary: List<String>, bubbleId: String? = null) {
+        viewModelScope.launch {
+            try {
+                Logger.d("WebViewModel", "Updating summary for URL: $url, bubbleId: $bubbleId")
+
+                // Store in the in-memory cache
+                summaryCache[url] = summary
+
+                // Update the WebPage objects if they exist
+                val currentPages = _uiState.value.webPages.toMutableMap()
+
+                // Find all pages with this URL (might be multiple if opened in different bubbles)
+                val matchingPages = if (bubbleId != null) {
+                    // If bubbleId is provided, only update pages for that bubble
+                    currentPages.entries.filter {
+                        (it.value.url == url && it.value.parentBubbleId == bubbleId) ||
+                                it.key == "${bubbleId}_$url"
+                    }
+                } else {
+                    // Otherwise update all pages with this URL
+                    currentPages.entries.filter {
+                        it.value.url == url || it.key.endsWith("_$url")
+                    }
+                }
+
+                if (matchingPages.isNotEmpty()) {
+                    // Update all matching pages
+                    matchingPages.forEach { entry ->
+                        val currentPage = entry.value
+                        // Create a new instance with the summary
+                        val updatedPage = currentPage.copy(summary = summary)
+                        currentPages[entry.key] = updatedPage
+                    }
+                    _uiState.value = _uiState.value.copy(webPages = currentPages)
+                    Logger.d("WebViewModel", "Summary updated successfully for ${matchingPages.size} pages with URL: $url")
+                } else {
+                    // If the page doesn't exist yet, create it with the summary
+                    val webPage = WebPage(
+                        url = url,
+                        title = url,
+                        timestamp = System.currentTimeMillis(),
+                        content = "",
+                        isAvailableOffline = false,
+                        visitCount = 1,
+                        summary = summary,
+                        parentBubbleId = bubbleId
+                    )
+
+                    // Set the parent bubble ID if provided
+                    if (bubbleId != null) {
+                        currentPages["${bubbleId}_$url"] = webPage
+                    } else {
+                        currentPages[url] = webPage
+                    }
+
+                    _uiState.value = _uiState.value.copy(webPages = currentPages)
+                    Logger.d("WebViewModel", "Created new page with summary for URL: $url")
+                }
+            } catch (e: Exception) {
+                Logger.e("WebViewModel", "Error updating summary for URL: $url", e)
+            }
+        }
+    }
+
+    /**
+     * Gets the summary for a web page if available
+     * @param url The URL of the page
+     * @return The list of summary points or null if not available
+     */
+    fun getSummary(url: String, bubbleId: String? = null): List<String>? {
+        try {
+            // First check the in-memory cache
+            val cachedSummary = summaryCache[url]
+            if (cachedSummary != null && cachedSummary.isNotEmpty()) {
+                return cachedSummary
+            }
+
+            // Then check all WebPage objects with this URL
+            val currentPages = _uiState.value.webPages
+
+            // Find matching pages
+            val matchingPages = if (bubbleId != null) {
+                // If bubbleId is provided, only check pages for that bubble
+                currentPages.entries.filter {
+                    (it.value.url == url && it.value.parentBubbleId == bubbleId) ||
+                            it.key == "${bubbleId}_$url"
+                }
+            } else {
+                // Otherwise check all pages with this URL
+                currentPages.entries.filter {
+                    it.value.url == url || it.key.endsWith("_$url")
+                }
+            }
+
+            // Return the first non-empty summary found
+            for (entry in matchingPages) {
+                val pageSummary = entry.value.summary
+                if (pageSummary.isNotEmpty()) {
+                    // Update the cache for future use
+                    summaryCache[url] = pageSummary
+                    return pageSummary
+                }
+            }
+
+            return null
+        } catch (e: Exception) {
+            Logger.e("WebViewModel", "Error retrieving summary for URL: $url, bubbleId: $bubbleId", e)
+            return null
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/components/BaseActivity.kt b/app/src/main/java/com/quick/browser/presentation/ui/components/BaseActivity.kt
new file mode 100644
index 0000000..7c4b557
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/components/BaseActivity.kt
@@ -0,0 +1,51 @@
+package com.quick.browser.presentation.ui.components
+
+import android.os.Bundle
+import android.view.View
+import android.view.ViewGroup
+import androidx.appcompat.app.AppCompatActivity
+import androidx.core.content.ContextCompat
+import com.quick.browser.R
+import com.quick.browser.service.SettingsService
+import dagger.hilt.android.AndroidEntryPoint
+import javax.inject.Inject
+
+/**
+ * Base activity class that applies consistent theming across all activities
+ */
+@AndroidEntryPoint
+open class BaseActivity : AppCompatActivity() {
+
+    @Inject
+    lateinit var settingsService: SettingsService
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        setTheme(R.style.Theme_QBrowser)
+
+        // 2. Then call super
+        super.onCreate(savedInstanceState)
+    }
+
+    override fun setContentView(layoutResID: Int) {
+        super.setContentView(layoutResID)
+        // Apply status bar color after content view is set
+        applyStatusBarColor()
+    }
+
+    override fun setContentView(view: View?) {
+        super.setContentView(view)
+        // Apply status bar color after content view is set
+        applyStatusBarColor()
+    }
+
+    override fun setContentView(view: View?, params: ViewGroup.LayoutParams?) {
+        super.setContentView(view, params)
+        // Apply status bar color after content view is set
+        applyStatusBarColor()
+    }
+
+    private fun applyStatusBarColor() {
+        @Suppress("DEPRECATION")
+        window.statusBarColor = ContextCompat.getColor(this, R.color.colorPrimary)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/components/HorizontalSwipeRefreshLayout.kt b/app/src/main/java/com/quick/browser/presentation/ui/components/HorizontalSwipeRefreshLayout.kt
new file mode 100644
index 0000000..b4daca0
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/components/HorizontalSwipeRefreshLayout.kt
@@ -0,0 +1,160 @@
+package com.quick.browser.presentation.ui.components
+
+import android.content.Context
+import android.util.AttributeSet
+import android.view.MotionEvent
+import android.webkit.WebView
+import android.widget.ImageView
+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
+import kotlin.math.abs
+
+/**
+ * Custom SwipeRefreshLayout that supports horizontal swipes for navigation
+ *
+ * This layout extends the standard SwipeRefreshLayout to add support for
+ * horizontal swipe gestures for navigating back and forward in a WebView.
+ * It displays arrow indicators during the swipe gesture to provide visual
+ * feedback to the user.
+ *
+ * @param context The context
+ * @param attrs The attribute set
+ */
+class HorizontalSwipeRefreshLayout @JvmOverloads constructor(
+    context: Context,
+    attrs: AttributeSet? = null
+) : SwipeRefreshLayout(context, attrs) {
+
+    /** The WebView to control with horizontal swipes */
+    var webView: WebView? = null
+    
+    /** The back arrow indicator image view */
+    private var backArrow: ImageView? = null
+    
+    /** The forward arrow indicator image view */
+    private var forwardArrow: ImageView? = null
+
+    private var startX = 0f
+    private var startY = 0f
+    private var isHorizontalSwipe = false
+    private val swipeSlop = 100
+
+    /**
+     * Set the arrow indicator image views
+     *
+     * @param back The back arrow indicator
+     * @param forward The forward arrow indicator
+     */
+    fun setArrowImageViews(back: ImageView, forward: ImageView) {
+        this.backArrow = back
+        this.forwardArrow = forward
+    }
+
+    /**
+     * Intercept touch events to detect horizontal swipes
+     *
+     * @param ev The motion event
+     * @return True if the event should be intercepted, false otherwise
+     */
+    override fun onInterceptTouchEvent(ev: MotionEvent): Boolean {
+        when (ev.action) {
+            MotionEvent.ACTION_DOWN -> {
+                startX = ev.x
+                startY = ev.y
+                isHorizontalSwipe = false
+            }
+            MotionEvent.ACTION_MOVE -> {
+                if (isHorizontalSwipe) {
+                    return true // Already determined it's a horizontal swipe, so intercept
+                }
+                val dx = ev.x - startX
+                val dy = ev.y - startY
+                if (abs(dx) > swipeSlop && abs(dx) > abs(dy)) {
+                    // Horizontal swipe detected
+                    isHorizontalSwipe = true
+                    // Check if we can handle it
+                    val canGoBack = webView?.canGoBack() ?: false
+                    val canGoForward = webView?.canGoForward() ?: false
+                    if ((dx > 0 && canGoBack) || (dx < 0 && canGoForward)) {
+                        return true // We can handle this, so intercept
+                    }
+                }
+            }
+        }
+        // For other cases, let the parent (SwipeRefreshLayout) decide
+        return super.onInterceptTouchEvent(ev)
+    }
+
+    /**
+     * Handle touch events for horizontal swipe navigation
+     *
+     * @param ev The motion event
+     * @return True if the event was handled, false otherwise
+     */
+    override fun onTouchEvent(ev: MotionEvent): Boolean {
+        if (!isHorizontalSwipe) {
+            return super.onTouchEvent(ev)
+        }
+
+        when (ev.action) {
+            MotionEvent.ACTION_MOVE -> {
+                val dx = ev.x - startX
+                if (dx > 0) { // Swiping right (back)
+                    if (webView?.canGoBack() == true) {
+                        backArrow?.visibility = VISIBLE
+                        forwardArrow?.visibility = GONE
+                        val alpha = (dx / (swipeSlop * 2)).coerceIn(0f, 1f) // make it take longer to become fully visible
+                        backArrow?.alpha = alpha
+                        backArrow?.translationX = dx / 3
+                    }
+                } else { // Swiping left (forward)
+                    if (webView?.canGoForward() == true) {
+                        forwardArrow?.visibility = VISIBLE
+                        backArrow?.visibility = GONE
+                        val alpha = (abs(dx) / (swipeSlop * 2)).coerceIn(0f, 1f)
+                        forwardArrow?.alpha = alpha
+                        forwardArrow?.translationX = dx / 3
+                    }
+                }
+            }
+            MotionEvent.ACTION_UP -> {
+                val dx = ev.x - startX
+                if (abs(dx) > swipeSlop) {
+                    if (dx > 0) {
+                        webView?.let {
+                            if (it.canGoBack()) {
+                                it.goBack()
+                            }
+                        }
+                    } else {
+                        webView?.let {
+                            if (it.canGoForward()) {
+                                it.goForward()
+                            }
+                        }
+                    }
+                }
+                // Reset after touch up
+                hideArrows()
+                isHorizontalSwipe = false
+            }
+            MotionEvent.ACTION_CANCEL -> {
+                hideArrows()
+                isHorizontalSwipe = false
+            }
+        }
+        return true // Consume the touch event if it was a horizontal swipe
+    }
+
+    /**
+     * Hide the arrow indicators with animation
+     */
+    private fun hideArrows() {
+        backArrow?.animate()?.alpha(0f)?.setDuration(150)?.start()
+        forwardArrow?.animate()?.alpha(0f)?.setDuration(150)?.withEndAction {
+            backArrow?.visibility = GONE
+            forwardArrow?.visibility = GONE
+            backArrow?.translationX = 0f
+            forwardArrow?.translationX = 0f
+        }?.start()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/history/HistoryActivity.kt b/app/src/main/java/com/quick/browser/presentation/ui/history/HistoryActivity.kt
new file mode 100644
index 0000000..c776198
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/history/HistoryActivity.kt
@@ -0,0 +1,387 @@
+package com.quick.browser.presentation.ui.history
+
+import android.content.Intent
+import android.graphics.Rect
+import android.os.Bundle
+import android.view.View
+import android.view.inputmethod.EditorInfo
+import android.view.inputmethod.InputMethodManager
+import android.widget.Button
+import android.widget.ImageButton
+import android.widget.RadioGroup
+import android.widget.Toast
+import androidx.appcompat.app.AlertDialog
+import androidx.appcompat.widget.SearchView
+import androidx.appcompat.widget.Toolbar
+import androidx.core.view.ViewCompat
+import androidx.core.view.WindowInsetsCompat
+import androidx.core.view.updatePadding
+import androidx.lifecycle.ViewModelProvider
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
+import com.google.android.material.card.MaterialCardView
+import com.quick.browser.R
+import com.quick.browser.domain.repository.HistoryRepository
+import com.quick.browser.domain.usecase.GetHistoryUseCase
+import com.quick.browser.domain.usecase.SearchHistoryUseCase
+import com.quick.browser.presentation.ui.browser.OfflineArticleSaver
+import com.quick.browser.presentation.ui.components.BaseActivity
+import dagger.hilt.android.AndroidEntryPoint
+import kotlinx.coroutines.CoroutineScope
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.launch
+import java.util.*
+import javax.inject.Inject
+
+@AndroidEntryPoint
+class HistoryActivity : BaseActivity() {
+
+    @Inject
+    lateinit var offlineArticleSaver: OfflineArticleSaver
+    
+    @Inject
+    lateinit var getHistoryUseCase: GetHistoryUseCase
+    
+    @Inject
+    lateinit var searchHistoryUseCase: SearchHistoryUseCase
+    
+    @Inject
+    lateinit var historyRepository: HistoryRepository
+
+    companion object {
+        private const val TAG = "HistoryActivity"
+        const val EXTRA_SELECTED_URL = "selected_url"
+    }
+
+    private lateinit var historyViewModel: HistoryViewModel
+    private lateinit var historyAdapter: HistoryAdapter
+    private lateinit var recyclerView: RecyclerView
+    private lateinit var emptyView: View
+    private lateinit var searchView: SearchView
+    private lateinit var searchCard: MaterialCardView
+    private lateinit var swipeRefreshLayout: SwipeRefreshLayout
+    private var isSearchBarExplicitlyOpened = false
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_history)
+
+        // Set up toolbar
+        val toolbar = findViewById<Toolbar>(R.id.toolbar)
+        setSupportActionBar(toolbar)
+        supportActionBar?.setDisplayHomeAsUpEnabled(false) // Hide back button
+        supportActionBar?.setDisplayShowTitleEnabled(false) // Hide default title
+
+        // Ensure toolbar sits below the status bar on all devices
+        ViewCompat.setOnApplyWindowInsetsListener(toolbar) { v, insets ->
+            val statusBarHeight = insets.getInsets(WindowInsetsCompat.Type.statusBars()).top
+            v.updatePadding(top = statusBarHeight)
+            insets
+        }
+
+        // Set up custom toolbar buttons
+        val searchButton = toolbar.findViewById<ImageButton>(R.id.toolbar_search)
+        val deleteButton = toolbar.findViewById<ImageButton>(R.id.toolbar_delete)
+        
+        searchButton.setOnClickListener {
+            showSearchBar()
+        }
+        
+        deleteButton.setOnClickListener {
+            showDeleteOptionsDialog()
+        }
+
+        // Initialize ViewModel
+        historyViewModel = ViewModelProvider(this)[HistoryViewModel::class.java]
+
+        // Initialize views
+        recyclerView = findViewById(R.id.history_recycler_view)
+        emptyView = findViewById(R.id.empty_history_view)
+        searchView = findViewById(R.id.search_view)
+        searchCard = findViewById(R.id.search_card)
+        swipeRefreshLayout = findViewById(R.id.swipe_refresh_layout)
+
+        // Set up RecyclerView
+        setupRecyclerView()
+
+        // Set up search functionality
+        setupSearchView()
+
+        // Set up swipe refresh
+        setupSwipeRefresh()
+
+        // Observe history data
+        observeHistoryData()
+        
+        // Listen for keyboard visibility changes
+        setupKeyboardVisibilityListener()
+    }
+
+    private fun setupRecyclerView() {
+        historyAdapter = HistoryAdapter(
+            onItemClick = { webPage ->
+                returnSelectedUrl(webPage.url)
+            },
+            onItemLongClick = { webPage ->
+                historyViewModel.deletePage(webPage)
+                Toast.makeText(this, "\"${webPage.title}\" deleted from history", Toast.LENGTH_SHORT).show()
+            },
+            offlineArticleSaver = offlineArticleSaver
+        )
+
+        recyclerView.apply {
+            layoutManager = LinearLayoutManager(this@HistoryActivity)
+            adapter = this@HistoryActivity.historyAdapter
+        }
+    }
+
+    private fun setupSearchView() {
+        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
+            override fun onQueryTextSubmit(query: String?): Boolean {
+                // Hide keyboard when Enter is pressed but keep search bar visible
+                val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+                imm.hideSoftInputFromWindow(searchView.windowToken, 0)
+                return true
+            }
+
+            override fun onQueryTextChange(newText: String?): Boolean {
+                if (newText.isNullOrEmpty()) {
+                    // Show all history
+                    observeHistoryData()
+                } else {
+                    // Search history
+                    searchHistory(newText)
+                }
+                return true
+            }
+        })
+        
+        // Handle close button click
+        searchView.setOnCloseListener {
+            closeSearchBar()
+            true
+        }
+        
+        // Also handle Enter key from the search view's text field
+        searchView.findViewById<androidx.appcompat.widget.SearchView.SearchAutoComplete>(
+            androidx.appcompat.R.id.search_src_text
+        ).setOnEditorActionListener { _, actionId, _ ->
+            if (actionId == EditorInfo.IME_ACTION_SEARCH) {
+                // Hide keyboard when Enter is pressed but keep search bar visible
+                val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+                imm.hideSoftInputFromWindow(searchView.windowToken, 0)
+                true
+            } else {
+                false
+            }
+        }
+    }
+
+    private fun setupSwipeRefresh() {
+        swipeRefreshLayout.setOnRefreshListener {
+            // Refresh the history data
+            observeHistoryData()
+
+            // Stop the refresh animation after a short delay
+            swipeRefreshLayout.postDelayed({
+                swipeRefreshLayout.isRefreshing = false
+            }, 1000)
+        }
+
+        // Set refresh colors
+        swipeRefreshLayout.setColorSchemeResources(
+            R.color.colorPrimary,
+            R.color.colorAccent,
+            R.color.secondaryColor
+        )
+    }
+
+    private fun searchHistory(query: String) {
+        historyViewModel.searchHistory(query)
+        // Observe the search results directly from the use case
+        searchHistoryUseCase(query).observe(this) { pages ->
+            if (pages.isEmpty()) {
+                recyclerView.visibility = View.GONE
+                emptyView.visibility = View.VISIBLE
+            } else {
+                recyclerView.visibility = View.VISIBLE
+                emptyView.visibility = View.GONE
+                historyAdapter.submitList(pages)
+            }
+        }
+    }
+
+    private fun observeHistoryData() {
+        // Observe all pages from the use case
+        getHistoryUseCase().observe(this) { pages ->
+            if (pages.isEmpty()) {
+                recyclerView.visibility = View.GONE
+                emptyView.visibility = View.VISIBLE
+            } else {
+                recyclerView.visibility = View.VISIBLE
+                emptyView.visibility = View.GONE
+                historyAdapter.submitList(pages)
+            }
+        }
+    }
+
+    private fun returnSelectedUrl(url: String) {
+        val resultIntent = Intent().apply {
+            putExtra(EXTRA_SELECTED_URL, url)
+        }
+        setResult(RESULT_OK, resultIntent)
+        finish()
+    }
+    
+    private fun showSearchBar() {
+        // Mark that the search bar was explicitly opened
+        isSearchBarExplicitlyOpened = true
+        
+        // Show the search card
+        searchCard.visibility = View.VISIBLE
+        
+        // Post the focus and keyboard show to ensure the view is properly laid out
+        searchCard.post {
+            // Focus on the search view and show keyboard
+            searchView.requestFocus()
+            searchView.isIconified = false
+            
+            // Show keyboard with a delay to ensure proper layout
+            searchView.post {
+                val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+                imm.showSoftInput(searchView, InputMethodManager.SHOW_IMPLICIT)
+            }
+        }
+    }
+    
+    private fun closeSearchBar() {
+        // Reset the explicit open flag
+        isSearchBarExplicitlyOpened = false
+        
+        // Hide the search card
+        searchCard.visibility = View.GONE
+        
+        // Clear search query
+        searchView.setQuery("", false)
+        
+        // Hide keyboard
+        val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+        imm.hideSoftInputFromWindow(searchView.windowToken, 0)
+        
+        // Show all history
+        observeHistoryData()
+    }
+    
+    private fun hideSearchBar() {
+        // Hide keyboard
+        val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+        imm.hideSoftInputFromWindow(searchView.windowToken, 0)
+        
+        // Only hide the search bar if it's not focused (user explicitly closed it) or if it wasn't explicitly opened
+        if ((!searchView.hasFocus() && !isSearchBarExplicitlyOpened) || searchView.query.isNullOrEmpty()) {
+            searchCard.visibility = View.GONE
+            isSearchBarExplicitlyOpened = false
+            // Clear search query
+            searchView.setQuery("", false)
+            // Show all history
+            observeHistoryData()
+        }
+    }
+    
+    private fun setupKeyboardVisibilityListener() {
+        // Listen for keyboard visibility changes
+        window.decorView.viewTreeObserver.addOnGlobalLayoutListener {
+            val rect = Rect()
+            window.decorView.getWindowVisibleDisplayFrame(rect)
+            val screenHeight = window.decorView.height
+            val keypadHeight = screenHeight - rect.bottom
+            
+            // Update search card bottom margin to position it above keyboard
+            val layoutParams = searchCard.layoutParams as androidx.constraintlayout.widget.ConstraintLayout.LayoutParams
+            layoutParams.bottomMargin = if (keypadHeight > screenHeight * 0.15) {
+                // Keyboard is visible, position above it
+                keypadHeight + 32 // Add some padding
+            } else {
+                // Keyboard is hidden, use default margin
+                32
+            }
+            searchCard.layoutParams = layoutParams
+            
+            // If keyboard is hidden AND search view is not focused AND search bar wasn't explicitly opened, hide it
+            if (keypadHeight < screenHeight * 0.15 && !searchView.hasFocus() && !isSearchBarExplicitlyOpened) {
+                if (searchCard.visibility == View.VISIBLE && searchView.query.isNullOrEmpty()) {
+                    searchCard.visibility = View.GONE
+                }
+            }
+        }
+    }
+    
+    private fun showDeleteOptionsDialog() {
+        // Create custom dialog
+        val dialogView = layoutInflater.inflate(R.layout.dialog_delete_options, null)
+        val radioGroup = dialogView.findViewById<RadioGroup>(R.id.delete_options_radio_group)
+        val cancelButton = dialogView.findViewById<Button>(R.id.button_cancel)
+        val deleteButton = dialogView.findViewById<Button>(R.id.button_delete)
+        
+        val dialog = AlertDialog.Builder(this)
+            .setView(dialogView)
+            .create()
+        
+        // Set default selection
+        radioGroup.check(R.id.radio_delete_last_hour)
+        
+        // Set up button listeners
+        cancelButton.setOnClickListener {
+            dialog.dismiss()
+        }
+        
+        deleteButton.setOnClickListener {
+            val selectedRadioButtonId = radioGroup.checkedRadioButtonId
+            when (selectedRadioButtonId) {
+                R.id.radio_delete_last_hour -> {
+                    // Delete history from last hour
+                    val oneHourAgo = System.currentTimeMillis() - (60 * 60 * 1000)
+                    CoroutineScope(Dispatchers.IO).launch {
+                        historyRepository.deleteLastHourPages(oneHourAgo)
+                    }
+                    Toast.makeText(this, "Last hour history deleted", Toast.LENGTH_SHORT).show()
+                }
+                R.id.radio_delete_today_yesterday -> {
+                    // Delete history from today and yesterday
+                    val calendar = Calendar.getInstance()
+                    calendar.add(Calendar.DAY_OF_YEAR, -1) // Yesterday
+                    calendar.set(Calendar.HOUR_OF_DAY, 0)
+                    calendar.set(Calendar.MINUTE, 0)
+                    calendar.set(Calendar.SECOND, 0)
+                    calendar.set(Calendar.MILLISECOND, 0)
+                    val yesterdayStart = calendar.timeInMillis
+                    
+                    CoroutineScope(Dispatchers.IO).launch {
+                        historyRepository.deleteTodayPages(yesterdayStart)
+                    }
+                    Toast.makeText(this, "Today and yesterday history deleted", Toast.LENGTH_SHORT).show()
+                }
+                R.id.radio_delete_everything -> {
+                    // Delete all history
+                    CoroutineScope(Dispatchers.IO).launch {
+                        historyRepository.deleteAllPages()
+                    }
+                    Toast.makeText(this, "All history deleted", Toast.LENGTH_SHORT).show()
+                }
+            }
+            dialog.dismiss()
+        }
+        
+        dialog.show()
+    }
+    
+    override fun onBackPressed() {
+        // If search bar is visible, close it instead of closing the activity
+        if (searchCard.visibility == View.VISIBLE) {
+            closeSearchBar()
+        } else {
+            super.onBackPressed()
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/history/HistoryAdapter.kt b/app/src/main/java/com/quick/browser/presentation/ui/history/HistoryAdapter.kt
new file mode 100644
index 0000000..11cb4ab
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/history/HistoryAdapter.kt
@@ -0,0 +1,404 @@
+package com.quick.browser.presentation.ui.history
+
+import android.content.Intent
+import android.graphics.Color
+import android.graphics.drawable.Drawable
+import android.net.Uri
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.ImageView
+import android.widget.TextView
+import android.widget.Toast
+import androidx.lifecycle.LifecycleOwner
+import androidx.lifecycle.lifecycleScope
+import androidx.recyclerview.widget.RecyclerView
+import com.bumptech.glide.Glide
+import com.bumptech.glide.load.DataSource
+import com.bumptech.glide.load.engine.DiskCacheStrategy
+import com.bumptech.glide.load.engine.GlideException
+import com.bumptech.glide.request.RequestListener
+import com.bumptech.glide.request.target.Target
+import com.quick.browser.R
+import com.quick.browser.domain.model.HistoryItem
+import com.quick.browser.domain.model.WebPage
+import com.quick.browser.presentation.ui.browser.OfflineArticleSaver
+import com.quick.browser.utils.Logger
+import kotlinx.coroutines.CoroutineScope
+import java.text.SimpleDateFormat
+import java.util.*
+import kotlin.random.Random
+
+class HistoryAdapter(
+    private val onItemClick: (WebPage) -> Unit,
+    private val onItemLongClick: (WebPage) -> Unit,
+    private val offlineArticleSaver: OfflineArticleSaver
+) : RecyclerView.Adapter<RecyclerView.ViewHolder>() {
+
+    companion object {
+        private const val TYPE_HEADER = 0
+        private const val TYPE_WEBPAGE = 1
+        private const val TAG = "HistoryAdapter"
+    }
+
+    private var items = listOf<HistoryItem>()
+    private val dateFormat = SimpleDateFormat("MMM dd", Locale.getDefault())
+    private val colorCache = mutableMapOf<String, Int>()
+
+    fun submitList(newItems: List<WebPage>) {
+        items = groupWebPagesByTime(newItems.sortedByDescending { it.timestamp })
+        notifyDataSetChanged()
+    }
+
+    private fun groupWebPagesByTime(webPages: List<WebPage>): List<HistoryItem> {
+        val startOfDay = getStartOfDay()
+        val startOfWeek = getStartOfWeek()
+
+        val groupedItems = mutableListOf<HistoryItem>()
+
+        // Group pages by time period
+        val todayPages = webPages.filter { it.timestamp >= startOfDay }
+        val thisWeekPages = webPages.filter { it.timestamp >= startOfWeek && it.timestamp < startOfDay }
+        val olderPages = webPages.filter { it.timestamp < startOfWeek }
+
+        // Add Today section
+        if (todayPages.isNotEmpty()) {
+            groupedItems.add(HistoryItem.Header("Today"))
+            todayPages.forEach { groupedItems.add(HistoryItem.WebPageItem(it)) }
+        }
+
+        // Add Last Week section
+        if (thisWeekPages.isNotEmpty()) {
+            groupedItems.add(HistoryItem.Header("Last Week"))
+            thisWeekPages.forEach { groupedItems.add(HistoryItem.WebPageItem(it)) }
+        }
+
+        // Add Older section
+        if (olderPages.isNotEmpty()) {
+            groupedItems.add(HistoryItem.Header("Older"))
+            olderPages.forEach { groupedItems.add(HistoryItem.WebPageItem(it)) }
+        }
+
+        return groupedItems
+    }
+
+    private fun getStartOfDay(): Long {
+        val calendar = Calendar.getInstance()
+        calendar.set(Calendar.HOUR_OF_DAY, 0)
+        calendar.set(Calendar.MINUTE, 0)
+        calendar.set(Calendar.SECOND, 0)
+        calendar.set(Calendar.MILLISECOND, 0)
+        return calendar.timeInMillis
+    }
+
+    private fun getStartOfWeek(): Long {
+        val calendar = Calendar.getInstance()
+        calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY)
+        calendar.set(Calendar.HOUR_OF_DAY, 0)
+        calendar.set(Calendar.MINUTE, 0)
+        calendar.set(Calendar.SECOND, 0)
+        calendar.set(Calendar.MILLISECOND, 0)
+        return calendar.timeInMillis
+    }
+
+    override fun getItemViewType(position: Int): Int {
+        return when (items[position]) {
+            is HistoryItem.Header -> TYPE_HEADER
+            is HistoryItem.WebPageItem -> TYPE_WEBPAGE
+        }
+    }
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {
+        return when (viewType) {
+            TYPE_HEADER -> {
+                val view = LayoutInflater.from(parent.context)
+                    .inflate(R.layout.item_history_header, parent, false)
+                HeaderViewHolder(view)
+            }
+            TYPE_WEBPAGE -> {
+                val view = LayoutInflater.from(parent.context)
+                    .inflate(R.layout.item_history_card, parent, false)
+                HistoryViewHolder(view)
+            }
+            else -> throw IllegalArgumentException("Unknown view type: $viewType")
+        }
+    }
+
+    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {
+        when (val item = items[position]) {
+            is HistoryItem.Header -> {
+                (holder as HeaderViewHolder).bind(item.title)
+            }
+            is HistoryItem.WebPageItem -> {
+                (holder as HistoryViewHolder).bind(item.webPage)
+            }
+        }
+    }
+
+    override fun getItemCount() = items.size
+
+    // Header ViewHolder
+    inner class HeaderViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
+        private val titleText: TextView = itemView.findViewById(R.id.header_title)
+
+        fun bind(title: String) {
+            titleText.text = title
+        }
+    }
+
+    inner class HistoryViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
+        private val previewImage: ImageView = itemView.findViewById(R.id.preview_image)
+        private val faviconImage: ImageView = itemView.findViewById(R.id.favicon_image)
+        private val titleText: TextView = itemView.findViewById(R.id.title_text)
+        private val dateText: TextView = itemView.findViewById(R.id.date_text)
+        private val offlineIndicator: ImageView = itemView.findViewById(R.id.offline_indicator)
+        private val websiteName: TextView = itemView.findViewById(R.id.website_name)
+        private val shareButton: ImageView = itemView.findViewById(R.id.share_button)
+        private val saveButton: ImageView = itemView.findViewById(R.id.save_button)
+        private val deleteOverlay: View = itemView.findViewById(R.id.delete_overlay)
+        private val deleteButton: ImageView = itemView.findViewById(R.id.delete_button)
+
+        fun bind(page: WebPage) {
+            // Set title
+            val displayTitle = when {
+                page.title.isEmpty() -> itemView.context.getString(R.string.untitled_page)
+                page.title == page.url -> itemView.context.getString(R.string.untitled_page)
+                else -> page.title
+            }
+            titleText.text = displayTitle
+
+            // Set website name (extracted from URL without www, .com, etc.)
+            val cleanWebsiteName = extractCleanWebsiteName(page.url)
+            websiteName.text = cleanWebsiteName
+
+            // Set date (without year)
+            dateText.text = dateFormat.format(Date(page.timestamp))
+
+            // Set save button visibility and icon (always show the download icon)
+            saveButton.visibility = View.VISIBLE
+            saveButton.setImageResource(R.drawable.ic_download)
+
+            // Set preview image using Glide
+            loadPreviewImage(page)
+
+            // Set favicon using Glide
+            loadFavicon(page)
+
+            // Set share button click listener
+            shareButton.setOnClickListener {
+                shareWebPage(page)
+            }
+
+            // Set save button click listener
+            saveButton.setOnClickListener {
+                saveWebPageForOffline(page, (itemView.context as LifecycleOwner).lifecycleScope)
+            }
+
+            // Set click listener for the card
+            itemView.setOnClickListener {
+                onItemClick(page)
+            }
+
+            // Set long click listener for the card
+            itemView.setOnLongClickListener {
+                showDeleteOption()
+                true
+            }
+
+            // Set delete button click listener
+            deleteButton.setOnClickListener {
+                hideDeleteOption()
+                onItemLongClick(page)
+            }
+
+            // Set delete overlay click listener to hide delete option
+            deleteOverlay.setOnClickListener {
+                hideDeleteOption()
+            }
+        }
+
+        private fun showDeleteOption() {
+            deleteOverlay.visibility = View.VISIBLE
+            deleteButton.visibility = View.VISIBLE
+
+            // Add animation
+            deleteOverlay.alpha = 0f
+            deleteButton.alpha = 0f
+            deleteOverlay.animate().alpha(1f).setDuration(200).start()
+            deleteButton.animate().alpha(1f).setDuration(200).start()
+        }
+
+        private fun hideDeleteOption() {
+            deleteOverlay.animate().alpha(0f).setDuration(200).withEndAction {
+                deleteOverlay.visibility = View.GONE
+            }.start()
+            deleteButton.animate().alpha(0f).setDuration(200).withEndAction {
+                deleteButton.visibility = View.GONE
+            }.start()
+        }
+
+        private fun extractCleanWebsiteName(url: String): String {
+            return try {
+                val uri = Uri.parse(url)
+                val host = uri.host?.lowercase() ?: return "Unknown"
+
+                // Remove www prefix
+                val withoutWww = if (host.startsWith("www.")) {
+                    host.substring(4)
+                } else {
+                    host
+                }
+
+                // Split by dots and take the first part (main domain name)
+                val parts = withoutWww.split(".")
+                if (parts.isNotEmpty()) {
+                    // Capitalize first letter
+                    val mainDomain = parts[0]
+                    mainDomain.replaceFirstChar {
+                        if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString()
+                    }
+                } else {
+                    "Unknown"
+                }
+            } catch (e: Exception) {
+                "Unknown"
+            }
+        }
+
+        private fun shareWebPage(page: WebPage) {
+            val shareIntent = Intent(Intent.ACTION_SEND).apply {
+                type = "text/plain"
+                putExtra(Intent.EXTRA_TEXT, page.url)
+                putExtra(Intent.EXTRA_SUBJECT, page.title)
+            }
+
+            val chooser = Intent.createChooser(shareIntent, "Share webpage")
+            itemView.context.startActivity(chooser)
+        }
+
+        private fun saveWebPageForOffline(page: WebPage, scope: CoroutineScope) {
+            offlineArticleSaver.saveArticleForOfflineReading(
+                url = page.url,
+                scope = scope,
+                onSuccess = {
+                    // Article saved successfully
+                    Toast.makeText(
+                        itemView.context,
+                        itemView.context.getString(R.string.article_saved_success),
+                        Toast.LENGTH_SHORT
+                    ).show()
+                },
+                onError = { error ->
+                    // Handle error
+                    Toast.makeText(
+                        itemView.context,
+                        itemView.context.getString(R.string.article_save_failed),
+                        Toast.LENGTH_SHORT
+                    ).show()
+                }
+            )
+        }
+
+        private fun getRandomColorForUrl(url: String): Int {
+            // Use cache to ensure consistent colors for the same URL
+            return colorCache.getOrPut(url) {
+                val hash = url.hashCode()
+                val random = Random(hash)
+
+                // Generate pleasant colors
+                val hue = random.nextFloat() * 360f
+                val saturation = 0.5f + random.nextFloat() * 0.3f // 0.5 to 0.8
+                val lightness = 0.4f + random.nextFloat() * 0.2f // 0.4 to 0.6
+
+                Color.HSVToColor(floatArrayOf(hue, saturation, lightness))
+            }
+        }
+
+        private fun loadPreviewImage(page: WebPage) {
+            // Reset image view properties
+            previewImage.scaleType = ImageView.ScaleType.CENTER_CROP
+            previewImage.setBackgroundColor(Color.TRANSPARENT)
+
+            Logger.d(TAG, "Attempting to load preview image for ${page.url}, previewImageUrl: ${page.previewImageUrl}")
+
+            if (page.previewImageUrl != null && page.previewImageUrl!!.isNotBlank()) {
+                Logger.d(TAG, "Loading preview image for ${page.url}: ${page.previewImageUrl}")
+                Glide.with(itemView.context)
+                    .load(page.previewImageUrl)
+                    .placeholder(R.drawable.ic_web_page)
+                    .error(R.drawable.ic_web_page)
+                    .diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)
+                    .addListener(object : RequestListener<Drawable> {
+                        override fun onLoadFailed(
+                            e: GlideException?,
+                            model: Any?,
+                            target: Target<Drawable>,
+                            isFirstResource: Boolean
+                        ): Boolean {
+                            Logger.e(TAG, "Failed to load preview image for ${page.url}: ${page.previewImageUrl}", e as? Throwable ?: Exception("Unknown error"))
+                            // Show a colored background with icon as fallback
+                            showFallbackPreview(page)
+                            return true // We handled the error
+                        }
+
+                        override fun onResourceReady(
+                            resource: Drawable,
+                            model: Any,
+                            target: Target<Drawable>,
+                            dataSource: DataSource,
+                            isFirstResource: Boolean
+                        ): Boolean {
+                            Logger.d(TAG, "Successfully loaded preview image for ${page.url}")
+                            // Reset background when image is successfully loaded
+                            previewImage.setBackgroundColor(Color.TRANSPARENT)
+                            previewImage.scaleType = ImageView.ScaleType.CENTER_CROP
+                            return false
+                        }
+                    })
+                    .into(previewImage)
+            } else {
+                Logger.d(TAG, "No preview image URL for ${page.url}, using fallback")
+                showFallbackPreview(page)
+            }
+        }
+
+        private fun showFallbackPreview(page: WebPage) {
+            // Set random color background as fallback
+            val randomColor = getRandomColorForUrl(page.url)
+            previewImage.setBackgroundColor(randomColor)
+            previewImage.setImageResource(R.drawable.ic_web_page)
+            previewImage.scaleType = ImageView.ScaleType.CENTER
+        }
+
+        private fun loadFavicon(page: WebPage) {
+            if (page.faviconUrl != null) {
+                Glide.with(itemView.context)
+                    .load(page.faviconUrl)
+                    .placeholder(R.drawable.ic_website)
+                    .error(R.drawable.ic_website)
+                    .diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)
+                    .into(faviconImage)
+            } else {
+                // Try to construct favicon URL from domain
+                try {
+                    val uri = Uri.parse(page.url)
+                    val domain = uri.host
+                    if (domain != null) {
+                        val faviconUrl = "https://$domain/favicon.ico"
+                        Glide.with(itemView.context)
+                            .load(faviconUrl)
+                            .placeholder(R.drawable.ic_website)
+                            .error(R.drawable.ic_website)
+                            .diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)
+                            .into(faviconImage)
+                    } else {
+                        faviconImage.setImageResource(R.drawable.ic_website)
+                    }
+                } catch (e: Exception) {
+                    Logger.e(TAG, "Error constructing favicon URL", e)
+                    faviconImage.setImageResource(R.drawable.ic_website)
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/history/HistoryUiState.kt b/app/src/main/java/com/quick/browser/presentation/ui/history/HistoryUiState.kt
new file mode 100644
index 0000000..a2b1650
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/history/HistoryUiState.kt
@@ -0,0 +1,13 @@
+package com.quick.browser.presentation.ui.history
+
+import com.quick.browser.domain.model.WebPage
+
+/**
+ * UI state for the history screen
+ */
+data class HistoryUiState(
+    val webPages: List<WebPage> = emptyList(),
+    val isLoading: Boolean = false,
+    val error: String? = null,
+    val searchQuery: String = ""
+)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/history/HistoryViewModel.kt b/app/src/main/java/com/quick/browser/presentation/ui/history/HistoryViewModel.kt
new file mode 100644
index 0000000..cb4154d
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/history/HistoryViewModel.kt
@@ -0,0 +1,203 @@
+package com.quick.browser.presentation.ui.history
+
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import com.quick.browser.domain.model.WebPage
+import com.quick.browser.domain.usecase.*
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.StateFlow
+import kotlinx.coroutines.launch
+import kotlinx.coroutines.withContext
+import java.util.*
+import javax.inject.Inject
+
+@HiltViewModel
+class HistoryViewModel @Inject constructor(
+    private val getHistoryUseCase: GetHistoryUseCase,
+    private val deleteWebPageUseCase: DeleteWebPageUseCase,
+    private val deleteAllPagesUseCase: DeleteAllPagesUseCase,
+    private val searchHistoryUseCase: SearchHistoryUseCase,
+    private val getRecentPagesUseCase: GetRecentPagesUseCase,
+    private val getMostVisitedPagesUseCase: GetMostVisitedPagesUseCase,
+    private val updateOfflineStatusUseCase: UpdateOfflineStatusUseCase,
+    private val incrementVisitCountUseCase: IncrementVisitCountUseCase
+) : ViewModel() {
+
+    private val _uiState = MutableStateFlow(HistoryUiState())
+    val uiState: StateFlow<HistoryUiState> = _uiState
+
+    /**
+     * Get all pages from history
+     */
+    fun getAllPages() {
+        viewModelScope.launch {
+            try {
+                _uiState.value = _uiState.value.copy(isLoading = true)
+                // Note: We would need to convert LiveData to StateFlow for full reactive UI
+                // For now, we'll keep this as a placeholder
+            } catch (e: Exception) {
+                _uiState.value = _uiState.value.copy(
+                    isLoading = false,
+                    error = "Failed to load history"
+                )
+            }
+        }
+    }
+
+    /**
+     * Delete a page from history
+     */
+    fun deletePage(page: WebPage) {
+        viewModelScope.launch {
+            try {
+                withContext(Dispatchers.IO) {
+                    deleteWebPageUseCase(page)
+                }
+                // Update UI state after deletion
+                val currentPages = _uiState.value.webPages.toMutableList()
+                currentPages.removeAll { it.url == page.url }
+                _uiState.value = _uiState.value.copy(webPages = currentPages)
+            } catch (e: Exception) {
+                _uiState.value = _uiState.value.copy(
+                    error = "Failed to delete page"
+                )
+            }
+        }
+    }
+
+    /**
+     * Clear all data including offline pages
+     */
+    fun clearAllData() {
+        viewModelScope.launch {
+            try {
+                withContext(Dispatchers.IO) {
+                    deleteAllPagesUseCase()
+                }
+                _uiState.value = _uiState.value.copy(webPages = emptyList())
+            } catch (e: Exception) {
+                _uiState.value = _uiState.value.copy(
+                    error = "Failed to clear history"
+                )
+            }
+        }
+    }
+
+    /**
+     * Search history by query
+     */
+    fun searchHistory(query: String) {
+        viewModelScope.launch {
+            try {
+                _uiState.value = _uiState.value.copy(
+                    searchQuery = query,
+                    isLoading = true
+                )
+                // Note: We would need to convert LiveData to StateFlow for full reactive UI
+                // For now, we'll keep this as a placeholder
+            } catch (e: Exception) {
+                _uiState.value = _uiState.value.copy(
+                    isLoading = false,
+                    error = "Failed to search history"
+                )
+            }
+        }
+    }
+
+    /**
+     * Get recent pages
+     */
+    fun getRecentPages(limit: Int = 10) {
+        viewModelScope.launch {
+            try {
+                _uiState.value = _uiState.value.copy(isLoading = true)
+                // Note: We would need to convert LiveData to StateFlow for full reactive UI
+                // For now, we'll keep this as a placeholder
+            } catch (e: Exception) {
+                _uiState.value = _uiState.value.copy(
+                    isLoading = false,
+                    error = "Failed to load recent pages"
+                )
+            }
+        }
+    }
+
+    /**
+     * Get most visited pages
+     */
+    fun getMostVisitedPages(limit: Int = 10) {
+        viewModelScope.launch {
+            try {
+                _uiState.value = _uiState.value.copy(isLoading = true)
+                // Note: We would need to convert LiveData to StateFlow for full reactive UI
+                // For now, we'll keep this as a placeholder
+            } catch (e: Exception) {
+                _uiState.value = _uiState.value.copy(
+                    isLoading = false,
+                    error = "Failed to load most visited pages"
+                )
+            }
+        }
+    }
+
+    /**
+     * Get start of today (midnight)
+     */
+    private fun getStartOfDay(): Long {
+        val calendar = Calendar.getInstance()
+        calendar.set(Calendar.HOUR_OF_DAY, 0)
+        calendar.set(Calendar.MINUTE, 0)
+        calendar.set(Calendar.SECOND, 0)
+        calendar.set(Calendar.MILLISECOND, 0)
+        return calendar.timeInMillis
+    }
+
+    /**
+     * Get start of this week (Monday)
+     */
+    private fun getStartOfWeek(): Long {
+        val calendar = Calendar.getInstance()
+        calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY)
+        calendar.set(Calendar.HOUR_OF_DAY, 0)
+        calendar.set(Calendar.MINUTE, 0)
+        calendar.set(Calendar.SECOND, 0)
+        calendar.set(Calendar.MILLISECOND, 0)
+        return calendar.timeInMillis
+    }
+
+    /**
+     * Increment visit count for a page
+     */
+    fun incrementVisitCount(url: String) {
+        viewModelScope.launch {
+            try {
+                withContext(Dispatchers.IO) {
+                    incrementVisitCountUseCase(url)
+                }
+            } catch (e: Exception) {
+                _uiState.value = _uiState.value.copy(
+                    error = "Failed to update visit count"
+                )
+            }
+        }
+    }
+
+    /**
+     * Update offline status for a page
+     */
+    fun updateOfflineStatus(url: String, isAvailable: Boolean) {
+        viewModelScope.launch {
+            try {
+                withContext(Dispatchers.IO) {
+                    updateOfflineStatusUseCase(url, isAvailable)
+                }
+            } catch (e: Exception) {
+                _uiState.value = _uiState.value.copy(
+                    error = "Failed to update offline status"
+                )
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/main/MainActivity.kt b/app/src/main/java/com/quick/browser/presentation/ui/main/MainActivity.kt
new file mode 100644
index 0000000..0b3e7db
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/main/MainActivity.kt
@@ -0,0 +1,504 @@
+package com.quick.browser.presentation.ui.main
+
+import android.content.Intent
+import android.graphics.Rect
+import android.net.Uri
+import android.os.Bundle
+import android.provider.Settings
+import android.view.MotionEvent
+import android.view.View
+import android.view.inputmethod.EditorInfo
+import android.view.inputmethod.InputMethodManager
+import android.widget.EditText
+import android.widget.ImageButton
+import android.widget.PopupMenu
+import android.widget.Toast
+import androidx.activity.result.contract.ActivityResultContracts
+import androidx.activity.viewModels
+import androidx.core.net.toUri
+import androidx.core.view.WindowCompat
+import androidx.lifecycle.lifecycleScope
+import com.quick.browser.R
+import com.quick.browser.presentation.ui.components.BaseActivity
+import com.quick.browser.presentation.ui.history.HistoryActivity
+import com.quick.browser.presentation.ui.saved.SavedArticlesActivity
+import com.quick.browser.presentation.ui.settings.SettingsActivity
+import com.quick.browser.service.AuthenticationService
+import com.quick.browser.service.BubbleService
+import com.quick.browser.utils.Constants
+import com.quick.browser.utils.Logger
+import dagger.hilt.android.AndroidEntryPoint
+import kotlinx.coroutines.delay
+import kotlinx.coroutines.launch
+
+@AndroidEntryPoint
+class MainActivity : BaseActivity() {
+    companion object {
+        private const val TAG = "MainActivity"
+    }
+
+    private val viewModel: MainViewModel by viewModels()
+
+    private lateinit var addressBar: EditText
+    private lateinit var menuButton: ImageButton
+    private lateinit var toolbar: androidx.appcompat.widget.Toolbar
+
+    // Activity result launcher for history activity
+    private val historyActivityLauncher = registerForActivityResult(
+        ActivityResultContracts.StartActivityForResult()
+    ) { result ->
+        if (result.resultCode == RESULT_OK) {
+            val selectedUrl = result.data?.getStringExtra(HistoryActivity.EXTRA_SELECTED_URL)
+            if (selectedUrl != null) {
+                handleUrlInput(selectedUrl)
+            }
+        }
+    }
+
+    // Removed permissionLauncher as notification permission is now optional
+
+    /** Starts the BubbleService to display floating bubbles. */
+    private fun startBubbleService() {
+        val intent =
+            Intent(this, BubbleService::class.java).apply {
+                action = Constants.ACTION_TOGGLE_BUBBLES
+            }
+        try {
+            startForegroundService(intent)
+            // Removed moveTaskToBack(true) to keep the app in foreground
+        } catch (e: Exception) {
+            Logger.e(TAG, "Failed to start bubble service", e)
+            Toast.makeText(this, "Failed to start bubble service", Toast.LENGTH_SHORT).show()
+        }
+    }
+
+    /** Starts the BubbleService with a specific URL to open in the quick browser. */
+    private fun startBubbleServiceWithUrl(url: String) {
+        if (!checkOverlayPermission()) {
+            Logger.d(TAG, "Overlay permission not granted, returning early")
+            return
+        }
+
+        Logger.d(TAG, "startBubbleServiceWithUrl: Starting service with URL: $url")
+        val intent =
+            Intent(this, BubbleService::class.java).apply {
+                action = Constants.ACTION_CREATE_BUBBLE
+                putExtra(Constants.EXTRA_URL, url)
+            }
+
+        try {
+            startForegroundService(intent)
+            Logger.d(TAG, "Successfully started BubbleService with URL: $url")
+            // Removed moveTaskToBack(true) to keep the app in foreground
+        } catch (e: Exception) {
+            Logger.e(TAG, "Failed to start bubble service", e)
+            Toast.makeText(this, "Failed to start bubble service", Toast.LENGTH_SHORT).show()
+        }
+    }
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_main)
+
+        // Set status bar icon color to dark for better visibility on light background
+        WindowCompat.getInsetsController(window, window.decorView).apply {
+            isAppearanceLightStatusBars = true
+        }
+
+        // Initialize views
+        addressBar = findViewById(R.id.address_bar)
+        menuButton = findViewById(R.id.menu_button)
+        toolbar = findViewById(R.id.toolbar)
+
+        setupAddressBar()
+        setupMenuButton()
+        setupKeyboardVisibilityListener()
+        
+        // Handle incoming intent if it's a link sharing intent
+        if (isLinkSharingIntent(intent)) {
+            Logger.d(TAG, "Link sharing intent detected in onCreate, handling without UI")
+            handleLinkSharingIntent(intent)
+        } else {
+            handleMainAppIntent()
+        }
+    }
+
+    private fun openHistoryActivity() {
+        val intent = Intent(this, HistoryActivity::class.java)
+        historyActivityLauncher.launch(intent)
+    }
+
+    private fun setupAddressBar() {
+        // Handle enter key press in address bar
+        addressBar.setOnEditorActionListener { _, actionId, _ ->
+            if (actionId == EditorInfo.IME_ACTION_GO) {
+                val url = addressBar.text.toString().trim()
+                if (url.isNotEmpty()) {
+                    handleUrlInput(url)
+                } else {
+                    Toast.makeText(this, "Please enter a URL", Toast.LENGTH_SHORT).show()
+                }
+                true
+            } else {
+                false
+            }
+        }
+        
+        // Handle address bar focus change
+        addressBar.setOnFocusChangeListener { _, hasFocus ->
+            if (hasFocus) {
+                // Show keyboard
+                addressBar.post {
+                    val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+                    imm.showSoftInput(addressBar, InputMethodManager.SHOW_IMPLICIT)
+                }
+            }
+        }
+    }
+
+    private fun setupMenuButton() {
+        menuButton.setOnClickListener {
+            showPopupMenu()
+        }
+    }
+
+    private fun showPopupMenu() {
+        val popupMenu = PopupMenu(this, menuButton)
+        popupMenu.menuInflater.inflate(R.menu.main_menu, popupMenu.menu)
+        
+        // Force icons to show in popup menu
+        try {
+            val field = popupMenu.javaClass.getDeclaredField("mPopup")
+            field.isAccessible = true
+            val menuPopupHelper = field.get(popupMenu)
+            val classPopupHelper = Class.forName(menuPopupHelper.javaClass.name)
+            val setForceIcons = classPopupHelper.getMethod("setForceShowIcon", Boolean::class.java)
+            setForceIcons.invoke(menuPopupHelper, true)
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error forcing icons to show in popup menu", e)
+        }
+        
+        popupMenu.setOnMenuItemClickListener { item ->
+            when (item.itemId) {
+                R.id.menu_settings -> {
+                    try {
+                        val intent = Intent(this, SettingsActivity::class.java)
+                        startActivity(intent)
+                    } catch (e: Exception) {
+                        Logger.e(TAG, "Error opening settings", e)
+                        Toast.makeText(this, "Could not open settings", Toast.LENGTH_SHORT).show()
+                    }
+                    true
+                }
+                R.id.menu_history -> {
+                    openHistoryActivity()
+                    true
+                }
+                R.id.menu_saved_articles -> {
+                    try {
+                        val intent = Intent(this, SavedArticlesActivity::class.java)
+                        startActivity(intent)
+                    } catch (e: Exception) {
+                        Logger.e(TAG, "Error opening saved articles", e)
+                        Toast.makeText(this, "Could not open saved articles", Toast.LENGTH_SHORT).show()
+                    }
+                    true
+                }
+                else -> false
+            }
+        }
+        popupMenu.show()
+    }
+
+    private fun handleUrlInput(inputUrl: String) {
+        var url = inputUrl
+
+        // Check if it looks like a valid URL or domain
+        val isValidUrl = url.startsWith("http://") || url.startsWith("https://") || 
+                         (url.contains(".") && !url.contains(" ") && !url.contains("\\"))
+
+        if (!isValidUrl) {
+            // Treat as search query
+            url = "https://www.google.com/search?q=${Uri.encode(url)}"
+        } else if (!url.startsWith("http://") && !url.startsWith("https://")) {
+            // Add https:// if no protocol is specified but it looks like a domain
+            url = "https://$url"
+        }
+
+        // Clear the address bar
+        addressBar.text.clear()
+
+        // Hide keyboard
+        val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+        imm.hideSoftInputFromWindow(addressBar.windowToken, 0)
+
+        // Open URL in bubble
+        startBubbleServiceWithUrl(url)
+
+        // Provide user feedback
+        Toast.makeText(this, "Opening in bubble...", Toast.LENGTH_SHORT).show()
+
+        Logger.d(TAG, "Opening URL in bubble: $url")
+    }
+
+
+
+    
+
+    override fun onNewIntent(intent: Intent?) {
+        Logger.d(TAG, "onNewIntent called with intent: ${intent?.action}")
+        super.onNewIntent(intent)
+
+        if (intent == null) return
+
+        // Check if this is a return from authentication
+        val data = intent.data
+        if (data != null && data.scheme == "quick_browser" && data.host == "auth-callback") {
+            Logger.d(TAG, "Received authentication callback: $data")
+            handleAuthenticationCallback(data)
+            return
+        }
+
+        // Always update the intent
+        setIntent(intent)
+
+        // If it's a link sharing intent, handle it without showing the UI
+        if (isLinkSharingIntent(intent)) {
+            Logger.d(TAG, "Link sharing intent detected in onNewIntent, handling without UI")
+            handleLinkSharingIntent(intent)
+            return
+        }
+        
+        // Handle main app intent for other cases
+        handleMainAppIntent()
+    }
+
+    /**
+     * Handles the callback from Chrome Custom Tabs after authentication
+     */
+    private fun handleAuthenticationCallback(uri: Uri) {
+        Logger.d(TAG, "Handling authentication callback: $uri")
+
+        // Use the AuthenticationHandler to handle the return
+        val handled = AuthenticationService.handleAuthenticationReturn(uri)
+
+        if (handled) {
+            Logger.d(TAG, "Authentication callback handled successfully")
+            // Minimize the app after handling the callback
+            moveTaskToBack(true)
+        } else {
+            Logger.e(TAG, "Failed to handle authentication callback")
+            Toast.makeText(this, "Failed to complete authentication", Toast.LENGTH_SHORT).show()
+        }
+    }
+
+    /**
+     * Checks if the intent is for link sharing (ACTION_SEND or ACTION_VIEW)
+     */
+    private fun isLinkSharingIntent(intent: Intent?): Boolean {
+        val result = intent?.action == Intent.ACTION_SEND || intent?.action == Intent.ACTION_VIEW
+        Logger.d(TAG, "isLinkSharingIntent: action=${intent?.action}, result=$result")
+        return result
+    }
+
+    /**
+     * Handles link sharing intents by starting the bubble service and moving the activity to background
+     * This allows the activity to receive multiple share intents without crashing
+     */
+    private fun handleLinkSharingIntent(intent: Intent?) {
+        if (intent == null) return
+
+        Logger.d(TAG, "handleLinkSharingIntent | Received intent: ${intent.action}, data: ${intent.extras}")
+        Logger.d(TAG, "Activity will be moved to background instead of finishing to support multiple shares")
+
+        when (intent.action) {
+            Intent.ACTION_SEND -> {
+                val sharedText = intent.getStringExtra(Intent.EXTRA_TEXT)
+                Logger.d(TAG, "Received shared text: $sharedText")
+                if (sharedText != null) {
+                    // Start bubble service with the URL
+                    if (checkPermissionsAndStartBubbleWithUrl(sharedText)) {
+                        // Move task to back after starting the service if permissions were already granted
+                        Logger.d(TAG, "Moving task to back after starting bubble service")
+                        moveTaskToBack(true)
+                    } else {
+                        Logger.d(TAG, "Permissions not granted, will start bubble after permission")
+                    }
+                } else {
+                    Logger.d(TAG, "No shared text found in ACTION_SEND intent")
+                }
+            }
+
+            Intent.ACTION_VIEW -> {
+                val url = intent.data?.toString()
+                Logger.d(TAG, "Received view URL: $url")
+                if (url != null) {
+                    // Start bubble service with the URL
+                    if (checkPermissionsAndStartBubbleWithUrl(url)) {
+                        // Move task to back after starting the service if permissions were already granted
+                        Logger.d(TAG, "Moving task to back after starting bubble service")
+                        moveTaskToBack(true)
+                    } else {
+                        Logger.d(TAG, "Permissions not granted, will start bubble after permission")
+                    }
+                } else {
+                    Logger.d(TAG, "No URL found in ACTION_VIEW intent")
+                }
+            }
+            
+            else -> {
+                Logger.d(TAG, "Unsupported intent action: ${intent.action}")
+            }
+        }
+    }
+
+    /**
+     * Checks permissions and starts the bubble service with a URL
+     * Returns true if successful, false if permissions are needed
+     */
+    private fun checkPermissionsAndStartBubbleWithUrl(url: String): Boolean {
+        // Check overlay permission
+        if (!Settings.canDrawOverlays(this)) {
+            // Save the URL to use after permission is granted
+            pendingUrl = url
+            // Show permission dialog
+            requestOverlayPermission()
+            return false
+        }
+
+        // Start bubble service with URL
+        startBubbleServiceWithUrl(url)
+        // Move task to back after starting the service
+        moveTaskToBack(true)
+        return true
+    }
+
+    /**
+     * Handles incoming intents for the main app (not link sharing)
+     */
+    private fun handleMainAppIntent() {
+        if (!isBubbleServiceRunning()) {
+            lifecycleScope.launch {
+                delay(1000)
+                checkPermissionsAndStartBubble()
+            }
+        }
+    }
+
+    /** Checks if the BubbleService is currently running. */
+    private fun isBubbleServiceRunning(): Boolean {
+        return BubbleService.isRunning()
+    }
+
+    /** Checks required permissions for overlay */
+    private fun checkOverlayPermission(): Boolean {
+        // Only check for overlay permission as it's essential
+        val canDrawOverlays = Settings.canDrawOverlays(this)
+        Logger.d(TAG, "checkOverlayPermission: canDrawOverlays=$canDrawOverlays")
+        if (!canDrawOverlays) {
+            requestOverlayPermission()
+            return false
+        }
+        return true
+    }
+
+    /** Checks required permissions and starts the BubbleService if permissions are granted. */
+    private fun checkPermissionsAndStartBubble(): Boolean {
+        // Only check for overlay permission as it's essential
+        if (!checkOverlayPermission()) {
+            return false
+        }
+
+        // Start the service regardless of notification permission
+        startBubbleService()
+        return true
+    }
+
+    /** Requests overlay permission to draw bubbles over other apps. */
+    private fun requestOverlayPermission() {
+        try {
+            val overlayIntent =
+                Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION).apply {
+                    data = "package:$packageName".toUri()
+                }
+            startActivity(overlayIntent)
+            Toast.makeText(
+                this,
+                "Please allow drawing over other apps to use the quick browser",
+                Toast.LENGTH_LONG
+            )
+                .show()
+            Logger.d(TAG, "Requested overlay permission")
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error requesting overlay permission", e)
+            Toast.makeText(this, "Could not open overlay permission settings", Toast.LENGTH_LONG)
+                .show()
+        }
+    }
+
+    // Notification permission rationale dialog removed as notifications are now optional
+
+    private fun setupKeyboardVisibilityListener() {
+        // Listen for keyboard visibility changes
+        window.decorView.viewTreeObserver.addOnGlobalLayoutListener {
+            val rect = Rect()
+            window.decorView.getWindowVisibleDisplayFrame(rect)
+            val screenHeight = window.decorView.height
+            val keypadHeight = screenHeight - rect.bottom
+
+            // Update toolbar position based on keyboard visibility
+            val layoutParams = toolbar.layoutParams as androidx.constraintlayout.widget.ConstraintLayout.LayoutParams
+            if (keypadHeight > screenHeight * 0.15) {
+                // Keyboard is visible, position toolbar above it
+                layoutParams.bottomMargin = keypadHeight
+                // Hide menu button when keyboard is visible
+                menuButton.visibility = View.GONE
+            } else {
+                // Keyboard is hidden, toolbar sits at bottom of screen
+                layoutParams.bottomMargin = 0
+                // Show menu button when keyboard is hidden
+                menuButton.visibility = View.VISIBLE
+            }
+            toolbar.layoutParams = layoutParams
+        }
+        
+        // Set up touch listener to hide keyboard when clicking outside
+        window.decorView.setOnTouchListener { _, event ->
+            if (event.action == MotionEvent.ACTION_DOWN) {
+                val view = currentFocus
+                if (view is EditText) {
+                    val outRect = Rect()
+                    view.getGlobalVisibleRect(outRect)
+                    if (!outRect.contains(event.rawX.toInt(), event.rawY.toInt())) {
+                        view.clearFocus()
+                        val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+                        imm.hideSoftInputFromWindow(view.windowToken, 0)
+                    }
+                }
+            }
+            false
+        }
+    }
+
+    // Store the URL that needs to be opened after permission is granted
+    private var pendingUrl: String? = null
+    
+    override fun onResume() {
+        super.onResume()
+        Logger.d(TAG, "onResume called")
+
+        // Check if we have a saved URL from a previous permission request
+        pendingUrl?.let { url ->
+            Logger.d(TAG, "Found pending URL: $url")
+            if (Settings.canDrawOverlays(this)) {
+                Logger.d(TAG, "Overlay permission granted, starting bubble service with pending URL")
+                // Permission granted, start the bubble service with the URL
+                startBubbleServiceWithUrl(url)
+                pendingUrl = null // Clear the pending URL
+                moveTaskToBack(true) // Move to background
+            } else {
+                Logger.d(TAG, "Overlay permission still not granted")
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/main/MainUiState.kt b/app/src/main/java/com/quick/browser/presentation/ui/main/MainUiState.kt
new file mode 100644
index 0000000..402006b
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/main/MainUiState.kt
@@ -0,0 +1,10 @@
+package com.quick.browser.presentation.ui.main
+
+import com.quick.browser.domain.model.Settings
+
+/**
+ * UI state for the main screen
+ */
+data class MainUiState(
+    val settings: Settings? = null
+)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/main/MainViewModel.kt b/app/src/main/java/com/quick/browser/presentation/ui/main/MainViewModel.kt
new file mode 100644
index 0000000..e44cd4d
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/main/MainViewModel.kt
@@ -0,0 +1,74 @@
+package com.quick.browser.presentation.ui.main
+
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import com.quick.browser.domain.model.Settings
+import com.quick.browser.domain.usecase.GetSettingsUseCase
+import com.quick.browser.domain.usecase.UpdateSettingsUseCase
+import com.quick.browser.presentation.ui.base.UiState
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.StateFlow
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+/**
+ * ViewModel for the main activity
+ */
+@HiltViewModel
+class MainViewModel @Inject constructor(
+    private val getSettingsUseCase: GetSettingsUseCase,
+    private val updateSettingsUseCase: UpdateSettingsUseCase
+) : ViewModel() {
+
+    private val _uiState = MutableStateFlow<UiState<MainUiState>>(UiState.Loading)
+    val uiState: StateFlow<UiState<MainUiState>> = _uiState
+
+    init {
+        loadSettings()
+    }
+
+    /**
+     * Load app settings
+     */
+    private fun loadSettings() {
+        viewModelScope.launch {
+            try {
+                _uiState.value = UiState.Loading
+                when (val result = getSettingsUseCase()) {
+                    is com.quick.browser.domain.result.Result.Success -> {
+                        _uiState.value = UiState.Success(
+                            MainUiState(
+                                settings = result.data
+                            )
+                        )
+                    }
+                    is com.quick.browser.domain.result.Result.Failure -> {
+                        _uiState.value = UiState.Error("Failed to load settings: ${result.error}")
+                    }
+                }
+            } catch (e: Exception) {
+                _uiState.value = UiState.Error("Failed to load settings: ${e.message}")
+            }
+        }
+    }
+
+    /**
+     * Update app settings
+     */
+    fun updateSettings(settings: Settings) {
+        viewModelScope.launch {
+            try {
+                _uiState.value = UiState.Loading
+                updateSettingsUseCase(settings)
+                _uiState.value = UiState.Success(
+                    MainUiState(
+                        settings = settings
+                    )
+                )
+            } catch (e: Exception) {
+                _uiState.value = UiState.Error("Failed to update settings: ${e.message}")
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/reader/OfflineReaderActivity.kt b/app/src/main/java/com/quick/browser/presentation/ui/reader/OfflineReaderActivity.kt
new file mode 100644
index 0000000..460e3d4
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/reader/OfflineReaderActivity.kt
@@ -0,0 +1,440 @@
+package com.quick.browser.presentation.ui.reader
+
+import android.graphics.Rect
+import android.os.Bundle
+import android.view.MenuItem
+import android.view.View
+import android.view.inputmethod.EditorInfo
+import android.view.inputmethod.InputMethodManager
+import android.webkit.WebView
+import android.widget.ImageButton
+import android.widget.Toast
+import androidx.appcompat.app.AppCompatActivity
+import androidx.appcompat.widget.SearchView
+import androidx.appcompat.widget.Toolbar
+import androidx.core.view.ViewCompat
+import androidx.core.view.WindowInsetsCompat
+import androidx.core.view.updatePadding
+import com.google.android.material.card.MaterialCardView
+import com.quick.browser.R
+import com.quick.browser.service.SettingsService
+import dagger.hilt.android.AndroidEntryPoint
+import javax.inject.Inject
+
+/**
+ * Activity to display saved articles in reader mode
+ */
+@AndroidEntryPoint
+class OfflineReaderActivity : AppCompatActivity() {
+
+    @Inject
+    lateinit var settingsService: SettingsService
+
+    private lateinit var webView: WebView
+    private lateinit var searchView: SearchView
+    private lateinit var searchCard: MaterialCardView
+    private var isSearchBarExplicitlyOpened = false
+
+    companion object {
+        const val EXTRA_ARTICLE_TITLE = "article_title"
+        const val EXTRA_ARTICLE_CONTENT = "article_content"
+        const val EXTRA_ARTICLE_BYLINE = "article_byline"
+        const val EXTRA_ARTICLE_SITE_NAME = "article_site_name"
+        const val EXTRA_ARTICLE_PUBLISH_DATE = "article_publish_date"
+    }
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_offline_reader)
+
+        setupToolbar()
+        setupWebView()
+        setupSearch()
+        loadArticle()
+    }
+
+    private fun setupToolbar() {
+        val toolbar = findViewById<Toolbar>(R.id.toolbar)
+        setSupportActionBar(toolbar)
+        supportActionBar?.setDisplayHomeAsUpEnabled(true)
+        supportActionBar?.setDisplayShowTitleEnabled(false) // Hide default title
+        
+        // Ensure toolbar sits below the status bar on all devices
+        ViewCompat.setOnApplyWindowInsetsListener(toolbar) { v, insets ->
+            val statusBarHeight = insets.getInsets(WindowInsetsCompat.Type.statusBars()).top
+            v.updatePadding(top = statusBarHeight)
+            insets
+        }
+        
+        // Set up custom toolbar buttons
+        val searchButton = toolbar.findViewById<ImageButton>(R.id.toolbar_search)
+        searchButton.setOnClickListener {
+            showSearchBar()
+        }
+    }
+
+    private fun setupWebView() {
+        webView = findViewById(R.id.webview_offline_reader)
+
+        // Configure WebView settings for reader mode
+        webView.settings.apply {
+            javaScriptEnabled = true
+            builtInZoomControls = true
+            displayZoomControls = false
+            textZoom = 100
+        }
+    }
+
+    private fun loadArticle() {
+        val title = intent.getStringExtra(EXTRA_ARTICLE_TITLE) ?: "Untitled"
+        val content = intent.getStringExtra(EXTRA_ARTICLE_CONTENT) ?: ""
+        val byline = intent.getStringExtra(EXTRA_ARTICLE_BYLINE)
+        val siteName = intent.getStringExtra(EXTRA_ARTICLE_SITE_NAME)
+        val publishDate = intent.getStringExtra(EXTRA_ARTICLE_PUBLISH_DATE)
+
+        if (content.isEmpty()) {
+            Toast.makeText(this, "No content to display", Toast.LENGTH_SHORT).show()
+            finish()
+            return
+        }
+
+        val htmlContent = createStyledHtml(title, content, byline, siteName, publishDate)
+        webView.loadDataWithBaseURL(null, htmlContent, "text/html", "UTF-8", null)
+    }
+
+    private fun createStyledHtml(
+        title: String,
+        content: String,
+        byline: String?,
+        siteName: String?,
+        publishDate: String?
+    ): String {
+        // Get current reader mode settings
+        val readerBackground = settingsService.getReaderBackground()
+        val fontSize = settingsService.getReaderFontSize()
+        val textAlign = settingsService.getReaderTextAlign()
+
+        // Define color schemes for different backgrounds
+        val colors = when (readerBackground) {
+            SettingsService.Companion.READER_BG_DARK -> arrayOf("#121212", "#E0E0E0", "#90CAF9", "#B0B0B0", "#1E1E1E", "#616161")
+            SettingsService.Companion.READER_BG_SEPIA -> arrayOf("#F4F1E8", "#5D4E37", "#8B4513", "#8B7355", "#EAE7DC", "#D2B48C")
+            else -> arrayOf("#FFFFFF", "#212121", "#1976D2", "#757575", "#F5F5F5", "#9E9E9E")
+        }
+
+        // Map text alignment values
+        val textAlignStyle = when (textAlign) {
+            SettingsService.Companion.READER_ALIGN_LEFT -> "left"
+            SettingsService.Companion.READER_ALIGN_CENTER -> "center"
+            SettingsService.Companion.READER_ALIGN_RIGHT -> "right"
+            SettingsService.Companion.READER_ALIGN_JUSTIFY -> "justify"
+            else -> "left"
+        }
+
+        // Create responsive HTML with embedded CSS
+        return """
+            <!DOCTYPE html>
+            <html>
+            <head>
+                <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0, user-scalable=yes">
+                <style>
+                    body {
+                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
+                        background-color: ${colors[0]};
+                        color: ${colors[1]};
+                        margin: 0;
+                        padding: 20px;
+                        font-size: ${fontSize}px;
+                        line-height: 1.6;
+                        text-align: $textAlignStyle;
+                    }
+                    h1, h2, h3, h4, h5, h6 {
+                        color: ${colors[2]};
+                        margin-top: 1.5em;
+                        margin-bottom: 0.5em;
+                    }
+                    h1 {
+                        font-size: 1.8em;
+                        border-bottom: 1px solid ${colors[3]};
+                        padding-bottom: 0.3em;
+                    }
+                    h2 {
+                        font-size: 1.5em;
+                    }
+                    h3 {
+                        font-size: 1.3em;
+                    }
+                    p {
+                        margin-top: 0;
+                        margin-bottom: 1em;
+                        text-align: $textAlignStyle;
+                    }
+                    a {
+                        color: ${colors[2]};
+                        text-decoration: none;
+                    }
+                    a:hover {
+                        text-decoration: underline;
+                    }
+                    img {
+                        max-width: 100%;
+                        height: auto;
+                        display: block;
+                        margin: 1em auto;
+                        border-radius: 4px;
+                    }
+                    blockquote {
+                        border-left: 4px solid ${colors[4]};
+                        margin: 1.5em 0;
+                        padding: 0.5em 1em;
+                        color: ${colors[5]};
+                        font-style: italic;
+                    }
+                    pre, code {
+                        background-color: ${colors[4]};
+                        border-radius: 4px;
+                        padding: 0.2em 0.4em;
+                        font-family: 'Courier New', Courier, monospace;
+                        overflow-x: auto;
+                    }
+                    pre {
+                        padding: 1em;
+                        overflow-x: auto;
+                        white-space: pre-wrap;
+                        word-wrap: break-word;
+                    }
+                    pre code {
+                        background-color: transparent;
+                        padding: 0;
+                    }
+                    hr {
+                        border: 0;
+                        border-top: 1px solid ${colors[3]};
+                        margin: 2em 0;
+                    }
+                    ul, ol {
+                        padding-left: 1.5em;
+                        margin: 1em 0;
+                    }
+                    li {
+                        margin-bottom: 0.5em;
+                    }
+                    table {
+                        border-collapse: collapse;
+                        width: 100%;
+                        margin: 1em 0;
+                    }
+                    th, td {
+                        border: 1px solid ${colors[3]};
+                        padding: 0.5em;
+                        text-align: left;
+                    }
+                    th {
+                        background-color: ${colors[4]};
+                    }
+                    .byline {
+                        color: ${colors[5]};
+                        font-style: italic;
+                        margin-bottom: 1em;
+                    }
+                    .article-meta {
+                        color: ${colors[5]};
+                        font-size: 0.9em;
+                        margin-bottom: 1em;
+                    }
+                    .site-name {
+                        font-weight: bold;
+                    }
+                    .publish-date {
+                        margin-left: 1em;
+                    }
+                </style>
+            </head>
+            <body>
+                <article>
+                    <header>
+                        <h1>$title</h1>
+                        ${if (byline != null) "<p class='byline'>By $byline</p>" else ""}
+                        ${if (siteName != null || publishDate != null) """
+                        <div class='article-meta'>
+                            ${if (siteName != null) "<span class='site-name'>$siteName</span>" else ""}
+                            ${if (publishDate != null) "<span class='publish-date'>$publishDate</span>" else ""}
+                        </div>
+                        """ else ""}
+                    </header>
+                    <main>
+                        $content
+                    </main>
+                </article>
+            </body>
+            </html>
+        """.trimIndent()
+    }
+
+    private fun setupSearch() {
+        // Initialize views
+        searchView = findViewById(R.id.search_view)
+        searchCard = findViewById(R.id.search_card)
+        
+        // Set up search functionality
+        setupSearchView()
+        
+        // Listen for keyboard visibility changes
+        setupKeyboardVisibilityListener()
+    }
+    
+    private fun setupSearchView() {
+        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
+            override fun onQueryTextSubmit(query: String?): Boolean {
+                // Hide keyboard when Enter is pressed but keep search bar visible
+                val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+                imm.hideSoftInputFromWindow(searchView.windowToken, 0)
+                
+                // Find the query in the WebView
+                if (!query.isNullOrEmpty()) {
+                    webView.findAllAsync(query)
+                    webView.findNext(true)
+                }
+                return true
+            }
+
+            override fun onQueryTextChange(newText: String?): Boolean {
+                // Find the query in the WebView
+                if (!newText.isNullOrEmpty()) {
+                    webView.findAllAsync(newText)
+                } else {
+                    webView.clearMatches()
+                }
+                return true
+            }
+        })
+        
+        // Handle close button click
+        searchView.setOnCloseListener {
+            closeSearchBar()
+            true
+        }
+        
+        // Also handle Enter key from the search view's text field
+        searchView.findViewById<androidx.appcompat.widget.SearchView.SearchAutoComplete>(
+            androidx.appcompat.R.id.search_src_text
+        ).setOnEditorActionListener { _, actionId, _ ->
+            if (actionId == EditorInfo.IME_ACTION_SEARCH) {
+                // Hide keyboard when Enter is pressed but keep search bar visible
+                val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+                imm.hideSoftInputFromWindow(searchView.windowToken, 0)
+                
+                // Find the query in the WebView
+                val query = searchView.query.toString()
+                if (query.isNotEmpty()) {
+                    webView.findAllAsync(query)
+                    webView.findNext(true)
+                }
+                true
+            } else {
+                false
+            }
+        }
+    }
+    
+    private fun showSearchBar() {
+        // Mark that the search bar was explicitly opened
+        isSearchBarExplicitlyOpened = true
+        
+        // Show the search card
+        searchCard.visibility = View.VISIBLE
+        
+        // Post the focus and keyboard show to ensure the view is properly laid out
+        searchCard.post {
+            // Focus on the search view and show keyboard
+            searchView.requestFocus()
+            searchView.isIconified = false
+            
+            // Show keyboard with a delay to ensure proper layout
+            searchView.post {
+                val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+                imm.showSoftInput(searchView, InputMethodManager.SHOW_IMPLICIT)
+            }
+        }
+    }
+    
+    private fun closeSearchBar() {
+        // Reset the explicit open flag
+        isSearchBarExplicitlyOpened = false
+        
+        // Hide the search card
+        searchCard.visibility = View.GONE
+        
+        // Clear search query
+        searchView.setQuery("", false)
+        
+        // Hide keyboard
+        val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+        imm.hideSoftInputFromWindow(searchView.windowToken, 0)
+        
+        // Clear WebView matches
+        webView.clearMatches()
+    }
+    
+    private fun hideSearchBar() {
+        // Hide keyboard
+        val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+        imm.hideSoftInputFromWindow(searchView.windowToken, 0)
+        
+        // Only hide the search bar if it's not focused (user explicitly closed it) or if it wasn't explicitly opened
+        if ((!searchView.hasFocus() && !isSearchBarExplicitlyOpened) || searchView.query.isNullOrEmpty()) {
+            searchCard.visibility = View.GONE
+            isSearchBarExplicitlyOpened = false
+            // Clear search query
+            searchView.setQuery("", false)
+            // Clear WebView matches
+            webView.clearMatches()
+        }
+    }
+    
+    private fun setupKeyboardVisibilityListener() {
+        // Listen for keyboard visibility changes
+        window.decorView.viewTreeObserver.addOnGlobalLayoutListener {
+            val rect = Rect()
+            window.decorView.getWindowVisibleDisplayFrame(rect)
+            val screenHeight = window.decorView.height
+            val keypadHeight = screenHeight - rect.bottom
+            
+            // Update search card bottom margin to position it above keyboard
+            val layoutParams = searchCard.layoutParams as androidx.constraintlayout.widget.ConstraintLayout.LayoutParams
+            layoutParams.bottomMargin = if (keypadHeight > screenHeight * 0.15) {
+                // Keyboard is visible, position above it
+                keypadHeight + 32 // Add some padding
+            } else {
+                // Keyboard is hidden, use default margin
+                32
+            }
+            searchCard.layoutParams = layoutParams
+            
+            // If keyboard is hidden AND search view is not focused AND search bar wasn't explicitly opened, hide it
+            if (keypadHeight < screenHeight * 0.15 && !searchView.hasFocus() && !isSearchBarExplicitlyOpened) {
+                if (searchCard.visibility == View.VISIBLE && searchView.query.isNullOrEmpty()) {
+                    searchCard.visibility = View.GONE
+                }
+            }
+        }
+    }
+    
+    override fun onBackPressed() {
+        // If search bar is visible, close it instead of closing the activity
+        if (searchCard.visibility == View.VISIBLE) {
+            closeSearchBar()
+        } else {
+            super.onBackPressed()
+        }
+    }
+    
+    override fun onOptionsItemSelected(item: MenuItem): Boolean {
+        return when (item.itemId) {
+            android.R.id.home -> {
+                onBackPressed()
+                true
+            }
+            else -> super.onOptionsItemSelected(item)
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/saved/FolderItem.kt b/app/src/main/java/com/quick/browser/presentation/ui/saved/FolderItem.kt
new file mode 100644
index 0000000..6f84903
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/saved/FolderItem.kt
@@ -0,0 +1,14 @@
+package com.quick.browser.presentation.ui.saved
+
+import com.quick.browser.domain.model.Folder
+
+/**
+ * UI model for a folder item in the side panel
+ *
+ * @property folder The folder data
+ * @property isSelected Whether the folder is currently selected
+ */
+data class FolderItem(
+    val folder: Folder,
+    val isSelected: Boolean = false
+)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/saved/FolderSelectionAdapter.kt b/app/src/main/java/com/quick/browser/presentation/ui/saved/FolderSelectionAdapter.kt
new file mode 100644
index 0000000..fd53f1f
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/saved/FolderSelectionAdapter.kt
@@ -0,0 +1,69 @@
+package com.quick.browser.presentation.ui.saved
+
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.TextView
+import androidx.recyclerview.widget.RecyclerView
+import com.quick.browser.R
+import com.quick.browser.domain.model.Folder
+
+/**
+ * Adapter for displaying folders in the folder selection dialog
+ */
+class FolderSelectionAdapter(
+    private val onItemClick: (Folder) -> Unit
+) : RecyclerView.Adapter<FolderSelectionAdapter.FolderViewHolder>() {
+
+    private var folders = listOf<Folder>()
+    private var selectedFolder: Folder? = null
+
+    fun submitList(newFolders: List<Folder>) {
+        folders = newFolders
+        notifyDataSetChanged()
+    }
+
+    fun setSelectedFolder(folder: Folder?) {
+        selectedFolder = folder
+        notifyDataSetChanged()
+    }
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): FolderViewHolder {
+        val view = LayoutInflater.from(parent.context)
+            .inflate(R.layout.item_folder_selection, parent, false)
+        return FolderViewHolder(view)
+    }
+
+    override fun onBindViewHolder(holder: FolderViewHolder, position: Int) {
+        holder.bind(folders[position])
+    }
+
+    override fun getItemCount() = folders.size
+
+    inner class FolderViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
+        private val folderNameTextView: TextView = itemView.findViewById(R.id.folder_name)
+
+        fun bind(folder: Folder) {
+            folderNameTextView.text = folder.name
+
+            // Highlight selected folder
+            if (selectedFolder?.id == folder.id) {
+                folderNameTextView.setTextColor(
+                    itemView.context.getColor(R.color.colorPrimary)
+                )
+                folderNameTextView.paint.isFakeBoldText = true
+            } else {
+                folderNameTextView.setTextColor(
+                    itemView.context.getColor(R.color.textColorPrimary)
+                )
+                folderNameTextView.paint.isFakeBoldText = false
+            }
+
+            itemView.setOnClickListener {
+                selectedFolder = folder
+                onItemClick(folder)
+                notifyDataSetChanged()
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/saved/FoldersAdapter.kt b/app/src/main/java/com/quick/browser/presentation/ui/saved/FoldersAdapter.kt
new file mode 100644
index 0000000..683bb15
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/saved/FoldersAdapter.kt
@@ -0,0 +1,69 @@
+package com.quick.browser.presentation.ui.saved
+
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.ImageButton
+import android.widget.TextView
+import androidx.recyclerview.widget.RecyclerView
+import com.quick.browser.R
+import com.quick.browser.domain.model.Folder
+
+/**
+ * Adapter for displaying folders in the side panel
+ */
+class FoldersAdapter(
+    private val onItemClick: (Folder) -> Unit,
+    private val onDeleteClick: (Folder) -> Unit
+) : RecyclerView.Adapter<FoldersAdapter.FolderViewHolder>() {
+
+    private var folders = listOf<FolderItem>()
+
+    fun submitList(newFolders: List<FolderItem>) {
+        folders = newFolders
+        notifyDataSetChanged()
+    }
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): FolderViewHolder {
+        val view = LayoutInflater.from(parent.context)
+            .inflate(R.layout.item_folder, parent, false)
+        return FolderViewHolder(view)
+    }
+
+    override fun onBindViewHolder(holder: FolderViewHolder, position: Int) {
+        holder.bind(folders[position])
+    }
+
+    override fun getItemCount() = folders.size
+
+    inner class FolderViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
+        private val folderNameTextView: TextView = itemView.findViewById(R.id.folder_name)
+        private val deleteFolderButton: ImageButton = itemView.findViewById(R.id.delete_folder_button)
+
+        fun bind(folderItem: FolderItem) {
+            folderNameTextView.text = folderItem.folder.name
+
+            // Highlight selected folder
+            if (folderItem.isSelected) {
+                folderNameTextView.setTextColor(
+                    itemView.context.getColor(R.color.colorPrimary)
+                )
+                folderNameTextView.paint.isFakeBoldText = true
+            } else {
+                folderNameTextView.setTextColor(
+                    itemView.context.getColor(R.color.textColorPrimary)
+                )
+                folderNameTextView.paint.isFakeBoldText = false
+            }
+
+            // Set click listeners
+            itemView.setOnClickListener {
+                onItemClick(folderItem.folder)
+            }
+
+            deleteFolderButton.setOnClickListener {
+                onDeleteClick(folderItem.folder)
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/saved/SavedArticlesActivity.kt b/app/src/main/java/com/quick/browser/presentation/ui/saved/SavedArticlesActivity.kt
new file mode 100644
index 0000000..4521e12
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/saved/SavedArticlesActivity.kt
@@ -0,0 +1,466 @@
+package com.quick.browser.presentation.ui.saved
+
+import android.content.Intent
+import android.graphics.Rect
+import android.os.Bundle
+import android.view.View
+import android.view.inputmethod.EditorInfo
+import android.view.inputmethod.InputMethodManager
+import android.widget.ImageButton
+import android.widget.Toast
+import androidx.activity.viewModels
+import androidx.appcompat.app.AlertDialog
+import androidx.appcompat.widget.SearchView
+import androidx.appcompat.widget.Toolbar
+import androidx.core.view.ViewCompat
+import androidx.core.view.WindowInsetsCompat
+import androidx.core.view.updatePadding
+import androidx.drawerlayout.widget.DrawerLayout
+import androidx.lifecycle.lifecycleScope
+import androidx.recyclerview.widget.LinearLayoutManager
+import androidx.recyclerview.widget.RecyclerView
+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout
+import com.google.android.material.card.MaterialCardView
+import com.google.android.material.navigation.NavigationView
+import com.google.android.material.textfield.TextInputEditText
+import com.quick.browser.R
+import com.quick.browser.domain.model.Folder
+import com.quick.browser.domain.model.SavedArticle
+import com.quick.browser.presentation.ui.components.BaseActivity
+import com.quick.browser.presentation.ui.reader.OfflineReaderActivity
+import dagger.hilt.android.AndroidEntryPoint
+import kotlinx.coroutines.launch
+
+@AndroidEntryPoint
+class SavedArticlesActivity : BaseActivity() {
+
+    private lateinit var recyclerView: RecyclerView
+    private lateinit var adapter: SavedArticlesAdapter
+    private lateinit var searchView: SearchView
+    private lateinit var searchCard: MaterialCardView
+    private lateinit var swipeRefreshLayout: SwipeRefreshLayout
+    private lateinit var emptyView: View
+    private lateinit var drawerLayout: DrawerLayout
+    private lateinit var navView: NavigationView
+    private lateinit var foldersAdapter: FoldersAdapter
+    private var isSearchBarExplicitlyOpened = false
+    private var currentFolder: Folder? = null
+
+    private val viewModel: SavedArticlesViewModel by viewModels()
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_saved_articles)
+
+        // Set up toolbar
+        val toolbar = findViewById<Toolbar>(R.id.toolbar)
+        setSupportActionBar(toolbar)
+        supportActionBar?.setDisplayHomeAsUpEnabled(false) // Hide back button
+        supportActionBar?.setDisplayShowTitleEnabled(false) // Hide default title
+
+        // Ensure toolbar sits below the status bar on all devices
+        ViewCompat.setOnApplyWindowInsetsListener(toolbar) { v, insets ->
+            val statusBarHeight = insets.getInsets(WindowInsetsCompat.Type.statusBars()).top
+            v.updatePadding(top = statusBarHeight)
+            insets
+        }
+
+        // Set up drawer layout and navigation view
+        drawerLayout = findViewById(R.id.drawer_layout)
+        navView = findViewById(R.id.nav_view)
+        
+        // Set up custom toolbar buttons
+        val searchButton = toolbar.findViewById<ImageButton>(R.id.toolbar_search)
+        searchButton?.setOnClickListener {
+            showSearchBar()
+        }
+
+        // Set up burger menu button to open side panel
+        val menuButton = toolbar.findViewById<ImageButton>(R.id.toolbar_menu)
+        menuButton?.setOnClickListener {
+            drawerLayout.openDrawer(navView)
+        }
+
+        // Initialize views
+        recyclerView = findViewById(R.id.recycler_view_saved_articles)
+        emptyView = findViewById(R.id.empty_history_view) // Reuse the empty view from history
+        searchView = findViewById(R.id.search_view)
+        searchCard = findViewById(R.id.search_card)
+        swipeRefreshLayout = findViewById(R.id.swipe_refresh_layout)
+        
+        // Set up RecyclerView
+        setupRecyclerView()
+
+        // Set up folders RecyclerView in side panel
+        setupFoldersRecyclerView()
+
+        // Observe the UI state from the ViewModel
+        observeViewModel()
+        
+        // Set up search functionality
+        setupSearchView()
+        
+        // Set up swipe refresh
+        setupSwipeRefresh()
+        
+        // Listen for keyboard visibility changes
+        setupKeyboardVisibilityListener()
+        
+        // Set up side panel interactions
+        setupSidePanel()
+    }
+
+    private fun setupRecyclerView() {
+        adapter = SavedArticlesAdapter(
+            onItemClick = { article ->
+                // Handle article click - open in reader mode
+                openArticleInReaderMode(article)
+            },
+            onDeleteClick = { article ->
+                // Handle delete click
+                viewModel.deleteArticle(article)
+            }
+        )
+
+        recyclerView.layoutManager = LinearLayoutManager(this)
+        recyclerView.adapter = adapter
+    }
+
+    private fun setupFoldersRecyclerView() {
+        foldersAdapter = FoldersAdapter(
+            onItemClick = { folder ->
+                // Handle folder selection
+                selectFolder(folder)
+                drawerLayout.closeDrawer(navView)
+            },
+            onDeleteClick = { folder ->
+                // Handle folder deletion
+                deleteFolder(folder)
+            }
+        )
+
+        val foldersRecyclerView = navView.findViewById<RecyclerView>(R.id.folders_recycler_view)
+        foldersRecyclerView.layoutManager = LinearLayoutManager(this)
+        foldersRecyclerView.adapter = foldersAdapter
+    }
+
+    private fun setupSidePanel() {
+        // Set up close button in side panel
+        val closeButton = navView.findViewById<ImageButton>(R.id.close_button)
+        closeButton.setOnClickListener {
+            drawerLayout.closeDrawer(navView)
+        }
+
+        // Set up add folder button
+        val addFolderButton = navView.findViewById<ImageButton>(R.id.add_folder_button)
+        addFolderButton.setOnClickListener {
+            showCreateFolderDialog()
+        }
+
+        // Set up all articles item
+        val allArticlesItem = navView.findViewById<View>(R.id.all_articles_item)
+        allArticlesItem.setOnClickListener {
+            selectAllArticles()
+            drawerLayout.closeDrawer(navView)
+        }
+    }
+
+    private fun observeViewModel() {
+        // Observe the UI state from the ViewModel
+        lifecycleScope.launch {
+            viewModel.uiState.collect { uiState ->
+                // Check if the UI state is Loading, Success, or Error
+                if (uiState.isLoading) {
+                    // Show loading indicator if needed
+                } else if (uiState.error != null) {
+                    // Show error message
+                    Toast.makeText(this@SavedArticlesActivity, uiState.error, Toast.LENGTH_LONG).show()
+                } else {
+                    // Submit the articles to the adapter
+                    if (uiState.articles.isEmpty()) {
+                        recyclerView.visibility = View.GONE
+                        emptyView.visibility = View.VISIBLE
+                    } else {
+                        recyclerView.visibility = View.VISIBLE
+                        emptyView.visibility = View.GONE
+                        adapter.submitList(uiState.articles)
+                    }
+                }
+            }
+        }
+
+        // Observe folders
+        lifecycleScope.launch {
+            viewModel.folders.collect { folders ->
+                // Update folders adapter with folder items
+                val folderItems = folders.map { FolderItem(it, it.id == currentFolder?.id) }
+                foldersAdapter.submitList(folderItems)
+            }
+        }
+    }
+
+    private fun openArticleInReaderMode(article: SavedArticle) {
+        val intent = Intent(this, OfflineReaderActivity::class.java).apply {
+            putExtra(OfflineReaderActivity.Companion.EXTRA_ARTICLE_TITLE, article.title)
+            putExtra(OfflineReaderActivity.Companion.EXTRA_ARTICLE_CONTENT, article.content)
+            putExtra(OfflineReaderActivity.Companion.EXTRA_ARTICLE_BYLINE, article.author)
+            putExtra(OfflineReaderActivity.Companion.EXTRA_ARTICLE_SITE_NAME, article.siteName)
+            putExtra(OfflineReaderActivity.Companion.EXTRA_ARTICLE_PUBLISH_DATE, article.publishDate)
+        }
+        startActivity(intent)
+    }
+    
+    private fun setupSearchView() {
+        searchView.setOnQueryTextListener(object : SearchView.OnQueryTextListener {
+            override fun onQueryTextSubmit(query: String?): Boolean {
+                // Hide keyboard when Enter is pressed but keep search bar visible
+                val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+                imm.hideSoftInputFromWindow(searchView.windowToken, 0)
+                return true
+            }
+
+            override fun onQueryTextChange(newText: String?): Boolean {
+                if (newText.isNullOrEmpty()) {
+                    // Show all saved articles
+                    observeViewModel()
+                } else {
+                    // Search saved articles
+                    viewModel.searchSavedArticles(newText)
+                }
+                return true
+            }
+        })
+        
+        // Handle close button click
+        searchView.setOnCloseListener {
+            closeSearchBar()
+            true
+        }
+        
+        // Also handle Enter key from the search view's text field
+        searchView.findViewById<androidx.appcompat.widget.SearchView.SearchAutoComplete>(
+            androidx.appcompat.R.id.search_src_text
+        ).setOnEditorActionListener { _, actionId, _ ->
+            if (actionId == EditorInfo.IME_ACTION_SEARCH) {
+                // Hide keyboard when Enter is pressed but keep search bar visible
+                val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+                imm.hideSoftInputFromWindow(searchView.windowToken, 0)
+                true
+            } else {
+                false
+            }
+        }
+    }
+    
+    private fun setupSwipeRefresh() {
+        swipeRefreshLayout.setOnRefreshListener {
+            // Refresh the saved articles data
+            observeViewModel()
+
+            // Stop the refresh animation after a short delay
+            swipeRefreshLayout.postDelayed({
+                swipeRefreshLayout.isRefreshing = false
+            }, 1000)
+        }
+
+        // Set refresh colors
+        swipeRefreshLayout.setColorSchemeResources(
+            R.color.colorPrimary,
+            R.color.colorAccent,
+            R.color.secondaryColor
+        )
+    }
+    
+    private fun showSearchBar() {
+        // Mark that the search bar was explicitly opened
+        isSearchBarExplicitlyOpened = true
+        
+        // Show the search card
+        searchCard.visibility = View.VISIBLE
+        
+        // Post the focus and keyboard show to ensure the view is properly laid out
+        searchCard.post {
+            // Focus on the search view and show keyboard
+            searchView.requestFocus()
+            searchView.isIconified = false
+            
+            // Show keyboard with a delay to ensure proper layout
+            searchView.post {
+                val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+                imm.showSoftInput(searchView, InputMethodManager.SHOW_IMPLICIT)
+            }
+        }
+    }
+    
+    private fun closeSearchBar() {
+        // Reset the explicit open flag
+        isSearchBarExplicitlyOpened = false
+        
+        // Hide the search card
+        searchCard.visibility = View.GONE
+        
+        // Clear search query
+        searchView.setQuery("", false)
+        
+        // Hide keyboard
+        val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+        imm.hideSoftInputFromWindow(searchView.windowToken, 0)
+        
+        // Show all saved articles
+        observeViewModel()
+    }
+    
+    private fun hideSearchBar() {
+        // Hide keyboard
+        val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+        imm.hideSoftInputFromWindow(searchView.windowToken, 0)
+        
+        // Only hide the search bar if it's not focused (user explicitly closed it) or if it wasn't explicitly opened
+        if ((!searchView.hasFocus() && !isSearchBarExplicitlyOpened) || searchView.query.isNullOrEmpty()) {
+            searchCard.visibility = View.GONE
+            isSearchBarExplicitlyOpened = false
+            // Clear search query
+            searchView.setQuery("", false)
+            // Show all saved articles
+            observeViewModel()
+        }
+    }
+    
+    private fun setupKeyboardVisibilityListener() {
+        // Listen for keyboard visibility changes
+        window.decorView.viewTreeObserver.addOnGlobalLayoutListener {
+            val rect = Rect()
+            window.decorView.getWindowVisibleDisplayFrame(rect)
+            val screenHeight = window.decorView.height
+            val keypadHeight = screenHeight - rect.bottom
+            
+            // Update search card bottom margin to position it above keyboard
+            val layoutParams = searchCard.layoutParams as androidx.constraintlayout.widget.ConstraintLayout.LayoutParams
+            layoutParams.bottomMargin = if (keypadHeight > screenHeight * 0.15) {
+                // Keyboard is visible, position above it
+                keypadHeight + 32 // Add some padding
+            } else {
+                // Keyboard is hidden, use default margin
+                32
+            }
+            searchCard.layoutParams = layoutParams
+            
+            // If keyboard is hidden AND search view is not focused AND search bar wasn't explicitly opened, hide it
+            if (keypadHeight < screenHeight * 0.15 && !searchView.hasFocus() && !isSearchBarExplicitlyOpened) {
+                if (searchCard.visibility == View.VISIBLE && searchView.query.isNullOrEmpty()) {
+                    searchCard.visibility = View.GONE
+                }
+            }
+        }
+    }
+    
+    override fun onBackPressed() {
+        // If drawer is open, close it
+        if (drawerLayout.isDrawerOpen(navView)) {
+            drawerLayout.closeDrawer(navView)
+            return
+        }
+        
+        // If search bar is visible, close it instead of closing the activity
+        if (searchCard.visibility == View.VISIBLE) {
+            closeSearchBar()
+        } else {
+            super.onBackPressed()
+        }
+    }
+    
+    // Folder-related methods
+    private fun selectFolder(folder: Folder) {
+        currentFolder = folder
+        viewModel.selectFolder(folder)
+    }
+    
+    private fun selectAllArticles() {
+        currentFolder = null
+        viewModel.selectFolder(null)
+    }
+    
+    private fun deleteFolder(folder: Folder) {
+        // Show confirmation dialog
+        AlertDialog.Builder(this)
+            .setTitle(getString(R.string.delete_folder))
+            .setMessage(getString(R.string.delete_folder_confirmation, folder.name))
+            .setPositiveButton(getString(R.string.yes)) { _, _ ->
+                // TODO: Implement folder deletion using ViewModel
+                Toast.makeText(this, getString(R.string.folder_deleted), Toast.LENGTH_SHORT).show()
+            }
+            .setNegativeButton(getString(R.string.no), null)
+            .show()
+    }
+    
+    private fun showCreateFolderDialog() {
+        val dialogView = layoutInflater.inflate(R.layout.dialog_create_folder, null)
+        val folderNameInput = dialogView.findViewById<TextInputEditText>(R.id.folder_name_input)
+        val cancelButton = dialogView.findViewById<com.google.android.material.button.MaterialButton>(R.id.cancel_button)
+        val createButton = dialogView.findViewById<com.google.android.material.button.MaterialButton>(R.id.create_button)
+
+        val dialog = AlertDialog.Builder(this)
+            .setView(dialogView)
+            .create()
+
+        cancelButton.setOnClickListener {
+            dialog.dismiss()
+        }
+
+        createButton.setOnClickListener {
+            val folderName = folderNameInput.text.toString().trim()
+            if (folderName.isNotEmpty()) {
+                viewModel.createFolder(folderName)
+                dialog.dismiss()
+                Toast.makeText(this, getString(R.string.folder_created), Toast.LENGTH_SHORT).show()
+            } else {
+                folderNameInput.error = getString(R.string.folder_name_required)
+            }
+        }
+
+        dialog.show()
+    }
+    
+    private fun showFolderSelectionDialog(articleUrl: String) {
+        val dialogView = layoutInflater.inflate(R.layout.dialog_select_folder, null)
+        val foldersRecyclerView = dialogView.findViewById<RecyclerView>(R.id.folders_recycler_view)
+        val createNewFolderButton = dialogView.findViewById<com.google.android.material.button.MaterialButton>(R.id.create_new_folder_button)
+        val cancelButton = dialogView.findViewById<com.google.android.material.button.MaterialButton>(R.id.cancel_button)
+        val saveButton = dialogView.findViewById<com.google.android.material.button.MaterialButton>(R.id.save_button)
+
+        val folderAdapter = FolderSelectionAdapter { folder ->
+            // Handle folder selection
+            // TODO: Save article to selected folder
+        }
+
+        foldersRecyclerView.layoutManager = LinearLayoutManager(this)
+        foldersRecyclerView.adapter = folderAdapter
+
+        val dialog = AlertDialog.Builder(this)
+            .setView(dialogView)
+            .create()
+
+        createNewFolderButton.setOnClickListener {
+            dialog.dismiss()
+            showCreateFolderDialog()
+        }
+
+        cancelButton.setOnClickListener {
+            dialog.dismiss()
+        }
+
+        saveButton.setOnClickListener {
+            // TODO: Save article to selected folder
+            dialog.dismiss()
+        }
+
+        // Load folders and set them to the adapter
+        lifecycleScope.launch {
+            viewModel.folders.collect { folders ->
+                folderAdapter.submitList(folders)
+            }
+        }
+
+        dialog.show()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/saved/SavedArticlesAdapter.kt b/app/src/main/java/com/quick/browser/presentation/ui/saved/SavedArticlesAdapter.kt
new file mode 100644
index 0000000..638a575
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/saved/SavedArticlesAdapter.kt
@@ -0,0 +1,338 @@
+package com.quick.browser.presentation.ui.saved
+
+import android.content.Intent
+import android.graphics.Color
+import android.graphics.drawable.Drawable
+import android.net.Uri
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.ImageView
+import android.widget.TextView
+import android.widget.Toast
+import androidx.lifecycle.LifecycleOwner
+import androidx.lifecycle.lifecycleScope
+import androidx.recyclerview.widget.RecyclerView
+import com.bumptech.glide.Glide
+import com.bumptech.glide.load.DataSource
+import com.bumptech.glide.load.engine.DiskCacheStrategy
+import com.bumptech.glide.load.engine.GlideException
+import com.bumptech.glide.request.RequestListener
+import com.bumptech.glide.request.target.Target
+import com.quick.browser.R
+import com.quick.browser.domain.model.SavedArticle
+import com.quick.browser.domain.model.SavedArticleItem
+import com.quick.browser.utils.Logger
+import kotlinx.coroutines.CoroutineScope
+import java.text.SimpleDateFormat
+import java.util.*
+import kotlin.random.Random
+
+class SavedArticlesAdapter(
+    private val onItemClick: (SavedArticle) -> Unit,
+    private val onDeleteClick: (SavedArticle) -> Unit
+) : RecyclerView.Adapter<RecyclerView.ViewHolder>() {
+
+    companion object {
+        private const val TYPE_HEADER = 0
+        private const val TYPE_SAVED_ARTICLE = 1
+        private const val TAG = "SavedArticlesAdapter"
+    }
+
+    private var items = listOf<SavedArticleItem>()
+    private val dateFormat = SimpleDateFormat("MMM dd", Locale.getDefault())
+    private val colorCache = mutableMapOf<String, Int>()
+
+    fun submitList(newItems: List<SavedArticle>) {
+        items = groupSavedArticlesByTime(newItems.sortedByDescending { it.savedDate })
+        notifyDataSetChanged()
+    }
+
+    private fun groupSavedArticlesByTime(savedArticles: List<SavedArticle>): List<SavedArticleItem> {
+        val startOfDay = getStartOfDay()
+        val startOfWeek = getStartOfWeek()
+
+        val groupedItems = mutableListOf<SavedArticleItem>()
+
+        // Group articles by time period
+        val todayArticles = savedArticles.filter { it.savedDate >= startOfDay }
+        val thisWeekArticles = savedArticles.filter { it.savedDate >= startOfWeek && it.savedDate < startOfDay }
+        val olderArticles = savedArticles.filter { it.savedDate < startOfWeek }
+
+        // Add Today section
+        if (todayArticles.isNotEmpty()) {
+            groupedItems.add(SavedArticleItem.Header("Today"))
+            todayArticles.forEach { groupedItems.add(SavedArticleItem.Article(it)) }
+        }
+
+        // Add Last Week section
+        if (thisWeekArticles.isNotEmpty()) {
+            groupedItems.add(SavedArticleItem.Header("Last Week"))
+            thisWeekArticles.forEach { groupedItems.add(SavedArticleItem.Article(it)) }
+        }
+
+        // Add Older section
+        if (olderArticles.isNotEmpty()) {
+            groupedItems.add(SavedArticleItem.Header("Older"))
+            olderArticles.forEach { groupedItems.add(SavedArticleItem.Article(it)) }
+        }
+
+        return groupedItems
+    }
+
+    private fun getStartOfDay(): Long {
+        val calendar = Calendar.getInstance()
+        calendar.set(Calendar.HOUR_OF_DAY, 0)
+        calendar.set(Calendar.MINUTE, 0)
+        calendar.set(Calendar.SECOND, 0)
+        calendar.set(Calendar.MILLISECOND, 0)
+        return calendar.timeInMillis
+    }
+
+    private fun getStartOfWeek(): Long {
+        val calendar = Calendar.getInstance()
+        calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY)
+        calendar.set(Calendar.HOUR_OF_DAY, 0)
+        calendar.set(Calendar.MINUTE, 0)
+        calendar.set(Calendar.SECOND, 0)
+        calendar.set(Calendar.MILLISECOND, 0)
+        return calendar.timeInMillis
+    }
+
+    override fun getItemViewType(position: Int): Int {
+        return when (items[position]) {
+            is SavedArticleItem.Header -> TYPE_HEADER
+            is SavedArticleItem.Article -> TYPE_SAVED_ARTICLE
+        }
+    }
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RecyclerView.ViewHolder {
+        return when (viewType) {
+            TYPE_HEADER -> {
+                val view = LayoutInflater.from(parent.context)
+                    .inflate(R.layout.item_history_header, parent, false)
+                HeaderViewHolder(view)
+            }
+            TYPE_SAVED_ARTICLE -> {
+                val view = LayoutInflater.from(parent.context)
+                    .inflate(R.layout.item_history_card, parent, false)
+                SavedArticleViewHolder(view)
+            }
+            else -> throw IllegalArgumentException("Unknown view type: $viewType")
+        }
+    }
+
+    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {
+        when (val item = items[position]) {
+            is SavedArticleItem.Header -> {
+                (holder as HeaderViewHolder).bind(item.title)
+            }
+            is SavedArticleItem.Article -> {
+                (holder as SavedArticleViewHolder).bind(item.savedArticle)
+            }
+        }
+    }
+
+    override fun getItemCount() = items.size
+
+    // Header ViewHolder
+    inner class HeaderViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
+        private val titleText: TextView = itemView.findViewById(R.id.header_title)
+
+        fun bind(title: String) {
+            titleText.text = title
+        }
+    }
+
+    inner class SavedArticleViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {
+        private val previewImage: ImageView = itemView.findViewById(R.id.preview_image)
+        private val faviconImage: ImageView = itemView.findViewById(R.id.favicon_image)
+        private val titleText: TextView = itemView.findViewById(R.id.title_text)
+        private val dateText: TextView = itemView.findViewById(R.id.date_text)
+        private val offlineIndicator: ImageView = itemView.findViewById(R.id.offline_indicator)
+        private val websiteName: TextView = itemView.findViewById(R.id.website_name)
+        private val shareButton: ImageView = itemView.findViewById(R.id.share_button)
+        private val saveButton: ImageView = itemView.findViewById(R.id.save_button)
+        private val deleteOverlay: View = itemView.findViewById(R.id.delete_overlay)
+        private val deleteButton: ImageView = itemView.findViewById(R.id.delete_button)
+
+        fun bind(article: SavedArticle) {
+            // Set title
+            val displayTitle = when {
+                article.title.isEmpty() -> itemView.context.getString(R.string.untitled_page)
+                article.title == article.url -> itemView.context.getString(R.string.untitled_page)
+                else -> article.title
+            }
+            titleText.text = displayTitle
+
+            // Set website name (extracted from URL without www, .com, etc.)
+            val cleanWebsiteName = extractCleanWebsiteName(article.url)
+            websiteName.text = cleanWebsiteName
+
+            // Set date (without year)
+            dateText.text = dateFormat.format(Date(article.savedDate))
+
+            // Set save button visibility and icon (always show the download icon)
+            saveButton.visibility = View.VISIBLE
+            saveButton.setImageResource(R.drawable.ic_download)
+
+            // Set preview image using Glide
+            loadPreviewImage(article)
+
+            // Set favicon using Glide
+            loadFavicon(article)
+
+            // Set share button click listener
+            shareButton.setOnClickListener {
+                shareSavedArticle(article)
+            }
+
+            // Set save button click listener
+            saveButton.setOnClickListener {
+                // For saved articles, this could be a re-save or export action
+                Toast.makeText(
+                    itemView.context,
+                    itemView.context.getString(R.string.article_already_saved),
+                    Toast.LENGTH_SHORT
+                ).show()
+            }
+
+            // Set click listener for the card
+            itemView.setOnClickListener {
+                onItemClick(article)
+            }
+
+            // Set long click listener for the card
+            itemView.setOnLongClickListener {
+                showDeleteOption()
+                true
+            }
+
+            // Set delete button click listener
+            deleteButton.setOnClickListener {
+                hideDeleteOption()
+                onDeleteClick(article)
+            }
+
+            // Set delete overlay click listener to hide delete option
+            deleteOverlay.setOnClickListener {
+                hideDeleteOption()
+            }
+        }
+
+        private fun showDeleteOption() {
+            deleteOverlay.visibility = View.VISIBLE
+            deleteButton.visibility = View.VISIBLE
+
+            // Add animation
+            deleteOverlay.alpha = 0f
+            deleteButton.alpha = 0f
+            deleteOverlay.animate().alpha(1f).setDuration(200).start()
+            deleteButton.animate().alpha(1f).setDuration(200).start()
+        }
+
+        private fun hideDeleteOption() {
+            deleteOverlay.animate().alpha(0f).setDuration(200).withEndAction {
+                deleteOverlay.visibility = View.GONE
+            }.start()
+            deleteButton.animate().alpha(0f).setDuration(200).withEndAction {
+                deleteButton.visibility = View.GONE
+            }.start()
+        }
+
+        private fun extractCleanWebsiteName(url: String): String {
+            return try {
+                val uri = Uri.parse(url)
+                val host = uri.host?.lowercase() ?: return "Unknown"
+
+                // Remove www prefix
+                val withoutWww = if (host.startsWith("www.")) {
+                    host.substring(4)
+                } else {
+                    host
+                }
+
+                // Split by dots and take the first part (main domain name)
+                val parts = withoutWww.split(".")
+                if (parts.isNotEmpty()) {
+                    // Capitalize first letter
+                    val mainDomain = parts[0]
+                    mainDomain.replaceFirstChar {
+                        if (it.isLowerCase()) it.titlecase(Locale.getDefault()) else it.toString()
+                    }
+                } else {
+                    "Unknown"
+                }
+            } catch (e: Exception) {
+                "Unknown"
+            }
+        }
+
+        private fun shareSavedArticle(article: SavedArticle) {
+            val shareIntent = Intent(Intent.ACTION_SEND).apply {
+                type = "text/plain"
+                putExtra(Intent.EXTRA_TEXT, article.url)
+                putExtra(Intent.EXTRA_SUBJECT, article.title)
+            }
+
+            val chooser = Intent.createChooser(shareIntent, "Share saved article")
+            itemView.context.startActivity(chooser)
+        }
+
+        private fun getRandomColorForUrl(url: String): Int {
+            // Use cache to ensure consistent colors for the same URL
+            return colorCache.getOrPut(url) {
+                val hash = url.hashCode()
+                val random = Random(hash)
+
+                // Generate pleasant colors
+                val hue = random.nextFloat() * 360f
+                val saturation = 0.5f + random.nextFloat() * 0.3f // 0.5 to 0.8
+                val lightness = 0.4f + random.nextFloat() * 0.2f // 0.4 to 0.6
+
+                Color.HSVToColor(floatArrayOf(hue, saturation, lightness))
+            }
+        }
+
+        private fun loadPreviewImage(article: SavedArticle) {
+            // Reset image view properties
+            previewImage.scaleType = ImageView.ScaleType.CENTER_CROP
+            previewImage.setBackgroundColor(Color.TRANSPARENT)
+
+            Logger.d(TAG, "Attempting to load preview image for ${article.url}")
+
+            // For saved articles, we don't have a preview image URL, so we'll use a fallback
+            showFallbackPreview(article)
+        }
+
+        private fun showFallbackPreview(article: SavedArticle) {
+            // Set random color background as fallback
+            val randomColor = getRandomColorForUrl(article.url)
+            previewImage.setBackgroundColor(randomColor)
+            previewImage.setImageResource(R.drawable.ic_web_page)
+            previewImage.scaleType = ImageView.ScaleType.CENTER
+        }
+
+        private fun loadFavicon(article: SavedArticle) {
+            // Try to construct favicon URL from domain
+            try {
+                val uri = Uri.parse(article.url)
+                val domain = uri.host
+                if (domain != null) {
+                    val faviconUrl = "https://$domain/favicon.ico"
+                    Glide.with(itemView.context)
+                        .load(faviconUrl)
+                        .placeholder(R.drawable.ic_website)
+                        .error(R.drawable.ic_website)
+                        .diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)
+                        .into(faviconImage)
+                } else {
+                    faviconImage.setImageResource(R.drawable.ic_website)
+                }
+            } catch (e: Exception) {
+                Logger.e(TAG, "Error constructing favicon URL", e)
+                faviconImage.setImageResource(R.drawable.ic_website)
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/saved/SavedArticlesUiState.kt b/app/src/main/java/com/quick/browser/presentation/ui/saved/SavedArticlesUiState.kt
new file mode 100644
index 0000000..eb21d59
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/saved/SavedArticlesUiState.kt
@@ -0,0 +1,12 @@
+package com.quick.browser.presentation.ui.saved
+
+import com.quick.browser.domain.model.SavedArticle
+
+/**
+ * UI state for the saved articles screen
+ */
+data class SavedArticlesUiState(
+    val articles: List<SavedArticle> = emptyList(),
+    val isLoading: Boolean = false,
+    val error: String? = null
+)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/saved/SavedArticlesViewModel.kt b/app/src/main/java/com/quick/browser/presentation/ui/saved/SavedArticlesViewModel.kt
new file mode 100644
index 0000000..4ca03d2
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/saved/SavedArticlesViewModel.kt
@@ -0,0 +1,162 @@
+package com.quick.browser.presentation.ui.saved
+
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import com.quick.browser.domain.model.Folder
+import com.quick.browser.domain.model.SavedArticle
+import com.quick.browser.domain.usecase.*
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.StateFlow
+import kotlinx.coroutines.flow.collectLatest
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+/**
+ * ViewModel for saved articles
+ */
+@HiltViewModel
+class SavedArticlesViewModel @Inject constructor(
+    private val getSavedArticlesUseCase: GetSavedArticlesUseCase,
+    private val getArticlesInFolderUseCase: GetArticlesInFolderUseCase,
+    private val deleteArticleUseCase: DeleteArticleUseCase,
+    private val searchSavedArticlesUseCase: SearchSavedArticlesUseCase,
+    private val searchArticlesInFolderUseCase: SearchArticlesInFolderUseCase,
+    private val getAllFoldersUseCase: GetAllFoldersUseCase,
+    private val createFolderUseCase: CreateFolderUseCase,
+    private val addArticleToFolderUseCase: AddArticleToFolderUseCase
+) : ViewModel() {
+
+    private val _uiState = MutableStateFlow(SavedArticlesUiState())
+    val uiState: StateFlow<SavedArticlesUiState> = _uiState
+
+    private val _folders = MutableStateFlow<List<Folder>>(emptyList())
+    val folders: StateFlow<List<Folder>> = _folders
+
+    private var currentFolder: Folder? = null
+
+    init {
+        loadSavedArticles()
+        loadFolders()
+    }
+
+    private fun loadSavedArticles() {
+        viewModelScope.launch {
+            try {
+                _uiState.value = _uiState.value.copy(isLoading = true)
+                // Collect the flow of saved articles from the use case
+                if (currentFolder == null) {
+                    getSavedArticlesUseCase().collectLatest { articles ->
+                        _uiState.value = _uiState.value.copy(
+                            isLoading = false,
+                            articles = articles
+                        )
+                    }
+                } else {
+                    getArticlesInFolderUseCase(currentFolder!!.id).collectLatest { articles ->
+                        _uiState.value = _uiState.value.copy(
+                            isLoading = false,
+                            articles = articles
+                        )
+                    }
+                }
+            } catch (e: Exception) {
+                _uiState.value = _uiState.value.copy(
+                    isLoading = false,
+                    error = "Failed to load saved articles: ${e.message}"
+                )
+            }
+        }
+    }
+
+    private fun loadFolders() {
+        viewModelScope.launch {
+            try {
+                getAllFoldersUseCase().collectLatest { folders ->
+                    _folders.value = folders
+                }
+            } catch (e: Exception) {
+                _uiState.value = _uiState.value.copy(
+                    error = "Failed to load folders: ${e.message}"
+                )
+            }
+        }
+    }
+
+    fun searchSavedArticles(query: String) {
+        viewModelScope.launch {
+            try {
+                // For search, we'll use LiveData instead of Flow
+                if (currentFolder == null) {
+                    searchSavedArticlesUseCase(query).observeForever { articles ->
+                        _uiState.value = _uiState.value.copy(
+                            isLoading = false,
+                            articles = articles
+                        )
+                    }
+                } else {
+                    searchArticlesInFolderUseCase(currentFolder!!.id, query).observeForever { articles ->
+                        _uiState.value = _uiState.value.copy(
+                            isLoading = false,
+                            articles = articles
+                        )
+                    }
+                }
+            } catch (e: Exception) {
+                _uiState.value = _uiState.value.copy(
+                    isLoading = false,
+                    error = "Failed to search saved articles: ${e.message}"
+                )
+            }
+        }
+    }
+
+    fun deleteArticle(article: SavedArticle) {
+        viewModelScope.launch {
+            when (val result = deleteArticleUseCase(article)) {
+                is com.quick.browser.domain.result.Result.Success<*> -> {
+                    // Update UI state after deletion
+                    val currentArticles = _uiState.value.articles.toMutableList()
+                    currentArticles.removeAll { it.url == article.url }
+                    _uiState.value = _uiState.value.copy(articles = currentArticles)
+                }
+                is com.quick.browser.domain.result.Result.Failure<*> -> {
+                    _uiState.value = _uiState.value.copy(
+                        error = "Failed to delete article: ${result.error}"
+                    )
+                }
+            }
+        }
+    }
+
+    fun selectFolder(folder: Folder?) {
+        currentFolder = folder
+        loadSavedArticles()
+    }
+
+    fun createFolder(name: String) {
+        viewModelScope.launch {
+            try {
+                createFolderUseCase(name)
+                // Reload folders after creation
+                loadFolders()
+            } catch (e: Exception) {
+                _uiState.value = _uiState.value.copy(
+                    error = "Failed to create folder: ${e.message}"
+                )
+            }
+        }
+    }
+
+    fun addArticleToFolder(folderId: Long, articleUrl: String) {
+        viewModelScope.launch {
+            try {
+                addArticleToFolderUseCase(folderId, articleUrl)
+            } catch (e: Exception) {
+                _uiState.value = _uiState.value.copy(
+                    error = "Failed to add article to folder: ${e.message}"
+                )
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/settings/SettingsActivity.kt b/app/src/main/java/com/quick/browser/presentation/ui/settings/SettingsActivity.kt
new file mode 100644
index 0000000..e0b1f76
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/settings/SettingsActivity.kt
@@ -0,0 +1,178 @@
+package com.quick.browser.presentation.ui.settings
+
+import android.os.Bundle
+import android.view.Menu
+import android.view.MenuItem
+import android.widget.SeekBar
+import android.widget.TextView
+import android.widget.Toast
+import androidx.appcompat.widget.Toolbar
+import androidx.core.view.ViewCompat
+import androidx.core.view.WindowInsetsCompat
+import androidx.core.view.updatePadding
+import com.google.android.material.switchmaterial.SwitchMaterial
+import com.quick.browser.R
+import com.quick.browser.presentation.ui.components.BaseActivity
+import com.quick.browser.utils.Logger
+
+/**
+ * Settings activity for the browser
+ * Theme is now always light and theme settings are removed.
+ */
+class SettingsActivity : BaseActivity() {
+
+    // UI Components
+    private lateinit var toolbar: Toolbar
+    private lateinit var switchJavaScript: SwitchMaterial
+    private lateinit var switchBlockAds: SwitchMaterial
+    private lateinit var switchSaveHistory: SwitchMaterial
+    private lateinit var switchShowUrlBar: SwitchMaterial
+    private lateinit var switchAutoFontSize: SwitchMaterial
+    private lateinit var seekbarFontSize: SeekBar
+    private lateinit var textFontSizePreview: TextView
+    private lateinit var textFontSizeSample: TextView
+    private lateinit var layoutManualFontSize: android.widget.LinearLayout
+
+    companion object {
+        private const val TAG = "SettingsActivity"
+    }
+
+    override fun onCreate(savedInstanceState: Bundle?) {
+        super.onCreate(savedInstanceState)
+        setContentView(R.layout.activity_settings)
+
+        try {
+            // Initialize toolbar
+            toolbar = findViewById(R.id.toolbar)
+            setSupportActionBar(toolbar)
+            supportActionBar?.setDisplayHomeAsUpEnabled(false) // Hide back button
+            supportActionBar?.title = getString(R.string.settings)
+
+            // Ensure toolbar sits below the status bar on all devices
+            ViewCompat.setOnApplyWindowInsetsListener(toolbar) { v, insets ->
+                val statusBarHeight = insets.getInsets(WindowInsetsCompat.Type.statusBars()).top
+                v.updatePadding(top = statusBarHeight)
+                insets
+            }
+
+            // Initialize UI Components
+            initializeViews()
+
+            // Load settings
+            loadSettings()
+
+            // Setup listeners
+            setupListeners()
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error initializing settings activity", e)
+            Toast.makeText(this, "Error loading settings", Toast.LENGTH_SHORT).show()
+            finish()
+        }
+    }
+
+    private fun initializeViews() {
+        try {
+            switchJavaScript = findViewById(R.id.switch_javascript)
+            switchBlockAds = findViewById(R.id.switch_block_ads)
+            switchSaveHistory = findViewById(R.id.switch_save_history)
+            switchShowUrlBar = findViewById(R.id.switch_show_url_bar)
+            switchAutoFontSize = findViewById(R.id.switch_auto_font_size)
+            seekbarFontSize = findViewById(R.id.seekbar_font_size)
+            textFontSizePreview = findViewById(R.id.text_font_size_preview)
+            textFontSizeSample = findViewById(R.id.text_font_size_sample)
+            layoutManualFontSize = findViewById(R.id.layout_manual_font_size)
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error initializing views", e)
+            throw e
+        }
+    }
+
+    private fun loadSettings() {
+        try {
+            // Load settings from SettingsService
+            switchJavaScript.isChecked = settingsService.isJavaScriptEnabled()
+            switchBlockAds.isChecked = settingsService.isAdBlockEnabled()
+            switchSaveHistory.isChecked = settingsService.isSaveHistoryEnabled()
+            switchShowUrlBar.isChecked = settingsService.isUrlBarVisible()
+            
+            // Accessibility settings
+            switchAutoFontSize.isChecked = settingsService.isAutoFontSizeEnabled()
+            val manualFontSize = settingsService.getManualFontSize()
+            seekbarFontSize.progress = manualFontSize
+            textFontSizePreview.text = getString(R.string.font_size_preview, manualFontSize)
+            textFontSizeSample.textSize = manualFontSize.toFloat()
+            
+            // Enable/disable manual font size controls based on auto font size setting
+            seekbarFontSize.isEnabled = !switchAutoFontSize.isChecked
+            textFontSizePreview.isEnabled = !switchAutoFontSize.isChecked
+            textFontSizeSample.isEnabled = !switchAutoFontSize.isChecked
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error loading settings", e)
+            throw e
+        }
+    }
+
+    private fun setupListeners() {
+        try {
+            // JavaScript setting
+            switchJavaScript.setOnCheckedChangeListener { _, isChecked ->
+                settingsService.setJavaScriptEnabled(isChecked)
+            }
+
+            // Ad blocking setting
+            switchBlockAds.setOnCheckedChangeListener { _, isChecked ->
+                settingsService.setAdBlockEnabled(isChecked)
+            }
+
+            // Save history setting
+            switchSaveHistory.setOnCheckedChangeListener { _, isChecked ->
+                settingsService.setSaveHistoryEnabled(isChecked)
+            }
+
+            // Show URL bar setting
+            switchShowUrlBar.setOnCheckedChangeListener { _, isChecked ->
+                settingsService.setUrlBarVisible(isChecked)
+            }
+            
+            // Accessibility settings
+            switchAutoFontSize.setOnCheckedChangeListener { _, isChecked ->
+                settingsService.setAutoFontSizeEnabled(isChecked)
+                // Enable/disable manual font size controls based on auto font size setting
+                seekbarFontSize.isEnabled = !isChecked
+                textFontSizePreview.isEnabled = !isChecked
+                textFontSizeSample.isEnabled = !isChecked
+            }
+            
+            seekbarFontSize.setOnSeekBarChangeListener(object : SeekBar.OnSeekBarChangeListener {
+                override fun onProgressChanged(seekBar: SeekBar?, progress: Int, fromUser: Boolean) {
+                    if (progress >= 8) {  // Minimum font size is 8
+                        settingsService.setManualFontSize(progress)
+                        textFontSizePreview.text = getString(R.string.font_size_preview, progress)
+                        textFontSizeSample.textSize = progress.toFloat()
+                    }
+                }
+                
+                override fun onStartTrackingTouch(seekBar: SeekBar?) {}
+                override fun onStopTrackingTouch(seekBar: SeekBar?) {}
+            })
+
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error setting up listeners", e)
+            throw e
+        }
+    }
+
+    override fun onCreateOptionsMenu(menu: Menu): Boolean {
+        return true
+    }
+
+    override fun onOptionsItemSelected(item: MenuItem): Boolean {
+        return when (item.itemId) {
+            android.R.id.home -> {
+                finish()
+                true
+            }
+            else -> super.onOptionsItemSelected(item)
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/settings/SettingsUiState.kt b/app/src/main/java/com/quick/browser/presentation/ui/settings/SettingsUiState.kt
new file mode 100644
index 0000000..63228a6
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/settings/SettingsUiState.kt
@@ -0,0 +1,12 @@
+package com.quick.browser.presentation.ui.settings
+
+import com.quick.browser.domain.model.Settings
+
+/**
+ * UI state for the settings screen
+ */
+data class SettingsUiState(
+    val settings: Settings? = null,
+    val isLoading: Boolean = false,
+    val error: String? = null
+)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/settings/SettingsViewModel.kt b/app/src/main/java/com/quick/browser/presentation/ui/settings/SettingsViewModel.kt
new file mode 100644
index 0000000..8c1fc3f
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/settings/SettingsViewModel.kt
@@ -0,0 +1,83 @@
+package com.quick.browser.presentation.ui.settings
+
+import androidx.lifecycle.ViewModel
+import androidx.lifecycle.viewModelScope
+import com.quick.browser.domain.model.Settings
+import com.quick.browser.domain.usecase.GetSettingsUseCase
+import com.quick.browser.domain.usecase.UpdateSettingsUseCase
+import dagger.hilt.android.lifecycle.HiltViewModel
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.StateFlow
+import kotlinx.coroutines.launch
+import javax.inject.Inject
+
+/**
+ * ViewModel for settings
+ */
+@HiltViewModel
+class SettingsViewModel @Inject constructor(
+    private val getSettingsUseCase: GetSettingsUseCase,
+    private val updateSettingsUseCase: UpdateSettingsUseCase
+) : ViewModel() {
+
+    private val _uiState = MutableStateFlow(SettingsUiState())
+    val uiState: StateFlow<SettingsUiState> = _uiState
+
+    init {
+        loadSettings()
+    }
+
+    private fun loadSettings() {
+        viewModelScope.launch {
+            try {
+                _uiState.value = _uiState.value.copy(isLoading = true)
+                when (val result = getSettingsUseCase()) {
+                    is com.quick.browser.domain.result.Result.Success -> {
+                        _uiState.value = _uiState.value.copy(
+                            isLoading = false,
+                            settings = result.data
+                        )
+                    }
+                    is com.quick.browser.domain.result.Result.Failure -> {
+                        _uiState.value = _uiState.value.copy(
+                            isLoading = false,
+                            error = "Failed to load settings"
+                        )
+                    }
+                }
+            } catch (e: Exception) {
+                _uiState.value = _uiState.value.copy(
+                    isLoading = false,
+                    error = "Failed to load settings"
+                )
+            }
+        }
+    }
+
+    fun updateSettings(settings: Settings) {
+        viewModelScope.launch {
+            try {
+                _uiState.value = _uiState.value.copy(isLoading = true)
+                when (val result = updateSettingsUseCase(settings)) {
+                    is com.quick.browser.domain.result.Result.Success<*> -> {
+                        _uiState.value = _uiState.value.copy(
+                            isLoading = false,
+                            settings = settings
+                        )
+                    }
+                    is com.quick.browser.domain.result.Result.Failure<*> -> {
+                        _uiState.value = _uiState.value.copy(
+                            isLoading = false,
+                            error = "Failed to update settings"
+                        )
+                    }
+                }
+            } catch (e: Exception) {
+                _uiState.value = _uiState.value.copy(
+                    isLoading = false,
+                    error = "Failed to update settings"
+                )
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/theme/Color.kt b/app/src/main/java/com/quick/browser/presentation/ui/theme/Color.kt
new file mode 100644
index 0000000..deda2c3
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/theme/Color.kt
@@ -0,0 +1,151 @@
+package com.quick.browser.presentation.ui.theme
+
+import androidx.compose.ui.graphics.Color
+
+/**
+ * Color definitions for the Quick Browser application
+ *
+ * This file contains color definitions for both light and dark themes,
+ * following Material Design guidelines. It also includes app-specific
+ * colors for UI elements like bubbles and reading mode.
+ */
+
+// Light theme colors
+/** Primary color for light theme */
+val md_theme_light_primary = Color(0xFF0061A4)
+/** On primary color for light theme */
+val md_theme_light_onPrimary = Color(0xFFFFFFFF)
+/** Primary container color for light theme */
+val md_theme_light_primaryContainer = Color(0xFFD1E4FF)
+/** On primary container color for light theme */
+val md_theme_light_onPrimaryContainer = Color(0xFF001D36)
+/** Secondary color for light theme */
+val md_theme_light_secondary = Color(0xFF535F70)
+/** On secondary color for light theme */
+val md_theme_light_onSecondary = Color(0xFFFFFFFF)
+/** Secondary container color for light theme */
+val md_theme_light_secondaryContainer = Color(0xFFD7E3F7)
+/** On secondary container color for light theme */
+val md_theme_light_onSecondaryContainer = Color(0xFF101C2B)
+/** Tertiary color for light theme */
+val md_theme_light_tertiary = Color(0xFF6B5778)
+/** On tertiary color for light theme */
+val md_theme_light_onTertiary = Color(0xFFFFFFFF)
+/** Tertiary container color for light theme */
+val md_theme_light_tertiaryContainer = Color(0xFFF2DAFF)
+/** On tertiary container color for light theme */
+val md_theme_light_onTertiaryContainer = Color(0xFF251431)
+/** Error color for light theme */
+val md_theme_light_error = Color(0xFFBA1A1A)
+/** Error container color for light theme */
+val md_theme_light_errorContainer = Color(0xFFFFDAD6)
+/** On error color for light theme */
+val md_theme_light_onError = Color(0xFFFFFFFF)
+/** On error container color for light theme */
+val md_theme_light_onErrorContainer = Color(0xFF410002)
+/** Background color for light theme */
+val md_theme_light_background = Color(0xFFFDFCFF)
+/** On background color for light theme */
+val md_theme_light_onBackground = Color(0xFF1A1C1E)
+/** Surface color for light theme */
+val md_theme_light_surface = Color(0xFFFDFCFF)
+/** On surface color for light theme */
+val md_theme_light_onSurface = Color(0xFF1A1C1E)
+/** Surface variant color for light theme */
+val md_theme_light_surfaceVariant = Color(0xFFDFE2EB)
+/** On surface variant color for light theme */
+val md_theme_light_onSurfaceVariant = Color(0xFF43474E)
+/** Outline color for light theme */
+val md_theme_light_outline = Color(0xFF73777F)
+/** Inverse on surface color for light theme */
+val md_theme_light_inverseOnSurface = Color(0xFFF1F0F4)
+/** Inverse surface color for light theme */
+val md_theme_light_inverseSurface = Color(0xFF2F3033)
+/** Inverse primary color for light theme */
+val md_theme_light_inversePrimary = Color(0xFF9ECAFF)
+/** Shadow color for light theme */
+val md_theme_light_shadow = Color(0xFF000000)
+/** Surface tint color for light theme */
+val md_theme_light_surfaceTint = Color(0xFF0061A4)
+/** Outline variant color for light theme */
+val md_theme_light_outlineVariant = Color(0xFFC3C7CF)
+/** Scrim color for light theme */
+val md_theme_light_scrim = Color(0xFF000000)
+
+// Dark theme colors
+/** Primary color for dark theme */
+val md_theme_dark_primary = Color(0xFF9ECAFF)
+/** On primary color for dark theme */
+val md_theme_dark_onPrimary = Color(0xFF003258)
+/** Primary container color for dark theme */
+val md_theme_dark_primaryContainer = Color(0xFF00497D)
+/** On primary container color for dark theme */
+val md_theme_dark_onPrimaryContainer = Color(0xFFD1E4FF)
+/** Secondary color for dark theme */
+val md_theme_dark_secondary = Color(0xFFBBC7DB)
+/** On secondary color for dark theme */
+val md_theme_dark_onSecondary = Color(0xFF253140)
+/** Secondary container color for dark theme */
+val md_theme_dark_secondaryContainer = Color(0xFF3B4858)
+/** On secondary container color for dark theme */
+val md_theme_dark_onSecondaryContainer = Color(0xFFD7E3F7)
+/** Tertiary color for dark theme */
+val md_theme_dark_tertiary = Color(0xFFD7BEE4)
+/** On tertiary color for dark theme */
+val md_theme_dark_onTertiary = Color(0xFF3B2948)
+/** Tertiary container color for dark theme */
+val md_theme_dark_tertiaryContainer = Color(0xFF534060)
+/** On tertiary container color for dark theme */
+val md_theme_dark_onTertiaryContainer = Color(0xFFF2DAFF)
+/** Error color for dark theme */
+val md_theme_dark_error = Color(0xFFFFB4AB)
+/** Error container color for dark theme */
+val md_theme_dark_errorContainer = Color(0xFF93000A)
+/** On error color for dark theme */
+val md_theme_dark_onError = Color(0xFF690005)
+/** On error container color for dark theme */
+val md_theme_dark_onErrorContainer = Color(0xFFFFDAD6)
+/** Background color for dark theme */
+val md_theme_dark_background = Color(0xFF1A1C1E)
+/** On background color for dark theme */
+val md_theme_dark_onBackground = Color(0xFFE2E2E6)
+/** Surface color for dark theme */
+val md_theme_dark_surface = Color(0xFF1A1C1E)
+/** On surface color for dark theme */
+val md_theme_dark_onSurface = Color(0xFFE2E2E6)
+/** Surface variant color for dark theme */
+val md_theme_dark_surfaceVariant = Color(0xFF43474E)
+/** On surface variant color for dark theme */
+val md_theme_dark_onSurfaceVariant = Color(0xFFC3C7CF)
+/** Outline color for dark theme */
+val md_theme_dark_outline = Color(0xFF8D9199)
+/** Inverse on surface color for dark theme */
+val md_theme_dark_inverseOnSurface = Color(0xFF1A1C1E)
+/** Inverse surface color for dark theme */
+val md_theme_dark_inverseSurface = Color(0xFFE2E2E6)
+/** Inverse primary color for dark theme */
+val md_theme_dark_inversePrimary = Color(0xFF0061A4)
+/** Shadow color for dark theme */
+val md_theme_dark_shadow = Color(0xFF000000)
+/** Surface tint color for dark theme */
+val md_theme_dark_surfaceTint = Color(0xFF9ECAFF)
+/** Outline variant color for dark theme */
+val md_theme_dark_outlineVariant = Color(0xFF43474E)
+/** Scrim color for dark theme */
+val md_theme_dark_scrim = Color(0xFF000000)
+
+// App-specific colors
+/** Background color for bubbles */
+val bubble_background_color = Color(0xFF0061A4)
+/** Background color for expanded bubbles */
+val bubble_background_color_expanded = Color(0xFFFFFFFF)
+/** Color for progress indicators */
+val progress_indicator_color = Color(0xFF64B5F6)
+/** Background color for light reading mode */
+val read_mode_background_light = Color(0xFFF5F5F5)
+/** Background color for dark reading mode */
+val read_mode_background_dark = Color(0xFF121212)
+/** Text color for light reading mode */
+val read_mode_text_light = Color(0xFF333333)
+/** Text color for dark reading mode */
+val read_mode_text_dark = Color(0xFFDDDDDD)
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/theme/Theme.kt b/app/src/main/java/com/quick/browser/presentation/ui/theme/Theme.kt
new file mode 100644
index 0000000..d7c9a09
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/theme/Theme.kt
@@ -0,0 +1,99 @@
+package com.quick.browser.presentation.ui.theme
+
+import android.os.Build
+import androidx.appcompat.app.AppCompatDelegate
+import androidx.compose.foundation.isSystemInDarkTheme
+import androidx.compose.material3.*
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.platform.LocalContext
+
+// Define light theme colors
+private val LightColors =
+        lightColorScheme(
+                primary = md_theme_light_primary,
+                onPrimary = md_theme_light_onPrimary,
+                primaryContainer = md_theme_light_primaryContainer,
+                onPrimaryContainer = md_theme_light_onPrimaryContainer,
+                secondary = md_theme_light_secondary,
+                onSecondary = md_theme_light_onSecondary,
+                secondaryContainer = md_theme_light_secondaryContainer,
+                onSecondaryContainer = md_theme_light_onSecondaryContainer,
+                tertiary = md_theme_light_tertiary,
+                onTertiary = md_theme_light_onTertiary,
+                tertiaryContainer = md_theme_light_tertiaryContainer,
+                onTertiaryContainer = md_theme_light_onTertiaryContainer,
+                error = md_theme_light_error,
+                errorContainer = md_theme_light_errorContainer,
+                onError = md_theme_light_onError,
+                onErrorContainer = md_theme_light_onErrorContainer,
+                background = md_theme_light_background,
+                onBackground = md_theme_light_onBackground,
+                surface = md_theme_light_surface,
+                onSurface = md_theme_light_onSurface,
+                surfaceVariant = md_theme_light_surfaceVariant,
+                onSurfaceVariant = md_theme_light_onSurfaceVariant,
+                outline = md_theme_light_outline,
+                inverseSurface = md_theme_light_inverseSurface,
+                inverseOnSurface = md_theme_light_inverseOnSurface,
+                inversePrimary = md_theme_light_inversePrimary,
+        )
+
+// Define dark theme colors
+private val DarkColors =
+        darkColorScheme(
+                primary = md_theme_dark_primary,
+                onPrimary = md_theme_dark_onPrimary,
+                primaryContainer = md_theme_dark_primaryContainer,
+                onPrimaryContainer = md_theme_dark_onPrimaryContainer,
+                secondary = md_theme_dark_secondary,
+                onSecondary = md_theme_dark_onSecondary,
+                secondaryContainer = md_theme_dark_secondaryContainer,
+                onSecondaryContainer = md_theme_dark_onSecondaryContainer,
+                tertiary = md_theme_dark_tertiary,
+                onTertiary = md_theme_dark_onTertiary,
+                tertiaryContainer = md_theme_dark_tertiaryContainer,
+                onTertiaryContainer = md_theme_dark_onTertiaryContainer,
+                error = md_theme_dark_error,
+                errorContainer = md_theme_dark_errorContainer,
+                onError = md_theme_dark_onError,
+                onErrorContainer = md_theme_dark_onErrorContainer,
+                background = md_theme_dark_background,
+                onBackground = md_theme_dark_onBackground,
+                surface = md_theme_dark_surface,
+                onSurface = md_theme_dark_onSurface,
+                surfaceVariant = md_theme_dark_surfaceVariant,
+                onSurfaceVariant = md_theme_dark_onSurfaceVariant,
+                outline = md_theme_dark_outline,
+                inverseSurface = md_theme_dark_inverseSurface,
+                inverseOnSurface = md_theme_dark_inverseOnSurface,
+                inversePrimary = md_theme_dark_inversePrimary,
+        )
+
+/** Apply the QB theme to components */
+@Composable
+fun QBTheme(
+        darkTheme: Boolean = isSystemInDarkTheme(),
+        dynamicColor: Boolean = true,
+        content: @Composable () -> Unit
+) {
+    // Dynamic color is available on Android 12+
+    val colorScheme =
+            when {
+                dynamicColor && Build.VERSION.SDK_INT >= Build.VERSION_CODES.S -> {
+                    val context = LocalContext.current
+                    if (darkTheme) dynamicDarkColorScheme(context)
+                    else dynamicLightColorScheme(context)
+                }
+                darkTheme -> DarkColors
+                else -> LightColors
+            }
+
+    MaterialTheme(colorScheme = colorScheme, typography = Typography, content = content)
+}
+
+/** Helper function to set the night mode for the app */
+fun setAppNightMode(isNightMode: Boolean) {
+    AppCompatDelegate.setDefaultNightMode(
+            if (isNightMode) AppCompatDelegate.MODE_NIGHT_YES else AppCompatDelegate.MODE_NIGHT_NO
+    )
+}
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/theme/ThemeColorPalatte.kt b/app/src/main/java/com/quick/browser/presentation/ui/theme/ThemeColorPalatte.kt
new file mode 100644
index 0000000..ce00290
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/theme/ThemeColorPalatte.kt
@@ -0,0 +1,41 @@
+package com.quick.browser.presentation.ui.theme
+
+import android.content.Context
+import androidx.annotation.ColorRes
+import androidx.core.content.ContextCompat
+import com.quick.browser.R
+
+/**
+ * Defines the available theme colors for the app
+ */
+enum class ThemeColor(
+    val colorName: String,
+    @ColorRes val primaryColorRes: Int,
+    @ColorRes val primaryDarkColorRes: Int,
+    @ColorRes val accentColorRes: Int
+) {
+    BLUE("Blue", R.color.blue_primary, R.color.blue_primary_dark, R.color.blue_accent),
+    GREEN("Green", R.color.green_primary, R.color.green_primary_dark, R.color.green_accent),
+    RED("Red", R.color.red_primary, R.color.red_primary_dark, R.color.red_accent),
+    PURPLE("Purple", R.color.purple_primary, R.color.purple_primary_dark, R.color.purple_accent),
+    LAVENDER("Lavender", R.color.lavender_primary, R.color.lavender_primary_dark, R.color.lavender_accent),
+    ORANGE("Orange", R.color.orange_primary, R.color.orange_primary_dark, R.color.orange_accent),
+    TEAL("Teal", R.color.teal_primary, R.color.teal_primary_dark, R.color.teal_accent),
+    PINK("Pink", R.color.pink_primary, R.color.pink_primary_dark, R.color.pink_accent),
+    INDIGO("Indigo", R.color.indigo_primary, R.color.indigo_primary_dark, R.color.indigo_accent),
+    CYAN("Cyan", R.color.cyan_primary, R.color.cyan_primary_dark, R.color.cyan_accent),
+    AMBER("Amber", R.color.amber_primary, R.color.amber_primary_dark, R.color.amber_accent),
+    DEEP_PURPLE("Deep Purple", R.color.deep_purple_primary, R.color.deep_purple_primary_dark, R.color.deep_purple_accent),
+    LIGHT_BLUE("Light Blue", R.color.light_blue_primary, R.color.light_blue_primary_dark, R.color.light_blue_accent);
+
+    companion object {
+        fun fromName(name: String): ThemeColor {
+            return values().find { it.colorName.equals(name, ignoreCase = true) } ?: BLUE
+        }
+
+        fun getColorHex(context: Context, @ColorRes colorRes: Int): String {
+            val color = ContextCompat.getColor(context, colorRes)
+            return String.format("#%06X", 0xFFFFFF and color)
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/presentation/ui/theme/Typography.kt b/app/src/main/java/com/quick/browser/presentation/ui/theme/Typography.kt
new file mode 100644
index 0000000..7f6a213
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/presentation/ui/theme/Typography.kt
@@ -0,0 +1,81 @@
+package com.quick.browser.presentation.ui.theme
+
+import androidx.compose.material3.Typography
+import androidx.compose.ui.text.TextStyle
+import androidx.compose.ui.text.font.FontFamily
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.unit.sp
+
+/**
+ * Typography definitions for the Quick Browser application
+ *
+ * This file defines the typography styles used throughout the application,
+ * following Material Design guidelines. It includes styles for various
+ * text elements such as headings, body text, and labels.
+ */
+val Typography = Typography(
+    /**
+     * Large body text style
+     *
+     * Used for primary body content
+     */
+    bodyLarge = TextStyle(
+        fontFamily = FontFamily.Default,
+        fontWeight = FontWeight.Normal,
+        fontSize = 16.sp,
+        lineHeight = 24.sp,
+        letterSpacing = 0.5.sp
+    ),
+    
+    /**
+     * Large title text style
+     *
+     * Used for section titles and prominent headings
+     */
+    titleLarge = TextStyle(
+        fontFamily = FontFamily.Default,
+        fontWeight = FontWeight.Normal,
+        fontSize = 22.sp,
+        lineHeight = 28.sp,
+        letterSpacing = 0.sp
+    ),
+    
+    /**
+     * Small label text style
+     *
+     * Used for small labels and captions
+     */
+    labelSmall = TextStyle(
+        fontFamily = FontFamily.Default,
+        fontWeight = FontWeight.Medium,
+        fontSize = 11.sp,
+        lineHeight = 16.sp,
+        letterSpacing = 0.5.sp
+    ),
+    
+    /**
+     * Medium body text style
+     *
+     * Used for secondary body content
+     */
+    bodyMedium = TextStyle(
+        fontFamily = FontFamily.Default,
+        fontWeight = FontWeight.Normal,
+        fontSize = 14.sp,
+        lineHeight = 20.sp,
+        letterSpacing = 0.25.sp
+    ),
+    
+    /**
+     * Medium headline text style
+     *
+     * Used for important headlines and page titles
+     */
+    headlineMedium = TextStyle(
+        fontFamily = FontFamily.Default,
+        fontWeight = FontWeight.SemiBold,
+        fontSize = 24.sp,
+        lineHeight = 32.sp,
+        letterSpacing = 0.sp
+    )
+)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/service/AdBlockUpdateService.kt b/app/src/main/java/com/quick/browser/service/AdBlockUpdateService.kt
new file mode 100644
index 0000000..990ce4b
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/service/AdBlockUpdateService.kt
@@ -0,0 +1,95 @@
+package com.quick.browser.service
+
+import android.app.Service
+import android.content.Intent
+import android.os.IBinder
+import com.quick.browser.utils.Logger
+import dagger.hilt.android.AndroidEntryPoint
+import kotlinx.coroutines.*
+import javax.inject.Inject
+
+/**
+ * Service to handle updating ad blocking rules in the background
+ */
+@AndroidEntryPoint
+class AdBlockUpdateService : Service() {
+
+    private val serviceJob = SupervisorJob()
+    private val serviceScope = CoroutineScope(Dispatchers.Default + serviceJob)
+
+    @Inject
+    lateinit var adBlockingService: AdBlockingService
+
+    @Inject
+    lateinit var settingsService: SettingsService
+
+    companion object {
+        private const val TAG = "AdBlockUpdateService"
+        private const val UPDATE_INTERVAL = 7 * 24 * 60 * 60 * 1000L // 7 days in milliseconds
+
+        // URLs for ad block filter lists
+        private const val EASYLIST_URL = "https://easylist.to/easylist/easylist.txt"
+        private const val EASYPRIVACY_URL = "https://easylist.to/easylist/easyprivacy.txt"
+    }
+
+    override fun onCreate() {
+        super.onCreate()
+        // AdBlockingService and SettingsService are already injected
+        // Start periodic update check
+        scheduleUpdates()
+    }
+
+    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
+        // Handle manual update request
+        if (intent?.action == "com.quick.browser.UPDATE_FILTERS") {
+            serviceScope.launch {
+                updateFilters()
+            }
+        }
+
+        return START_STICKY
+    }
+
+    override fun onBind(intent: Intent?): IBinder? {
+        return null
+    }
+
+    /**
+     * Schedule periodic updates of ad blocking rules
+     */
+    private fun scheduleUpdates() {
+        serviceScope.launch {
+            while (true) {
+                if (settingsService.isAdBlockEnabled()) {
+                    updateFilters()
+                }
+                delay(UPDATE_INTERVAL)
+            }
+        }
+    }
+
+    /**
+     * Update ad blocking filters from online sources
+     */
+    private suspend fun updateFilters() {
+        try {
+            Logger.d(TAG, "Updating ad blocking filters...")
+
+            // Try to update from EasyList
+            val success = adBlockingService.updateRulesFromUrl(EASYLIST_URL)
+
+            if (success) {
+                Logger.d(TAG, "Successfully updated ad blocking filters")
+            } else {
+                Logger.e(TAG, "Failed to update ad blocking filters")
+            }
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error updating ad blocking filters", e)
+        }
+    }
+
+    override fun onDestroy() {
+        super.onDestroy()
+        serviceScope.cancel()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/service/AdBlockingService.kt b/app/src/main/java/com/quick/browser/service/AdBlockingService.kt
new file mode 100644
index 0000000..17b8786
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/service/AdBlockingService.kt
@@ -0,0 +1,358 @@
+package com.quick.browser.service
+
+import android.content.Context
+import android.webkit.WebResourceResponse
+import com.quick.browser.domain.service.EncryptedPreferencesService
+import com.quick.browser.utils.Logger
+import com.quick.browser.utils.LoggingTag
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.withContext
+import java.io.ByteArrayInputStream
+import java.net.URL
+import java.util.concurrent.ConcurrentHashMap
+
+/**
+ * AdBlocker utility to block ads and trackers
+ *
+ * This service provides functionality to block advertisements and tracking
+ * requests based on predefined rules and user-configurable lists. It maintains
+ * in-memory caches for performance and supports domain whitelisting/blacklisting.
+ *
+ * @param context The application context
+ * @param encryptedPrefs The encrypted preferences service for storing user configurations
+ */
+class AdBlockingService(private val context: Context, private val encryptedPrefs: EncryptedPreferencesService) : LoggingTag {
+
+    private val adServerHosts = HashSet<String>()
+    private val cachedResults = ConcurrentHashMap<String, Boolean>()
+    private val whitelistedDomains = HashSet<String>()
+    private val blacklistedDomains = HashSet<String>()
+
+    init {
+        // Load ad blocking rules from preferences or default list
+        loadRules()
+        loadWhitelist()
+        loadBlacklist()
+    }
+
+    companion object {
+        private const val PREFS_AD_SERVERS = "ad_servers"
+        private const val PREFS_WHITELIST = "whitelist_domains"
+        private const val PREFS_BLACKLIST = "blacklist_domains"
+
+        // Empty response to return for blocked requests
+        private val EMPTY_RESPONSE = WebResourceResponse(
+            "text/plain",
+            "UTF-8",
+            ByteArrayInputStream("".toByteArray())
+        )
+    }
+
+    /**
+     * Check if a request should be blocked
+     *
+     * @param url The URL of the request to check
+     * @return A WebResourceResponse if the request should be blocked, null otherwise
+     */
+    fun shouldBlockRequest(url: String): WebResourceResponse? {
+        return runCatching {
+            // Quick check for common non-ad resources to improve performance
+            if (url.endsWith(".css") || url.endsWith(".png") ||
+                url.endsWith(".jpg") || url.endsWith(".jpeg") ||
+                url.endsWith(".gif") || url.endsWith(".svg") ||
+                url.endsWith(".woff") || url.endsWith(".woff2") ||
+                url.endsWith(".ttf")
+            ) {
+                return@runCatching null
+            }
+
+            // Skip data URLs and other non-standard protocols that can't be parsed
+            if (!url.startsWith("http://") && !url.startsWith("https://")) {
+                return@runCatching null
+            }
+
+            val hostname = URL(url).host ?: return@runCatching null
+
+            // Check domain whitelist/blacklist first
+            val domain = extractDomain(url)
+            if (isWhitelisted(domain)) return@runCatching null
+            if (isBlacklisted(domain)) return@runCatching EMPTY_RESPONSE
+
+            // Use cached result if available
+            cachedResults[hostname]?.let {
+                return@runCatching if (it) EMPTY_RESPONSE else null
+            }
+
+            // Check for common ad patterns in URL
+            if (url.contains("/ads/") || url.contains("/ad/") || url.contains("/analytics/") ||
+                url.contains("/tracker/") || url.contains("/pixel/") || url.contains("/banner/")
+            ) {
+                cachedResults[hostname] = true
+                return@runCatching EMPTY_RESPONSE
+            }
+
+            val shouldBlock = adServerHosts.contains(hostname)
+            cachedResults[hostname] = shouldBlock
+
+            if (shouldBlock) EMPTY_RESPONSE else null
+        }.onFailure { e ->
+            Logger.e(tag, "Error checking if URL should be blocked: $url", e)
+        }.getOrNull()
+    }
+
+    /**
+     * Add a host to the blocked list
+     *
+     * @param host The host to add to the blocked list
+     */
+    fun addBlockedHost(host: String) {
+        adServerHosts.add(host)
+        saveRules()
+    }
+
+    /**
+     * Remove a host from the blocked list
+     *
+     * @param host The host to remove from the blocked list
+     */
+    fun removeBlockedHost(host: String) {
+        adServerHosts.remove(host)
+        cachedResults.remove(host)
+        saveRules()
+    }
+
+    /**
+     * Add a domain to the whitelist (never blocked)
+     *
+     * @param domain The domain to add to the whitelist
+     */
+    fun addToWhitelist(domain: String) {
+        whitelistedDomains.add(domain)
+        saveWhitelist()
+    }
+
+    /**
+     * Remove a domain from the whitelist
+     *
+     * @param domain The domain to remove from the whitelist
+     */
+    fun removeFromWhitelist(domain: String) {
+        whitelistedDomains.remove(domain)
+        saveWhitelist()
+    }
+
+    /**
+     * Add a domain to the blacklist (always blocked)
+     *
+     * @param domain The domain to add to the blacklist
+     */
+    fun addToBlacklist(domain: String) {
+        blacklistedDomains.add(domain)
+        saveBlacklist()
+    }
+
+    /**
+     * Remove a domain from the blacklist
+     *
+     * @param domain The domain to remove from the blacklist
+     */
+    fun removeFromBlacklist(domain: String) {
+        blacklistedDomains.remove(domain)
+        saveBlacklist()
+    }
+
+    /**
+     * Check if a domain is whitelisted
+     *
+     * @param domain The domain to check
+     * @return True if the domain is whitelisted, false otherwise
+     */
+    fun isWhitelisted(domain: String): Boolean {
+        return whitelistedDomains.contains(domain)
+    }
+
+    /**
+     * Check if a domain is blacklisted
+     *
+     * @param domain The domain to check
+     * @return True if the domain is blacklisted, false otherwise
+     */
+    fun isBlacklisted(domain: String): Boolean {
+        return blacklistedDomains.contains(domain)
+    }
+
+    /**
+     * Get list of blocked hosts
+     *
+     * @return A set of blocked hosts
+     */
+    fun getBlockedHosts(): Set<String> {
+        return adServerHosts.toSet()
+    }
+
+    /**
+     * Get whitelisted domains
+     *
+     * @return A set of whitelisted domains
+     */
+    fun getWhitelist(): Set<String> {
+        return whitelistedDomains.toSet()
+    }
+
+    /**
+     * Get blacklisted domains
+     *
+     * @return A set of blacklisted domains
+     */
+    fun getBlacklist(): Set<String> {
+        return blacklistedDomains.toSet()
+    }
+
+    /**
+     * Update ad blocking rules from a URL
+     *
+     * @param url The URL to fetch ad blocking rules from
+     * @return True if the rules were updated successfully, false otherwise
+     */
+    suspend fun updateRulesFromUrl(url: String): Boolean =
+        try {
+            withContext(Dispatchers.IO) {
+                val connection = URL(url).openConnection()
+                connection.connectTimeout = 10000
+                connection.readTimeout = 10000
+
+                val inputStream = connection.getInputStream()
+                val rulesText = inputStream.bufferedReader().use { it.readText() }
+                val hosts = parseHosts(rulesText)
+
+                if (hosts.isNotEmpty()) {
+                    adServerHosts.clear()
+                    adServerHosts.addAll(hosts)
+                    saveRules()
+                    cachedResults.clear()
+                    true
+                } else {
+                    false
+                }
+            }
+        } catch (e: Exception) {
+            Logger.e(tag, "Failed to update ad blocking rules from $url", e)
+            false
+        }
+
+    /**
+     * Load ad blocking rules from preferences
+     */
+    private fun loadRules() {
+        val serializedRules = encryptedPrefs.getStringSet(PREFS_AD_SERVERS, null) ?: getDefaultRules()
+        adServerHosts.clear()
+        adServerHosts.addAll(serializedRules)
+    }
+
+    /**
+     * Save ad blocking rules to preferences
+     */
+    private fun saveRules() {
+        encryptedPrefs.putStringSet(PREFS_AD_SERVERS, adServerHosts)
+    }
+
+    /**
+     * Load whitelist from preferences
+     */
+    private fun loadWhitelist() {
+        val whitelist = encryptedPrefs.getStringSet(PREFS_WHITELIST, null) ?: emptySet()
+        whitelistedDomains.clear()
+        whitelistedDomains.addAll(whitelist)
+    }
+
+    /**
+     * Save whitelist to preferences
+     */
+    private fun saveWhitelist() {
+        encryptedPrefs.putStringSet(PREFS_WHITELIST, whitelistedDomains)
+    }
+
+    /**
+     * Load blacklist from preferences
+     */
+    private fun loadBlacklist() {
+        val blacklist = encryptedPrefs.getStringSet(PREFS_BLACKLIST, null) ?: emptySet()
+        blacklistedDomains.clear()
+        blacklistedDomains.addAll(blacklist)
+    }
+
+    /**
+     * Save blacklist to preferences
+     */
+    private fun saveBlacklist() {
+        encryptedPrefs.putStringSet(PREFS_BLACKLIST, blacklistedDomains)
+    }
+
+    /**
+     * Parse hosts from a text file
+     *
+     * @param rulesText The text content to parse
+     * @return A set of host names
+     */
+    private fun parseHosts(rulesText: String): Set<String> {
+        val hosts = HashSet<String>()
+        rulesText.lineSequence()
+            .map { it.trim() }
+            .filter { it.isNotEmpty() && !it.startsWith("#") }
+            .forEach { line ->
+                val parts = line.split(Regex("\\s+"))
+                if (parts.size >= 2 && parts[0] == "127.0.0.1") {
+                    hosts.add(parts[1])
+                } else if (parts.size == 1 && parts[0].isNotBlank()) {
+                    hosts.add(parts[0])
+                }
+            }
+        return hosts
+    }
+
+    /**
+     * Extract domain from URL
+     *
+     * @param url The URL to extract domain from
+     * @return The domain name
+     */
+    private fun extractDomain(url: String): String {
+        return runCatching {
+            // Skip data URLs and other non-standard protocols that can't be parsed
+            if (!url.startsWith("http://") && !url.startsWith("https://")) {
+                return@runCatching ""
+            }
+            
+            val uri = URL(url)
+            val host = uri.host ?: return@runCatching ""
+            if (host.startsWith("www.")) host.substring(4) else host
+        }.getOrDefault("")
+    }
+
+    /**
+     * Get default ad blocking rules
+     *
+     * @return A set of default ad blocking rules
+     */
+    private fun getDefaultRules(): Set<String> {
+        return setOf(
+            "ad.doubleclick.net",
+            "googleads.g.doubleclick.net",
+            "pagead2.googlesyndication.com",
+            "pagead.googlesyndication.com",
+            "tpc.googlesyndication.com",
+            "pubads.g.doubleclick.net",
+            "securepubads.g.doubleclick.net",
+            "www.googleadservices.com",
+            "adservice.google.com",
+            "adfarm.mediaplex.com",
+            "ads.facebook.com",
+            "an.facebook.com",
+            "analytics.twitter.com",
+            "ads.twitter.com",
+            "ads.yahoo.com",
+            "ads.yap.yahoo.com",
+            "adserver.yahoo.com"
+        )
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/service/AuthenticationService.kt b/app/src/main/java/com/quick/browser/service/AuthenticationService.kt
new file mode 100644
index 0000000..4ce3b0c
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/service/AuthenticationService.kt
@@ -0,0 +1,282 @@
+package com.quick.browser.service
+
+import android.content.Context
+import android.content.Intent
+import android.net.Uri
+import android.webkit.WebView
+import androidx.browser.customtabs.CustomTabColorSchemeParams
+import androidx.browser.customtabs.CustomTabsIntent
+import androidx.core.net.toUri
+import com.quick.browser.utils.Logger
+
+/**
+ * Handles authentication URLs by launching them in Chrome Custom Tabs
+ * instead of WebView to comply with Google's security policies.
+ */
+class AuthenticationService {
+    companion object {
+        private const val TAG = "AuthenticationHandler"
+        
+        // List of domains that require secure authentication handling
+        private val AUTH_DOMAINS = listOf(
+            "accounts.google.com",
+            "accounts.google.",  // Catch all regional Google account domains
+            "myaccount.google.com",
+            "google.com/accounts",
+            "signin.aws.amazon.com",
+            "login.live.com",
+            "login.yahoo.com",
+            "login.microsoftonline.com",
+            "api.login.yahoo.com",
+            "login.facebook.com",
+            "facebook.com/login",
+            "login.microsoft.com",
+            "twitter.com/oauth",
+            "api.twitter.com/oauth",
+            "github.com/login",
+            "id.apple.com",
+            "appleid.apple.com",
+            "auth.amazon.com",
+            "linkedin.com/oauth",
+            "instagram.com/oauth",
+            "pinterest.com/oauth",
+            "oauth.reddit.com",
+            "discord.com/oauth2",
+            "slack.com/oauth"
+        )
+
+        // List of URL patterns that indicate OAuth or authentication flows
+        private val AUTH_PATTERNS = listOf(
+            "/oauth",
+            "/oauth2",
+            "/login",
+            "/signin",
+            "/auth",
+            "/authenticate",
+            "/authorize",
+            "/accounts/",
+            "/ServiceLogin",
+            "/signin/oauth",
+            "/o/oauth2/",
+            "/gsi/",
+            "/v3/signin"
+        )
+        
+        // List of query parameters that indicate authentication
+        private val AUTH_QUERY_PARAMS = listOf(
+            "oauth",
+            "login",
+            "signin",
+            "auth",
+            "authenticate",
+            "token",
+            "code",
+            "client_id",
+            "redirect_uri",
+            "response_type",
+            "scope"
+        )
+
+        /**
+         * Checks if the given URL is an authentication URL that should be handled securely
+         * @param url The URL to check
+         * @return True if the URL should be handled with Custom Tabs, false otherwise
+         */
+        fun isAuthenticationUrl(url: String): Boolean {
+            try {
+                val uri = url.toUri()
+                val host = uri.host?.lowercase() ?: return false
+                val path = uri.path?.lowercase() ?: ""
+                val query = uri.query?.lowercase() ?: ""
+                
+                // Always handle Google authentication URLs with Custom Tabs
+                if (host.contains("google") && 
+                    (host.contains("account") || path.contains("account") || 
+                     path.contains("auth") || path.contains("login") || 
+                     path.contains("signin") || query.contains("auth"))) {
+                    Logger.d(TAG, "Google authentication URL detected: $url")
+                    return true
+                }
+                
+                // Check if the domain is in our list of authentication domains
+                for (authDomain in AUTH_DOMAINS) {
+                    if (host.contains(authDomain)) {
+                        Logger.d(TAG, "Authentication domain detected: $host in URL: $url")
+                        return true
+                    }
+                }
+                
+                // Check if the URL path contains authentication patterns
+                for (pattern in AUTH_PATTERNS) {
+                    if (path.contains(pattern)) {
+                        Logger.d(TAG, "Authentication path pattern detected: $pattern in URL: $url")
+                        return true
+                    }
+                }
+                
+                // Check query parameters for authentication indicators
+                if (query.isNotEmpty()) {
+                    for (param in AUTH_QUERY_PARAMS) {
+                        if (query.contains(param)) {
+                            Logger.d(TAG, "Authentication query parameter detected: $param in URL: $url")
+                            return true
+                        }
+                    }
+                }
+                
+                return false
+            } catch (e: Exception) {
+                Logger.e(TAG, "Error checking if URL is authentication URL", e)
+                return false
+            }
+        }
+
+        // Define a custom scheme for redirecting back to our app
+        private const val REDIRECT_SCHEME = "quick_browser"
+        private const val REDIRECT_HOST = "auth-callback"
+        
+        /**
+         * Opens the given URL in Chrome Custom Tabs
+         * @param context The context to use for launching the Custom Tab
+         * @param url The URL to open
+         * @param originalBubbleId The ID of the bubble that initiated the authentication (can be null)
+         * @return True if the URL was opened successfully, false otherwise
+         */
+        fun openInCustomTab(context: Context, url: String, originalBubbleId: String? = null): Boolean {
+            return try {
+                Logger.d(TAG, "Opening URL in Custom Tab: $url")
+                
+                // Create a redirect URI for returning to our app
+                val redirectUri = Uri.Builder()
+                    .scheme(REDIRECT_SCHEME)
+                    .authority(REDIRECT_HOST)
+                    .appendQueryParameter("original_url", url)
+                    .appendQueryParameter("bubble_id", originalBubbleId ?: "")
+                    .build()
+                
+                Logger.d(TAG, "Redirect URI: $redirectUri")
+                
+                // First try with Custom Tabs
+                val customTabsBuilder = CustomTabsIntent.Builder()
+                    .setShowTitle(true)
+                    .setUrlBarHidingEnabled(false)
+                    .setShareState(CustomTabsIntent.SHARE_STATE_ON)
+                
+                // Add color customization
+                val colorScheme = CustomTabColorSchemeParams.Builder()
+                    .build()
+                customTabsBuilder.setDefaultColorSchemeParams(colorScheme)
+                
+                val customTabsIntent = customTabsBuilder.build()
+                
+                // Add flags to ensure it opens in a new task
+                customTabsIntent.intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
+                
+                // Launch the URL in Custom Tabs
+                customTabsIntent.launchUrl(context, url.toUri())
+                Logger.d(TAG, "Successfully launched URL in Custom Tab: $url")
+                true
+            } catch (e: Exception) {
+                Logger.e(TAG, "Error opening Custom Tab, falling back to system browser", e)
+                
+                // Fallback to system browser if Custom Tabs fails
+                try {
+                    val intent = Intent(Intent.ACTION_VIEW, url.toUri())
+                    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
+                    context.startActivity(intent)
+                    Logger.d(TAG, "Successfully launched URL in system browser: $url")
+                    true
+                } catch (e2: Exception) {
+                    Logger.e(TAG, "Error opening URL in system browser", e2)
+                    false
+                }
+            }
+        }
+
+        /**
+         * Handles the authentication return from Chrome Custom Tabs.
+         * @param uri The callback URI received after authentication.
+         * @return True if the authentication was handled successfully, false otherwise.
+         */
+        fun handleAuthenticationReturn(uri: Uri): Boolean {
+            return try {
+                Logger.d(TAG, "Processing authentication return URI: $uri")
+
+                // Validate the URI (e.g., check scheme, host, and required parameters)
+                if (uri.scheme != REDIRECT_SCHEME || uri.host != REDIRECT_HOST) {
+                    Logger.e(TAG, "Invalid authentication callback URI")
+                    return false
+                }
+
+                // Extract parameters (e.g., token or state)
+                val token = uri.getQueryParameter("token")
+                val state = uri.getQueryParameter("state")
+
+                if (token.isNullOrEmpty()) {
+                    Logger.e(TAG, "Missing token in authentication callback")
+                    return false
+                }
+
+                // Notify the WebView to reload or update its state
+                val webView = getWebViewForState(state)
+                if (webView != null) {
+                    val redirectUrl = uri.getQueryParameter("redirect_url") ?: "https://example.com"
+                    webView.post {
+                        webView.loadUrl(redirectUrl)
+                    }
+                    Logger.d(TAG, "WebView updated with redirect URL: $redirectUrl")
+                } else {
+                    Logger.w(TAG, "No WebView found for state: $state")
+                }
+
+                true
+            } catch (e: Exception) {
+                Logger.e(TAG, "Error handling authentication return: ${e.message}", e)
+                false
+            }
+        }
+
+        private val webViewStateMap = mutableMapOf<String, WebView>()
+
+        /**
+         * Associates a WebView with a specific state.
+         * This should be called when initiating an authentication flow.
+         * @param state The state parameter used to track the WebView.
+         * @param webView The WebView instance to associate with the state.
+         */
+        fun associateWebViewWithState(state: String, webView: WebView) {
+            webViewStateMap[state] = webView
+            Logger.d(TAG, "Associated WebView with state: $state")
+        }
+
+        /**
+         * Retrieves the WebView associated with the given state.
+         * @param state The state parameter from the authentication callback.
+         * @return The WebView instance or null if not found.
+         */
+        private fun getWebViewForState(state: String?): WebView? {
+            if (state == null) {
+                Logger.w(TAG, "State is null, cannot retrieve WebView")
+                return null
+            }
+
+            val webView = webViewStateMap[state]
+            if (webView != null) {
+                Logger.d(TAG, "Retrieved WebView for state: $state")
+            } else {
+                Logger.w(TAG, "No WebView found for state: $state")
+            }
+            return webView
+        }
+
+        /**
+         * Removes the WebView associated with a specific state.
+         * This should be called after the authentication flow is complete.
+         * @param state The state parameter used to track the WebView.
+         */
+        fun removeWebViewForState(state: String) {
+            webViewStateMap.remove(state)
+            Logger.d(TAG, "Removed WebView association for state: $state")
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/service/BubbleDisplayManager.kt b/app/src/main/java/com/quick/browser/service/BubbleDisplayManager.kt
new file mode 100644
index 0000000..e96bf35
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/service/BubbleDisplayManager.kt
@@ -0,0 +1,193 @@
+package com.quick.browser.service
+
+import android.content.Context
+import android.content.Intent
+import android.graphics.PixelFormat
+import android.view.Gravity
+import android.view.WindowManager
+import androidx.lifecycle.LifecycleCoroutineScope
+import com.quick.browser.domain.model.Bubble
+import com.quick.browser.presentation.ui.browser.BubbleView
+import com.quick.browser.presentation.ui.browser.OfflineArticleSaver
+import com.quick.browser.utils.Constants
+import com.quick.browser.utils.ErrorHandler
+import com.quick.browser.utils.Logger
+import kotlinx.coroutines.flow.collectLatest
+import kotlinx.coroutines.launch
+
+/**
+ * BubbleDisplayManager handles the display of bubbles on screen.
+ * It observes the BubbleViewModel and creates, updates, or removes BubbleViews accordingly.
+ */
+class BubbleDisplayManager(
+    private val context: Context,
+    private val bubbleService: BubbleService,
+    private val lifecycleScope: LifecycleCoroutineScope,
+    private val settingsService: SettingsService,
+    private val adBlockingService: AdBlockingService,
+    private val summarizationService: SummarizationService,
+    private val offlineArticleSaver: OfflineArticleSaver
+) {
+    private val TAG = "BubbleDisplayManager"
+    private val windowManager = context.getSystemService(Context.WINDOW_SERVICE) as WindowManager
+    private val bubbleViews = mutableMapOf<String, BubbleView>()
+    private var bubbles: List<Bubble> = emptyList()
+
+    init {
+        observeBubbles()
+    }
+
+    /**
+     * Observes the bubbles StateFlow from BubbleViewModel and updates the UI accordingly.
+     */
+    private fun observeBubbles() {
+        lifecycleScope.launch {
+            bubbleService.getBubblesFlow().collectLatest { bubbleMap ->
+                val bubbles = bubbleMap.values.toList()
+                Logger.d(TAG, "Bubbles updated: ${bubbles.size}")
+                updateBubbleViews(bubbles)
+            }
+        }
+    }
+
+    /**
+     * Updates the bubble views based on the current list of bubbles.
+     * Adds new bubbles, updates existing ones, and removes bubbles that are no longer present.
+     */
+    private fun updateBubbleViews(bubbles: List<Bubble>) {
+        // Store the current list of bubbles for reference
+        this.bubbles = bubbles
+
+        // Track current bubble IDs
+        val currentBubbleIds = bubbles.map { it.id }.toSet()
+
+        // Remove bubbles that are no longer in the list
+        val bubbleIdsToRemove = bubbleViews.keys.filter { it !in currentBubbleIds }
+        bubbleIdsToRemove.forEach { removeBubbleView(it) }
+
+        // Add or update bubbles
+        bubbles.forEach { bubble ->
+            if (bubble.id in bubbleViews) {
+                // Update existing bubble
+                updateBubbleView(bubble)
+            } else {
+                // Add new bubble
+                addBubbleView(bubble)
+            }
+        }
+
+        Logger.d(TAG, "Updated bubble views: ${bubbleViews.size} views for ${bubbles.size} bubbles")
+    }
+
+    /**
+     * Adds a new bubble view to the window.
+     */
+    private fun addBubbleView(bubble: Bubble) {
+        ErrorHandler.handleExceptions(
+            tag = TAG,
+            errorMessage = "Error adding bubble view for ${bubble.id}",
+            showError = true,
+            context = context,
+            block = {
+                Logger.d(TAG, "Adding bubble view: ${bubble.id} with URL: ${bubble.url}")
+
+                // Create bubble view
+                val bubbleView = BubbleView(
+                    context = context,
+                    bubbleId = bubble.id,
+                    url = bubble.url,
+                    settingsService = settingsService,
+                    adBlockingService = adBlockingService,
+                    summarizationService = summarizationService,
+                    offlineArticleSaver = offlineArticleSaver
+                )
+
+                // Set close listener
+                bubbleView.setOnCloseListener {
+                    // Remove the bubble view
+                    removeBubbleView(bubble.id)
+
+                    // Also notify the BubbleViewModel to remove the bubble
+                    val intent = Intent(context, BubbleService::class.java).apply {
+                        action = Constants.ACTION_CLOSE_BUBBLE
+                        putExtra(Constants.EXTRA_BUBBLE_ID, bubble.id)
+                    }
+                    context.startService(intent)
+                }
+
+                // Create layout params
+                val layoutParams = createLayoutParams()
+
+                // Add view to window manager
+                windowManager.addView(bubbleView, layoutParams)
+
+                // Store reference to bubble view
+                bubbleViews[bubble.id] = bubbleView
+
+                Logger.d(TAG, "Bubble view added successfully: ${bubble.id}")
+            }
+        )
+    }
+
+    /**
+     * Updates an existing bubble view.
+     */
+    private fun updateBubbleView(bubble: Bubble) {
+        val bubbleView = bubbleViews[bubble.id] ?: return
+
+        // Update bubble view properties
+        try {
+            // Update favicon if available
+            bubble.favicon?.let { bubbleView.updateFavicon(it) }
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error updating bubble view", e)
+        }
+    }
+
+    /**
+     * Removes a bubble view from the window.
+     */
+    private fun removeBubbleView(bubbleId: String) {
+        try {
+            val bubbleView = bubbleViews[bubbleId] ?: return
+
+            // Remove view from window manager
+            windowManager.removeView(bubbleView)
+
+            // Remove reference to bubble view
+            bubbleViews.remove(bubbleId)
+
+            Logger.d(TAG, "Bubble view removed: $bubbleId")
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error removing bubble view", e)
+        }
+    }
+
+    /**
+     * Creates layout parameters for the bubble view.
+     */
+    private fun createLayoutParams(): WindowManager.LayoutParams {
+        val type =
+            WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY
+
+        return WindowManager.LayoutParams(
+            WindowManager.LayoutParams.WRAP_CONTENT,
+            WindowManager.LayoutParams.WRAP_CONTENT,
+            type,
+            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or
+                    WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS,
+            PixelFormat.TRANSLUCENT
+        ).apply {
+            gravity = Gravity.TOP or Gravity.START
+            x = 50
+            y = 900
+        }
+    }
+
+    /**
+     * Cleans up all bubble views.
+     */
+    fun cleanup() {
+        bubbleViews.keys.toList().forEach { removeBubbleView(it) }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/service/BubbleManager.kt b/app/src/main/java/com/quick/browser/service/BubbleManager.kt
new file mode 100644
index 0000000..4ba80a5
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/service/BubbleManager.kt
@@ -0,0 +1,88 @@
+package com.quick.browser.service
+
+import android.content.Context
+import androidx.lifecycle.LifecycleCoroutineScope
+import com.quick.browser.domain.model.Bubble
+import com.quick.browser.utils.Logger
+import kotlinx.coroutines.flow.MutableStateFlow
+import kotlinx.coroutines.flow.StateFlow
+import kotlinx.coroutines.launch
+import java.util.*
+
+/**
+ * BubbleManager is responsible for managing the lifecycle and operations of browser bubbles. It
+ * handles creation, updating, and removal of bubbles, as well as their state management.
+ */
+class BubbleManager(
+    private val context: Context,
+    private val lifecycleScope: LifecycleCoroutineScope
+) {
+    private val _bubbles = MutableStateFlow<Map<String, Bubble>>(emptyMap())
+    val bubbles: StateFlow<Map<String, Bubble>> = _bubbles
+
+    companion object {
+        private const val TAG = "BubbleManager"
+    }
+
+    fun createOrUpdateBubbleWithNewUrl(url: String, existingBubbleId: String? = null) {
+        lifecycleScope.launch {
+            Logger.d(TAG, "Creating new bubble for URL: $url, existing bubble ID: $existingBubbleId")
+
+            try {
+                val currentBubbles = _bubbles.value.toMutableMap()
+
+                // Use the provided bubble ID or generate a new UUID
+                val bubbleId = existingBubbleId ?: UUID.randomUUID().toString()
+
+                // Create new bubble with unique ID
+                val newBubble = Bubble(
+                    id = bubbleId,
+                    url = url,
+                    title = url,
+                )
+
+                // Add to current bubbles map
+                currentBubbles[bubbleId] = newBubble
+
+                // Update state
+                _bubbles.value = currentBubbles
+
+                Logger.d(TAG, "Successfully created new bubble with ID: $bubbleId for URL: $url")
+            } catch (e: Exception) {
+                Logger.e(TAG, "Error creating bubble for URL: $url", e)
+            }
+        }
+    }
+
+    fun removeBubble(bubbleId: String) {
+        lifecycleScope.launch {
+            // Only remove the specified bubble, not all bubbles
+            val currentBubbles = _bubbles.value.toMutableMap()
+            currentBubbles.remove(bubbleId)
+            _bubbles.value = currentBubbles
+
+            Logger.d(TAG, "Removed bubble with ID: $bubbleId")
+        }
+    }
+
+    fun getAllBubbles(): List<Bubble> {
+        return _bubbles.value.values.toList()
+    }
+
+    fun cleanup() {
+        lifecycleScope.launch {
+            // Get all bubble IDs
+            val bubbleIds = _bubbles.value.keys.toList()
+
+            // Remove each bubble
+            bubbleIds.forEach { bubbleId ->
+                removeBubble(bubbleId)
+            }
+
+            // Clear the bubbles map
+            _bubbles.value = emptyMap()
+
+            Logger.d(TAG, "Cleaned up all bubbles")
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/service/BubbleNotificationManager.kt b/app/src/main/java/com/quick/browser/service/BubbleNotificationManager.kt
new file mode 100644
index 0000000..c216a37
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/service/BubbleNotificationManager.kt
@@ -0,0 +1,93 @@
+package com.quick.browser.service
+
+import android.app.Notification
+import android.app.NotificationChannel
+import android.app.NotificationManager
+import android.app.PendingIntent
+import android.content.Context
+import android.content.Intent
+import android.os.Build
+import androidx.core.app.NotificationCompat
+import com.quick.browser.R
+import com.quick.browser.presentation.ui.main.MainActivity
+
+/**
+ * BubbleNotificationManager handles the creation and management of notifications
+ * for the bubble service. It ensures the service can run in the foreground and
+ * provides user interaction points through notifications.
+ */
+class BubbleNotificationManager(private val context: Context) {
+    private val notificationManager: NotificationManager = 
+        context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
+
+    companion object {
+        const val NOTIFICATION_ID = 1
+        private const val CHANNEL_ID = "quick_browser_channel"
+        private const val CHANNEL_NAME = "Quick Browser Service"
+        private const val CHANNEL_DESCRIPTION = "Keeps Quick Browser bubbles running"
+    }
+
+    init {
+        createNotificationChannel()
+    }
+
+    /**
+     * Creates the notification channel for Android O and above
+     */
+    private fun createNotificationChannel() {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            val channel = NotificationChannel(
+                CHANNEL_ID,
+                CHANNEL_NAME,
+                NotificationManager.IMPORTANCE_LOW
+            ).apply {
+                description = CHANNEL_DESCRIPTION
+                setShowBadge(false)
+            }
+            notificationManager.createNotificationChannel(channel)
+        }
+    }
+
+    /**
+     * Creates a notification for the foreground service
+     * @return Notification object
+     */
+    fun createNotification(): Notification {
+        val intent = Intent(context, MainActivity::class.java).apply {
+            flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK
+        }
+
+        val pendingIntent = PendingIntent.getActivity(
+            context,
+            0,
+            intent,
+            PendingIntent.FLAG_IMMUTABLE
+        )
+
+        return NotificationCompat.Builder(context, CHANNEL_ID)
+            .setSmallIcon(R.drawable.ic_web_page)
+            .setContentTitle("Quick Browser Active")
+            .setContentText("Browser bubbles are active")
+            .setOngoing(true)
+            .setCategory(NotificationCompat.CATEGORY_SERVICE)
+            .setPriority(NotificationCompat.PRIORITY_LOW)
+            .setContentIntent(pendingIntent)
+            .build()
+    }
+
+    /**
+     * Updates the active notification with new content
+     * @param title New notification title
+     * @param content New notification content
+     */
+    fun updateNotification(title: String, content: String) {
+        val notification = NotificationCompat.Builder(context, CHANNEL_ID)
+            .setSmallIcon(R.drawable.ic_web_page)
+            .setContentTitle(title)
+            .setContentText(content)
+            .setOngoing(true)
+            .build()
+
+        notificationManager.notify(NOTIFICATION_ID, notification)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/service/BubbleService.kt b/app/src/main/java/com/quick/browser/service/BubbleService.kt
new file mode 100755
index 0000000..605aa44
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/service/BubbleService.kt
@@ -0,0 +1,212 @@
+package com.quick.browser.service
+
+import android.content.Intent
+import androidx.lifecycle.LifecycleService
+import androidx.lifecycle.lifecycleScope
+import com.quick.browser.QuickBrowserApplication
+import com.quick.browser.presentation.ui.browser.BubbleIntentProcessor
+import com.quick.browser.presentation.ui.browser.OfflineArticleSaver
+import com.quick.browser.utils.Constants
+import com.quick.browser.utils.Logger
+import dagger.hilt.android.AndroidEntryPoint
+import kotlinx.coroutines.SupervisorJob
+import javax.inject.Inject
+
+/**
+ * BubbleService is the core service responsible for managing floating bubbles in the Quick Browser.
+ *
+ * This service coordinates between different managers to handle bubble lifecycle, positioning,
+ * and user interactions. It runs in the foreground to ensure bubbles remain visible and responsive.
+ *
+ * Key responsibilities:
+ * - Service lifecycle management
+ * - Intent processing
+ * - Manager coordination
+ * - State preservation
+ */
+@AndroidEntryPoint
+class BubbleService : LifecycleService() {
+
+    private val serviceJob = SupervisorJob()
+    private lateinit var bubbleManager: BubbleManager
+    private lateinit var notificationManager: BubbleNotificationManager
+    private lateinit var bubbleDisplayManager: BubbleDisplayManager
+    private lateinit var intentProcessor: BubbleIntentProcessor
+
+    // Remove ViewModel usage from Service
+    // private lateinit var bubbleViewModel: BubbleViewModel
+    // private lateinit var webViewModel: WebViewModel
+
+    @Inject
+    lateinit var historyRepository: com.quick.browser.domain.repository.HistoryRepository
+
+    @Inject
+    lateinit var settingsService: SettingsService
+
+    @Inject
+    lateinit var adBlockingService: AdBlockingService
+
+    @Inject
+    lateinit var summarizationService: SummarizationService
+
+    @Inject
+    lateinit var offlineArticleSaver: OfflineArticleSaver
+
+    /**
+     * Create or update a bubble with a new URL
+     *
+     * @param url The URL to load in the bubble
+     * @param existingBubbleId The ID of an existing bubble to update, or null to create a new bubble
+     */
+    fun createOrUpdateBubbleWithNewUrl(url: String, existingBubbleId: String? = null) {
+        bubbleManager.createOrUpdateBubbleWithNewUrl(url, existingBubbleId)
+    }
+
+    /**
+     * Remove a bubble
+     *
+     * @param bubbleId The ID of the bubble to remove
+     */
+    fun removeBubble(bubbleId: String) {
+        bubbleManager.removeBubble(bubbleId)
+    }
+
+    /**
+     * Get all bubbles
+     *
+     * @return A list of all bubbles
+     */
+    fun getAllBubbles() = bubbleManager.getAllBubbles()
+    
+    /**
+     * Get a flow of all bubbles
+     *
+     * @return A flow of lists of bubbles
+     */
+    fun getBubblesFlow() = bubbleManager.bubbles
+
+    companion object {
+        private const val TAG = "BubbleService"
+        @Volatile
+        private var isServiceRunning = false
+
+        // Action constants
+        @JvmStatic
+        val ACTION_START_BUBBLE = Constants.ACTION_CREATE_BUBBLE
+        @JvmStatic
+        val ACTION_OPEN_URL = Constants.ACTION_OPEN_URL
+        @JvmStatic
+        val ACTION_CLOSE_BUBBLE = Constants.ACTION_CLOSE_BUBBLE
+        @JvmStatic
+        val ACTION_TOGGLE_BUBBLES = Constants.ACTION_TOGGLE_BUBBLES
+        @JvmStatic
+        val ACTION_ACTIVATE_BUBBLE = Constants.ACTION_ACTIVATE_BUBBLE
+
+        // Extra keys
+        const val EXTRA_X = "extra_x"
+        const val EXTRA_Y = "extra_y"
+
+        /**
+         * Check if the service is running
+         *
+         * @return True if the service is running, false otherwise
+         */
+        fun isRunning(): Boolean = isServiceRunning
+    }
+
+    /**
+     * Called when the service is created
+     */
+    override fun onCreate() {
+        super.onCreate()
+        Logger.d(TAG, "BubbleService onCreate()")
+
+        try {
+            isServiceRunning = true
+
+            // Initialize managers
+            val app = application as QuickBrowserApplication
+            app.bubbleService = this
+
+            bubbleManager =
+                BubbleManager(
+                    context = this,
+                    lifecycleScope = lifecycleScope
+                )
+
+            notificationManager = BubbleNotificationManager(this)
+
+            bubbleDisplayManager = BubbleDisplayManager(
+                context = this,
+                bubbleService = this,
+                lifecycleScope = lifecycleScope,
+                settingsService = settingsService,
+                adBlockingService = adBlockingService,
+                summarizationService = summarizationService,
+                offlineArticleSaver = offlineArticleSaver
+            )
+
+            intentProcessor =
+                BubbleIntentProcessor(
+                    context = this,
+                    bubbleService = this,
+                    historyRepository = historyRepository,
+                    lifecycleScope = lifecycleScope
+                )
+            // Start foreground service with notification
+            try {
+                startForeground(
+                    BubbleNotificationManager.NOTIFICATION_ID,
+                    notificationManager.createNotification()
+                )
+            } catch (e: Exception) {
+                // If notification fails (e.g., permission not granted), log but continue
+                Logger.e(TAG, "Could not show notification, but service will continue", e)
+                // Service will still run, but might be killed by system in low memory situations
+            }
+
+            Logger.d(TAG, "Service initialized successfully")
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error in onCreate", e)
+            isServiceRunning = false
+        }
+    }
+
+    /**
+     * Called when the service receives a start command
+     *
+     * @param intent The intent that started the service
+     * @param flags Additional data about the start request
+     * @param startId A unique integer ID for this start request
+     * @return The restart behavior of the service
+     */
+    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
+        super.onStartCommand(intent, flags, startId)
+        Logger.d(TAG, "onStartCommand | Received intent: ${intent?.action}, data: ${intent?.extras}")
+        intent?.let { intentProcessor.processIntent(it) }
+        return START_STICKY
+    }
+
+    /**
+     * Called when the service is destroyed
+     */
+    override fun onDestroy() {
+        super.onDestroy()
+        isServiceRunning = false
+        bubbleDisplayManager.cleanup()
+        bubbleManager.cleanup()
+        serviceJob.cancel()
+
+        // Remove reference from application
+        try {
+            val app = application as QuickBrowserApplication
+            if (app.bubbleService === this) {
+                app.bubbleService = null
+            }
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error clearing service reference", e)
+        }
+
+        Logger.d(TAG, "BubbleService onDestroy()")
+    }
+}
diff --git a/app/src/main/java/com/quick/browser/service/ReadabilityService.kt b/app/src/main/java/com/quick/browser/service/ReadabilityService.kt
new file mode 100644
index 0000000..8fe8589
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/service/ReadabilityService.kt
@@ -0,0 +1,299 @@
+package com.quick.browser.service
+
+import android.content.Context
+import com.quick.browser.utils.ErrorHandler
+import org.jsoup.Jsoup
+import org.jsoup.nodes.Document
+import org.jsoup.nodes.Element
+import java.net.URI
+
+/**
+ * Utility for extracting readable content from web pages
+ *
+ * This service provides functionality to extract clean, readable content from web pages
+ * by removing advertisements, navigation elements, and other non-content elements.
+ * It uses the Jsoup library to parse HTML and apply content extraction algorithms.
+ *
+ * @param context The application context
+ */
+class ReadabilityService(private val context: Context) {
+    
+    /**
+     * Data class representing readable content extracted from a web page
+     *
+     * @property title The title of the page
+     * @property content The main content of the page
+     * @property byline The author or byline information
+     * @property excerpt A brief excerpt of the content
+     * @property siteName The name of the website
+     * @property publishDate The publication date of the content
+     */
+    data class ReadableContent(
+        val title: String,
+        val content: String,
+        val byline: String? = null,
+        val excerpt: String? = null,
+        val siteName: String? = null,
+        val publishDate: String? = null
+    )
+    
+    companion object {
+        private const val TAG = "ReadabilityExtractor"
+        private const val TIMEOUT_MS = 10000
+        private const val USER_AGENT = "Mozilla/5.0 (Linux; Android 10; Mobile) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.110 Mobile Safari/537.36"
+    }
+    
+    /**
+     * Extract readable content from a URL
+     *
+     * @param url The URL to extract content from
+     * @return The readable content or null if extraction failed
+     */
+    suspend fun extractFromUrl(url: String): ReadableContent? =
+        ErrorHandler.handleExceptions(
+            tag = TAG,
+            errorMessage = "Failed to extract content from URL: $url"
+        ) {
+            val doc = Jsoup.connect(url)
+                .userAgent(USER_AGENT)
+                .header("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8")
+                .header("Accept-Language", "en-US,en;q=0.5")
+                .header("Accept-Encoding", "gzip, deflate, br")
+                .header("Connection", "keep-alive")
+                .header("Upgrade-Insecure-Requests", "1")
+                .header("Sec-Fetch-Dest", "document")
+                .header("Sec-Fetch-Mode", "navigate")
+                .header("Sec-Fetch-Site", "none")
+                .header("Cache-Control", "max-age=0")
+                .timeout(TIMEOUT_MS)
+                .get()
+            extractFromDocument(doc, url)
+        }
+    
+    /**
+     * Extract readable content from HTML string
+     *
+     * @param html The HTML content to extract from
+     * @param baseUrl The base URL for resolving relative links
+     * @return The readable content or null if extraction failed
+     */
+    suspend fun extractFromHtml(html: String, baseUrl: String): ReadableContent? =
+        ErrorHandler.handleExceptions(
+            tag = TAG,
+            errorMessage = "Failed to extract content from HTML"
+        ) {
+            val doc = Jsoup.parse(html, baseUrl)
+            extractFromDocument(doc, baseUrl)
+        }
+    
+    /**
+     * Extract content from a Jsoup Document
+     *
+     * @param doc The Jsoup Document to extract content from
+     * @param url The URL of the document (used for metadata extraction)
+     * @return The readable content
+     */
+    private fun extractFromDocument(doc: Document, url: String): ReadableContent {
+        // Get the title of the page
+        val title = doc.title() ?: "Untitled"
+        
+        // Try to find the main content
+        val mainContent = findMainContent(doc)
+        
+        // Get the byline if available
+        val byline = findByline(doc)
+        
+        // Get an excerpt of the content
+        val excerpt = createExcerpt(mainContent)
+        
+        // Get the site name
+        val siteName = findSiteName(doc, url)
+        
+        // Get publish date if available
+        val publishDate = findPublishDate(doc)
+        
+        return ReadableContent(
+            title = title,
+            content = mainContent,
+            byline = byline,
+            excerpt = excerpt,
+            siteName = siteName,
+            publishDate = publishDate
+        )
+    }
+    
+    /**
+     * Find the main content of the page
+     *
+     * @param doc The Jsoup Document to search
+     * @return The main content as a formatted string
+     */
+    private fun findMainContent(doc: Document): String {
+        // Remove unnecessary elements
+        doc.select("script, style, iframe, ins, nav, footer, header, aside, .nav, .menu, .advertisement, .ads, .ad, .banner").remove()
+        
+        // Try to find the main article element
+        val articleElements = listOf(
+            doc.select("article").first(),
+            doc.select(".post-content").first(),
+            doc.select(".entry-content").first(),
+            doc.select(".content").first(),
+            doc.select(".post").first(),
+            doc.select("#content").first(),
+            doc.select("main").first(),
+            doc.select(".main").first()
+        ).filterNotNull()
+        
+        if (articleElements.isNotEmpty()) {
+            return cleanAndFormatContent(articleElements.first())
+        }
+        
+        // If no article element found, try to find paragraphs
+        val paragraphs = doc.select("p")
+        if (paragraphs.isNotEmpty()) {
+            // Find element containing the most paragraphs
+            val parents = HashMap<Element, Int>()
+            
+            paragraphs.forEach { p ->
+                val parent = p.parent()
+                if (parent != null) {
+                    parents[parent] = (parents[parent] ?: 0) + 1
+                }
+            }
+            
+            val bestParent = parents.entries.maxByOrNull { it.value }?.key
+            
+            return if (bestParent != null) {
+                cleanAndFormatContent(bestParent)
+            } else {
+                val sbContent = StringBuilder()
+                paragraphs.forEach { p ->
+                    if (p.text().length > 50) {  // Only include substantial paragraphs
+                        sbContent.append("<p>").append(p.text()).append("</p>")
+                    }
+                }
+                sbContent.toString()
+            }
+        }
+        
+        // If all else fails, just return the body text
+        return doc.body().text()
+    }
+    
+    /**
+     * Clean and format content for readability
+     *
+     * @param element The element containing the content to clean
+     * @return The cleaned and formatted content
+     */
+    private fun cleanAndFormatContent(element: Element): String {
+        // Make a copy to avoid modifying the original
+        val clone = element.clone()
+        
+        // Remove unwanted elements
+        clone.select("script, style, iframe, ins, nav, footer, header, aside, .nav, .menu, .advertisement, .ads, .ad, .banner").remove()
+        
+        // Remove empty paragraphs
+        clone.select("p").forEach { p ->
+            if (p.text().isBlank()) {
+                p.remove()
+            }
+        }
+        
+        // If it has good HTML structure, keep it, otherwise format as paragraphs
+        return if (clone.select("p, h1, h2, h3, h4, h5, h6, blockquote, ul, ol").isNotEmpty()) {
+            clone.html()
+        } else {
+            val text = clone.text()
+            val paragraphs = text.split("(?<=\\.)\\s+".toRegex())
+            val sbContent = StringBuilder()
+            paragraphs.forEach { p ->
+                if (p.isNotEmpty()) {
+                    sbContent.append("<p>").append(p).append("</p>")
+                }
+            }
+            sbContent.toString()
+        }
+    }
+    
+    /**
+     * Find the author/byline in the article
+     *
+     * @param doc The Jsoup Document to search
+     * @return The author/byline or null if not found
+     */
+    private fun findByline(doc: Document): String? {
+        val possibleBylineElements = listOf(
+            doc.select(".byline").first(),
+            doc.select(".author").first(),
+            doc.select("[rel=author]").first(),
+            doc.select("[itemprop=author]").first(),
+            doc.select(".entry-author").first()
+        ).filterNotNull()
+        
+        return possibleBylineElements.firstOrNull()?.text()
+    }
+    
+    /**
+     * Create a brief excerpt from the content
+     *
+     * @param content The content to create an excerpt from
+     * @return A brief excerpt or null if content is empty
+     */
+    private fun createExcerpt(content: String): String? {
+        // Parse the HTML content
+        val doc = Jsoup.parse(content)
+        
+        // Get the text and limit to first 200 characters
+        val text = doc.text()
+        return if (text.length > 200) {
+            text.substring(0, 200) + "..."
+        } else {
+            text
+        }
+    }
+    
+    /**
+     * Find the site name
+     *
+     * @param doc The Jsoup Document to search
+     * @param url The URL of the document
+     * @return The site name or null if not found
+     */
+    private fun findSiteName(doc: Document, url: String): String? {
+        // Try to find site name from meta tags
+        val metaSiteName = doc.select("meta[property=og:site_name]").first()?.attr("content")
+        if (!metaSiteName.isNullOrBlank()) {
+            return metaSiteName
+        }
+        
+        // Try to extract from URL
+        return try {
+            val uri = URI(url)
+            val host = uri.host
+            host.substringAfterLast('.', host)
+                .substringAfterLast('.', host)
+        } catch (e: Exception) {
+            null
+        }
+    }
+    
+    /**
+     * Find the publish date
+     *
+     * @param doc The Jsoup Document to search
+     * @return The publish date or null if not found
+     */
+    private fun findPublishDate(doc: Document): String? {
+        val possibleDateElements = listOf(
+            doc.select("meta[property=article:published_time]").first()?.attr("content"),
+            doc.select("meta[name=publish-date]").first()?.attr("content"),
+            doc.select("time").first()?.attr("datetime"),
+            doc.select(".date").first()?.text(),
+            doc.select(".published").first()?.text(),
+            doc.select(".timestamp").first()?.text()
+        ).filterNotNull().firstOrNull { it.isNotBlank() }
+        
+        return possibleDateElements
+    }
+}
diff --git a/app/src/main/java/com/quick/browser/service/SettingsService.kt b/app/src/main/java/com/quick/browser/service/SettingsService.kt
new file mode 100644
index 0000000..a98e245
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/service/SettingsService.kt
@@ -0,0 +1,453 @@
+package com.quick.browser.service
+
+import android.content.Context
+import android.content.SharedPreferences
+import android.graphics.Typeface
+import androidx.preference.PreferenceManager
+import com.quick.browser.domain.service.EncryptedPreferencesService
+import com.quick.browser.presentation.ui.theme.ThemeColor
+
+/**
+ * Manages application settings and user preferences
+ */
+class SettingsService(context: Context, private val encryptedPrefs: EncryptedPreferencesService) {
+
+    private val preferences: SharedPreferences = PreferenceManager.getDefaultSharedPreferences(context)
+    private val prefs: SharedPreferences = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
+    private val appContext = context.applicationContext
+
+    companion object {
+        // Keys for preferences
+        private const val KEY_DARK_THEME = "pref_dark_theme"
+        private const val KEY_SEPIA_THEME = "pref_sepia_theme"
+        private const val KEY_TEXT_SIZE = "pref_text_size"
+        private const val KEY_FONT_FAMILY = "pref_font_family"
+        private const val KEY_BUBBLE_SIZE = "pref_bubble_size"
+        private const val KEY_BUBBLE_OPACITY = "pref_bubble_opacity"
+        private const val KEY_SAVE_POSITION = "pref_save_bubble_position"
+        private const val KEY_AD_BLOCKING = "pref_ad_blocking"
+        private const val KEY_JAVASCRIPT = "pref_javascript"
+        private const val KEY_SAVE_HISTORY = "pref_save_history"
+        private const val KEY_ENCRYPT_PAGES = "pref_encrypt_pages"
+        private const val KEY_PAGE_SNAPSHOT = "pref_page_snapshot"
+        private const val KEY_BACKGROUND_SYNC = "pref_background_sync"
+        private const val KEY_TTS_SPEECH_RATE = "pref_tts_speech_rate"
+        private const val KEY_TTS_PITCH = "pref_tts_pitch"
+        private const val KEY_BUBBLE_SAVE_POSITION = "pref_bubble_save_position"
+        private const val KEY_BUBBLE_POSITION_PREFIX = "bubble_position_"
+        private const val PREFS_NAME = "bubble_settings"
+        private const val KEY_EXPANDED_BUBBLE_SIZE = "expanded_bubble_size"
+        private const val KEY_THEME_COLOR = "pref_theme_color"
+        private const val KEY_DYNAMIC_COLOR = "pref_dynamic_color"
+        private const val KEY_NIGHT_MODE = "pref_night_mode"
+        private const val KEY_LAST_SHARED_URL = "last_shared_url"
+        private const val KEY_SHOW_URL_BAR = "pref_show_url_bar"
+
+        // Reader mode settings keys
+        private const val KEY_READER_FONT_SIZE = "pref_reader_font_size"
+        private const val KEY_READER_BACKGROUND = "pref_reader_background"
+        private const val KEY_READER_TEXT_ALIGN = "pref_reader_text_align"
+
+        // Default values
+        private const val DEFAULT_TEXT_SIZE = 16
+        private const val DEFAULT_BUBBLE_SIZE = 100 // Percentage of default size
+        private const val DEFAULT_BUBBLE_OPACITY = 90 // Percentage of opacity
+        private const val DEFAULT_EXPANDED_BUBBLE_SIZE = 64
+        private const val DEFAULT_THEME_COLOR = "Blue"
+        private const val DEFAULT_DYNAMIC_COLOR = true
+        private const val DEFAULT_SHOW_URL_BAR = true
+
+        // Reader mode default values
+        private const val DEFAULT_READER_FONT_SIZE = 18
+        private const val DEFAULT_READER_BACKGROUND = "white"
+        private const val DEFAULT_READER_TEXT_ALIGN = "left"
+
+        // Font family options
+        const val FONT_FAMILY_DEFAULT = "default"
+        const val FONT_FAMILY_SERIF = "serif"
+        const val FONT_FAMILY_SANS_SERIF = "sans-serif"
+        const val FONT_FAMILY_MONOSPACE = "monospace"
+
+        // Theme options
+        const val THEME_LIGHT = 0
+        const val THEME_DARK = 1
+        const val THEME_SEPIA = 2
+
+        // Reader mode background options
+        const val READER_BG_WHITE = "white"
+        const val READER_BG_SEPIA = "sepia"
+        const val READER_BG_DARK = "dark"
+
+        // Reader mode text alignment options
+        const val READER_ALIGN_LEFT = "left"
+        const val READER_ALIGN_CENTER = "center"
+        const val READER_ALIGN_RIGHT = "right"
+        const val READER_ALIGN_JUSTIFY = "justify"
+
+        // Accessibility settings
+        private const val KEY_AUTO_FONT_SIZE = "pref_auto_font_size"
+        private const val KEY_MANUAL_FONT_SIZE = "pref_manual_font_size"
+        private const val DEFAULT_MANUAL_FONT_SIZE = 16
+
+
+    }
+
+    /**
+     * Dark theme settings
+     */
+    fun isDarkThemeEnabled(): Boolean {
+        return preferences.getBoolean(KEY_DARK_THEME, false)
+    }
+
+    fun setDarkThemeEnabled(enabled: Boolean) {
+        preferences.edit().putBoolean(KEY_DARK_THEME, enabled).apply()
+
+        // If dark theme is enabled, make sure sepia is disabled
+        if (enabled && isSepiaThemeEnabled()) {
+            setSepiaThemeEnabled(false)
+        }
+    }
+
+    /**
+     * Sepia theme settings
+     */
+    fun isSepiaThemeEnabled(): Boolean {
+        return preferences.getBoolean(KEY_SEPIA_THEME, false)
+    }
+
+    fun setSepiaThemeEnabled(enabled: Boolean) {
+        preferences.edit().putBoolean(KEY_SEPIA_THEME, enabled).apply()
+
+        // If sepia theme is enabled, make sure dark is disabled
+        if (enabled && isDarkThemeEnabled()) {
+            setDarkThemeEnabled(false)
+        }
+    }
+
+    /**
+     * Get the current theme as an integer value
+     */
+    fun getCurrentTheme(): Int {
+        return when {
+            isDarkThemeEnabled() -> THEME_DARK
+            isSepiaThemeEnabled() -> THEME_SEPIA
+            else -> THEME_LIGHT
+        }
+    }
+
+    /**
+     * Set the current theme using an integer value
+     */
+    fun setCurrentTheme(theme: Int) {
+        when (theme) {
+            THEME_DARK -> {
+                setDarkThemeEnabled(true)
+                setSepiaThemeEnabled(false)
+            }
+
+            THEME_SEPIA -> {
+                setDarkThemeEnabled(false)
+                setSepiaThemeEnabled(true)
+            }
+
+            else -> {
+                setDarkThemeEnabled(false)
+                setSepiaThemeEnabled(false)
+            }
+        }
+    }
+
+    /**
+     * Text size settings
+     */
+    fun getTextSize(): Int {
+        return preferences.getInt(KEY_TEXT_SIZE, DEFAULT_TEXT_SIZE)
+    }
+
+    fun setTextSize(size: Int) {
+        preferences.edit().putInt(KEY_TEXT_SIZE, size).apply()
+    }
+
+    /**
+     * Font family settings
+     */
+    fun getFontFamily(): String {
+        return preferences.getString(KEY_FONT_FAMILY, FONT_FAMILY_DEFAULT) ?: FONT_FAMILY_DEFAULT
+    }
+
+    fun setFontFamily(fontFamily: String) {
+        preferences.edit().putString(KEY_FONT_FAMILY, fontFamily).apply()
+    }
+
+    /**
+     * Get the Typeface for the current font family
+     */
+    fun getTypeface(): Typeface {
+        return when (getFontFamily()) {
+            FONT_FAMILY_SERIF -> Typeface.SERIF
+            FONT_FAMILY_SANS_SERIF -> Typeface.SANS_SERIF
+            FONT_FAMILY_MONOSPACE -> Typeface.MONOSPACE
+            else -> Typeface.DEFAULT
+        }
+    }
+
+    /**
+     * Bubble size settings
+     */
+    fun getBubbleSize(): Float {
+        return preferences.getInt(KEY_BUBBLE_SIZE, DEFAULT_BUBBLE_SIZE).toFloat() / 100f
+    }
+
+    fun setBubbleSize(size: Float) {
+        val sizeInt = (size * 100).toInt()
+        preferences.edit().putInt(KEY_BUBBLE_SIZE, sizeInt).apply()
+    }
+
+    /**
+     * Bubble opacity settings
+     */
+    fun getBubbleOpacity(): Int {
+        return preferences.getInt(KEY_BUBBLE_OPACITY, DEFAULT_BUBBLE_OPACITY)
+    }
+
+    fun setBubbleOpacity(opacity: Int) {
+        preferences.edit().putInt(KEY_BUBBLE_OPACITY, opacity).apply()
+    }
+
+    /**
+     * Save bubble position settings
+     */
+    fun getSavePosition(): Boolean {
+        return preferences.getBoolean(KEY_SAVE_POSITION, true)
+    }
+
+    fun setSavePosition(save: Boolean) {
+        preferences.edit().putBoolean(KEY_SAVE_POSITION, save).apply()
+    }
+
+    /**
+     * Ad blocking settings
+     */
+    fun isAdBlockEnabled(): Boolean {
+        return preferences.getBoolean(KEY_AD_BLOCKING, true)
+    }
+
+    fun setAdBlockEnabled(enabled: Boolean) {
+        preferences.edit().putBoolean(KEY_AD_BLOCKING, enabled).apply()
+    }
+
+    /**
+     * JavaScript settings
+     */
+    fun isJavaScriptEnabled(): Boolean {
+        return preferences.getBoolean(KEY_JAVASCRIPT, true)
+    }
+
+    fun setJavaScriptEnabled(enabled: Boolean) {
+        preferences.edit().putBoolean(KEY_JAVASCRIPT, enabled).apply()
+    }
+
+    /**
+     * Save browsing history settings
+     */
+    fun isSaveHistoryEnabled(): Boolean {
+        return preferences.getBoolean(KEY_SAVE_HISTORY, true)
+    }
+
+    fun setSaveHistoryEnabled(enabled: Boolean) {
+        preferences.edit().putBoolean(KEY_SAVE_HISTORY, enabled).apply()
+    }
+
+    /**
+     * Encrypt saved pages settings
+     */
+    fun isEncryptionEnabled(): Boolean {
+        return preferences.getBoolean(KEY_ENCRYPT_PAGES, false)
+    }
+
+    fun setEncryptionEnabled(enabled: Boolean) {
+        preferences.edit().putBoolean(KEY_ENCRYPT_PAGES, enabled).apply()
+    }
+
+    /**
+     * Check if secure mode is enabled
+     *
+     * Secure mode combines several security settings to provide enhanced protection
+     *
+     * @return Boolean indicating if secure mode is enabled
+     */
+    fun isSecureMode(): Boolean {
+        // Consider secure mode enabled if encryption is enabled or JavaScript is disabled
+        return isEncryptionEnabled() || !isJavaScriptEnabled()
+    }
+
+    /**
+     * Page snapshot settings
+     */
+    fun isPageSnapshotEnabled(): Boolean {
+        return preferences.getBoolean(KEY_PAGE_SNAPSHOT, true)
+    }
+
+    fun setPageSnapshotEnabled(enabled: Boolean) {
+        preferences.edit().putBoolean(KEY_PAGE_SNAPSHOT, enabled).apply()
+    }
+
+    /**
+     * Background sync settings
+     */
+    fun isBackgroundSyncEnabled(): Boolean {
+        return preferences.getBoolean(KEY_BACKGROUND_SYNC, false)
+    }
+
+    fun setBackgroundSyncEnabled(enabled: Boolean) {
+        preferences.edit().putBoolean(KEY_BACKGROUND_SYNC, enabled).apply()
+    }
+
+    /**
+     * Theme color settings
+     */
+    fun getThemeColor(): String {
+        return preferences.getString(KEY_THEME_COLOR, DEFAULT_THEME_COLOR) ?: DEFAULT_THEME_COLOR
+    }
+
+    fun setThemeColor(colorName: String) {
+        preferences.edit().putString(KEY_THEME_COLOR, colorName).apply()
+    }
+
+    /**
+     * Get the primary color resource ID for the current theme
+     */
+    fun getCurrentThemePrimaryColorResId(): Int {
+        val themeColor = ThemeColor.fromName(getThemeColor())
+        return themeColor.primaryColorRes
+    }
+
+    /**
+     * Get the primary dark color resource ID for the current theme
+     */
+    fun getCurrentThemePrimaryDarkColorResId(): Int {
+        val themeColor = ThemeColor.fromName(getThemeColor())
+        return themeColor.primaryDarkColorRes
+    }
+
+    /**
+     * Get the accent color resource ID for the current theme
+     */
+    fun getCurrentThemeAccentColorResId(): Int {
+        val themeColor = ThemeColor.fromName(getThemeColor())
+        return themeColor.accentColorRes
+    }
+
+    /**
+     * Dynamic color settings
+     */
+    fun isDynamicColorEnabled(): Boolean {
+        return preferences.getBoolean(KEY_DYNAMIC_COLOR, DEFAULT_DYNAMIC_COLOR)
+    }
+
+    fun setDynamicColorEnabled(enabled: Boolean) {
+        preferences.edit().putBoolean(KEY_DYNAMIC_COLOR, enabled).apply()
+    }
+
+    /**
+     * Night mode settings
+     */
+    fun isNightModeEnabled(): Boolean {
+        return preferences.getBoolean(KEY_NIGHT_MODE, false)
+    }
+
+    fun setNightModeEnabled(enabled: Boolean) {
+        preferences.edit().putBoolean(KEY_NIGHT_MODE, enabled).apply()
+    }
+
+    /**
+     * Show URL bar settings
+     */
+    fun isUrlBarVisible(): Boolean {
+        return preferences.getBoolean(KEY_SHOW_URL_BAR, DEFAULT_SHOW_URL_BAR)
+    }
+
+    fun setUrlBarVisible(visible: Boolean) {
+        preferences.edit().putBoolean(KEY_SHOW_URL_BAR, visible).apply()
+    }
+
+    /**
+     * Save the last shared URL (used when permission is requested during link sharing)
+     */
+    fun saveLastSharedUrl(url: String) {
+        encryptedPrefs.putString(KEY_LAST_SHARED_URL, url)
+    }
+
+    /**
+     * Get the last shared URL
+     */
+    fun getLastSharedUrl(): String? {
+        return encryptedPrefs.getString(KEY_LAST_SHARED_URL, null)
+    }
+
+    /**
+     * Clear the last shared URL
+     */
+    fun clearLastSharedUrl() {
+        encryptedPrefs.remove(KEY_LAST_SHARED_URL)
+    }
+
+    // ============== READER MODE SETTINGS ==============
+
+    /**
+     * Reader mode font size settings
+     */
+    fun getReaderFontSize(): Int {
+        return preferences.getInt(KEY_READER_FONT_SIZE, DEFAULT_READER_FONT_SIZE)
+    }
+
+    fun setReaderFontSize(size: Int) {
+        preferences.edit().putInt(KEY_READER_FONT_SIZE, size).apply()
+    }
+
+    /**
+     * Reader mode background color settings
+     */
+    fun getReaderBackground(): String {
+        return preferences.getString(KEY_READER_BACKGROUND, DEFAULT_READER_BACKGROUND) ?: DEFAULT_READER_BACKGROUND
+    }
+
+    fun setReaderBackground(background: String) {
+        preferences.edit().putString(KEY_READER_BACKGROUND, background).apply()
+    }
+
+    /**
+     * Reader mode text alignment settings
+     */
+    fun getReaderTextAlign(): String {
+        return preferences.getString(KEY_READER_TEXT_ALIGN, DEFAULT_READER_TEXT_ALIGN) ?: DEFAULT_READER_TEXT_ALIGN
+    }
+
+    fun setReaderTextAlign(alignment: String) {
+        preferences.edit().putString(KEY_READER_TEXT_ALIGN, alignment).apply()
+    }
+
+    // ============== ACCESSIBILITY SETTINGS ==============
+
+    /**
+     * Automatic font size settings
+     */
+    fun isAutoFontSizeEnabled(): Boolean {
+        return preferences.getBoolean(KEY_AUTO_FONT_SIZE, true)
+    }
+
+    fun setAutoFontSizeEnabled(enabled: Boolean) {
+        preferences.edit().putBoolean(KEY_AUTO_FONT_SIZE, enabled).apply()
+    }
+
+    /**
+     * Manual font size settings
+     */
+    fun getManualFontSize(): Int {
+        return preferences.getInt(KEY_MANUAL_FONT_SIZE, DEFAULT_MANUAL_FONT_SIZE)
+    }
+
+    fun setManualFontSize(size: Int) {
+        preferences.edit().putInt(KEY_MANUAL_FONT_SIZE, size).apply()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/service/SummarizationService.kt b/app/src/main/java/com/quick/browser/service/SummarizationService.kt
new file mode 100644
index 0000000..f23c383
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/service/SummarizationService.kt
@@ -0,0 +1,337 @@
+package com.quick.browser.service
+
+import android.content.Context
+import com.quick.browser.utils.Logger
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.withContext
+import opennlp.tools.sentdetect.SentenceDetectorME
+import opennlp.tools.sentdetect.SentenceModel
+import opennlp.tools.tokenize.SimpleTokenizer
+import org.jsoup.Jsoup
+import java.io.InputStream
+import java.util.concurrent.atomic.AtomicBoolean
+
+/**
+ * Manager class for handling article summarization using NLP techniques
+ */
+class SummarizationService constructor(private val context: Context) {
+
+    companion object {
+        private const val TAG = "SummarizationManager"
+        private const val MAX_SUMMARY_POINTS = 10
+        private const val MIN_SUMMARY_POINTS = 5
+    }
+
+    private val tokenizer = SimpleTokenizer.INSTANCE
+    private var sentenceDetector: SentenceDetectorME? = null
+    private val isModelLoaded = AtomicBoolean(false)
+
+    /**
+     * Loads the sentence detection model
+     */
+    private suspend fun loadModel(): Boolean = withContext(Dispatchers.IO) {
+        try {
+            if (isModelLoaded.get()) {
+                return@withContext true
+            }
+
+            // Try to load the sentence model from assets
+            try {
+                val inputStream: InputStream = context.assets.open("en-sent.bin")
+                // Add a check to ensure the input stream is valid
+                if (inputStream.available() <= 0) {
+                    Logger.e(TAG, "Sentence model file is empty or not accessible")
+                    return@withContext false
+                }
+                
+                val model = SentenceModel(inputStream)
+                sentenceDetector = SentenceDetectorME(model)
+                isModelLoaded.set(true)
+                Logger.d(TAG, "Sentence model loaded successfully")
+                return@withContext true
+            } catch (e: Exception) {
+                Logger.e(TAG, "Error loading sentence model, using fallback", e)
+                // We'll use a simple regex-based approach as fallback
+                return@withContext false
+            }
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error in loadModel", e)
+            return@withContext false
+        }
+    }
+
+    /**
+     * Extracts the main content from a webpage
+     */
+    private suspend fun extractContent(html: String): String = withContext(Dispatchers.Default) {
+        try {
+            val doc = Jsoup.parse(html)
+
+            // Remove non-content elements
+            doc.select("script, style, nav, footer, header, aside, .ads, .comments, .sidebar, iframe, form, button")
+                .remove()
+
+            // Remove all elements with common ad-related class names
+            doc.select("[class*=ad], [class*=Ad], [class*=AD], [class*=banner], [class*=popup], [class*=cookie], [id*=ad], [id*=Ad]")
+                .remove()
+
+            // Remove social media widgets
+            doc.select("[class*=social], [class*=share], [class*=follow], [class*=subscribe]").remove()
+
+            // Remove all HTML attributes that might contain unwanted information
+            doc.select("*").forEach { element ->
+                val tagName = element.tagName()
+                if (tagName != "body" && tagName != "article" && tagName != "p" && tagName != "div") {
+                    val text = element.text()
+                    element.clearAttributes()
+                    element.text(text)
+                }
+            }
+
+            // Get the main content
+            // Clean up the text
+            return@withContext doc.text()
+                .replace("\\s+".toRegex(), " ")
+                .replace("\\[[0-9]+\\]".toRegex(), "") // Remove citation numbers like [1], [2], etc.
+                .replace("\\(https?://[^\\s]+\\)".toRegex(), "") // Remove URLs in parentheses
+                .trim()
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error extracting content", e)
+            return@withContext ""
+        }
+    }
+
+    /**
+     * Splits text into sentences using the loaded model or a fallback approach
+     */
+    private fun detectSentences(text: String): Array<String> {
+        return try {
+            if (isModelLoaded.get() && sentenceDetector != null) {
+                // Use the OpenNLP sentence detector
+                sentenceDetector!!.sentDetect(text)
+            } else {
+                // Fallback: simple regex-based sentence detection
+                // Limit the number of sentences to prevent performance issues
+                text.split("(?<=[.!?])\\s+".toRegex())
+                    .take(MAX_SUMMARY_POINTS * 10) // Limit to a reasonable number
+                    .toTypedArray()
+            }
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error in sentence detection, using fallback", e)
+            // Fallback to regex-based approach in case of any error
+            text.split("(?<=[.!?])\\s+".toRegex())
+                .take(MAX_SUMMARY_POINTS * 10) // Limit to a reasonable number
+                .toTypedArray()
+        }
+    }
+
+    /**
+     * Calculates the importance score of a sentence based on various factors
+     */
+    private fun calculateSentenceScore(sentence: String, position: Int, totalSentences: Int): Double {
+        // Position score - sentences at the beginning are often more important
+        val positionScore = 1.0 - (position.toDouble() / totalSentences.coerceAtLeast(1))
+
+        // Length score - very short or very long sentences are less likely to be good summary points
+        val lengthScore = when {
+            sentence.length < 20 -> 0.3
+            sentence.length in 20..50 -> 0.7
+            sentence.length in 51..150 -> 1.0
+            sentence.length in 151..200 -> 0.7
+            else -> 0.4  // Penalize very long sentences more
+        }
+
+        // Word count score - sentences with more words often contain more information
+        val wordCount = tokenizer.tokenize(sentence).size
+        val wordCountScore = when {
+            wordCount < 5 -> 0.3
+            wordCount in 5..10 -> 0.7
+            wordCount in 11..20 -> 1.0
+            wordCount in 21..30 -> 0.7
+            else -> 0.4  // Penalize very wordy sentences
+        }
+
+        // Presence of numbers often indicates important facts
+        val containsNumbers = sentence.contains("\\d+".toRegex())
+        val numberScore = if (containsNumbers) 0.2 else 0.0
+
+        // Penalize sentences that might be incomplete or contain HTML artifacts
+        val htmlArtifactScore = if (
+            sentence.contains("<") ||
+            sentence.contains(">") ||
+            sentence.contains("&nbsp;") ||
+            sentence.contains("&lt;") ||
+            sentence.contains("&gt;") ||
+            sentence.contains("javascript:") ||
+            sentence.contains("\\{\\{".toRegex()) ||
+            sentence.contains("\\}\\}".toRegex()) ||
+            sentence.contains("undefined") ||
+            sentence.contains("null,") ||
+            sentence.contains("NaN")
+        ) -0.5 else 0.0
+
+        // Penalize sentences that are likely navigation or UI text
+        val navigationTextScore = if (
+            sentence.contains("click here", ignoreCase = true) ||
+            sentence.contains("read more", ignoreCase = true) ||
+            sentence.contains("learn more", ignoreCase = true) ||
+            sentence.contains("sign up", ignoreCase = true) ||
+            sentence.contains("log in", ignoreCase = true) ||
+            sentence.contains("subscribe", ignoreCase = true) ||
+            sentence.contains("cookie", ignoreCase = true) ||
+            sentence.contains("privacy policy", ignoreCase = true) ||
+            sentence.contains("terms of service", ignoreCase = true) ||
+            sentence.contains("copyright", ignoreCase = true)
+        ) -0.5 else 0.0
+
+        // Calculate final score
+        return positionScore * 0.4 +
+                lengthScore * 0.3 +
+                wordCountScore * 0.2 +
+                numberScore * 0.1 +
+                htmlArtifactScore +
+                navigationTextScore
+    }
+
+    /**
+     * Summarizes the given HTML content into bullet points
+     */
+    suspend fun summarizeContent(html: String): List<String> = withContext(Dispatchers.Default) {
+        try {
+            // Extract the main content from the HTML
+            val content = extractContent(html)
+            if (content.isBlank() || content.length < 100) {
+                Logger.d(TAG, "Content too short or empty")
+                return@withContext emptyList()
+            }
+
+            // Try to load the model, but continue with fallback if it fails
+            val modelLoaded = try {
+                loadModel()
+            } catch (e: Exception) {
+                Logger.e(TAG, "Error loading model, using fallback", e)
+                false
+            }
+
+            Logger.d(TAG, "Using extractive summarization" + if (modelLoaded) " with NLP model" else " (fallback)")
+
+            // Split the content into sentences
+            val sentences = detectSentences(content)
+                .filter { it.length > 20 && it.length < 300 } // Filter out very short or very long sentences
+                .take(MAX_SUMMARY_POINTS * 5) // Take more sentences to have a better selection
+                .take(200) // Limit to a reasonable number to prevent performance issues
+
+            if (sentences.isEmpty()) {
+                Logger.d(TAG, "No suitable sentences found")
+                return@withContext emptyList()
+            }
+
+            // Score sentences based on various factors
+            val scoredSentences = sentences.mapIndexed { index, sentence ->
+                val score = calculateSentenceScore(sentence, index, sentences.size)
+                Triple(sentence, score, index)
+            }
+
+            // Filter out sentences with negative scores (likely HTML artifacts or navigation text)
+            val filteredSentences = scoredSentences.filter { it.second > 0 }
+
+            if (filteredSentences.isEmpty()) {
+                Logger.d(TAG, "No sentences with positive scores found")
+                return@withContext emptyList()
+            }
+
+            // Sort by score and take top N
+            val summaryPoints = filteredSentences
+                .sortedByDescending { it.second }
+                .take(MAX_SUMMARY_POINTS * 2)
+                .sortedBy { it.third } // Sort back by original position
+                .map { it.first }
+                .take(MAX_SUMMARY_POINTS)
+                .filter { it.length > 20 }
+
+            // Ensure we have at least MIN_SUMMARY_POINTS and at most MAX_SUMMARY_POINTS
+            if (summaryPoints.size < MIN_SUMMARY_POINTS) {
+                Logger.d(TAG, "Not enough summary points: ${summaryPoints.size}")
+                return@withContext emptyList()
+            }
+
+            // Limit to MAX_SUMMARY_POINTS (10) to ensure we don't have too many
+            val limitedPoints = if (summaryPoints.size > MAX_SUMMARY_POINTS) {
+                summaryPoints.take(MAX_SUMMARY_POINTS)
+            } else {
+                summaryPoints
+            }
+
+            Logger.d(TAG, "Final summary points count: ${limitedPoints.size}")
+
+            // Format and clean the bullet points
+            val bulletPoints = limitedPoints.map { sentence ->
+                // Clean the sentence
+                var cleanedSentence = sentence
+                    .replace("\\s+".toRegex(), " ") // Normalize whitespace
+                    .replace("&nbsp;", " ")
+                    .replace("&amp;", "&")
+                    .replace("&lt;", "<")
+                    .replace("&gt;", ">")
+                    .replace("&quot;", "\"")
+                    .replace("&#39;", "'")
+                    .replace("<[^>]*>".toRegex(), "") // Remove any remaining HTML tags
+                    .replace("\\{\\{[^}]*\\}\\}".toRegex(), "") // Remove template expressions
+                    .replace("\\[[0-9]+\\]".toRegex(), "") // Remove citation numbers
+                    .trim()
+
+                // Truncate very long sentences
+                if (cleanedSentence.length > 200) {
+                    val truncated = cleanedSentence.substring(0, 197) + "..."
+                    cleanedSentence = truncated
+                }
+
+                // Ensure the sentence starts with a capital letter
+                if (cleanedSentence.isNotEmpty() && cleanedSentence[0].isLowerCase()) {
+                    cleanedSentence = cleanedSentence[0].uppercaseChar() + cleanedSentence.substring(1)
+                }
+
+                // Add period if missing
+                if (!cleanedSentence.endsWith(".") && !cleanedSentence.endsWith("!") && !cleanedSentence.endsWith("?")) {
+                    cleanedSentence = "$cleanedSentence."
+                }
+
+                cleanedSentence
+            }
+
+            // Filter out any duplicate or nearly duplicate sentences
+            val uniqueBulletPoints = mutableListOf<String>()
+            for (point in bulletPoints) {
+                val isDuplicate = uniqueBulletPoints.any { existing ->
+                    val similarity = calculateSimilarity(existing, point)
+                    similarity > 0.7 // If more than 70% similar, consider it a duplicate
+                }
+
+                if (!isDuplicate) {
+                    uniqueBulletPoints.add(point)
+                }
+            }
+
+            Logger.d(TAG, "Generated ${uniqueBulletPoints.size} unique summary points")
+            return@withContext uniqueBulletPoints.take(MAX_SUMMARY_POINTS)
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error summarizing content", e)
+            return@withContext emptyList()
+        }
+    }
+
+    /**
+     * Calculate similarity between two strings (simple implementation)
+     */
+    private fun calculateSimilarity(s1: String, s2: String): Double {
+        val words1 = s1.lowercase().split("\\W+".toRegex()).filter { it.length > 3 }.toSet()
+        val words2 = s2.lowercase().split("\\W+".toRegex()).filter { it.length > 3 }.toSet()
+
+        if (words1.isEmpty() || words2.isEmpty()) return 0.0
+
+        val intersection = words1.intersect(words2).size
+        val union = words1.union(words2).size
+
+        return intersection.toDouble() / union.toDouble()
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/utils/Constants.kt b/app/src/main/java/com/quick/browser/utils/Constants.kt
new file mode 100644
index 0000000..9f24064
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/utils/Constants.kt
@@ -0,0 +1,35 @@
+package com.quick.browser.utils
+
+/**
+ * Centralized constants for the entire application
+ *
+ * All constants should be defined here to avoid duplication and inconsistency.
+ * This object contains action constants, intent extra keys, and other application-wide constants.
+ */
+object Constants {
+    // Action constants
+    /** Action to send data to the application */
+    const val ACTION_SEND = "com.quick.browser.ACTION_SEND"
+    
+    /** Action to create a new bubble */
+    const val ACTION_CREATE_BUBBLE = "com.quick.browser.action.CREATE_BUBBLE"
+    
+    /** Action to open a URL in a bubble */
+    const val ACTION_OPEN_URL = "com.quick.browser.action.OPEN_URL"
+    
+    /** Action to close a bubble */
+    const val ACTION_CLOSE_BUBBLE = "com.quick.browser.action.CLOSE_BUBBLE"
+    
+    /** Action to toggle bubble visibility */
+    const val ACTION_TOGGLE_BUBBLES = "com.quick.browser.action.TOGGLE_BUBBLES"
+    
+    /** Action to activate a bubble */
+    const val ACTION_ACTIVATE_BUBBLE = "com.quick.browser.action.ACTIVATE_BUBBLE"
+
+    // Intent extra constants
+    /** Extra key for URL data */
+    const val EXTRA_URL = "extra_url"
+    
+    /** Extra key for bubble ID */
+    const val EXTRA_BUBBLE_ID = "extra_bubble_id"
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/utils/ErrorHandler.kt b/app/src/main/java/com/quick/browser/utils/ErrorHandler.kt
new file mode 100644
index 0000000..1205964
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/utils/ErrorHandler.kt
@@ -0,0 +1,342 @@
+package com.quick.browser.utils
+
+import android.content.Context
+import android.util.Log
+import android.view.View
+import android.widget.Toast
+import com.google.android.material.snackbar.Snackbar
+import kotlinx.coroutines.CancellationException
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.withContext
+
+/**
+ * Centralized error handling utility for the application.
+ * Provides consistent error logging, reporting, and user feedback.
+ * 
+ * Usage examples:
+ * 
+ * 1. Basic try-catch with extension function:
+ *    val result = runCatching { riskyOperation() }
+ *        .onError(tag = "MyClass") { "Failed to perform operation" }
+ * 
+ * 2. With fallback value:
+ *    val result = runCatching { riskyOperation() }
+ *        .getOrDefault("fallback", tag = "MyClass") { "Failed to get data" }
+ * 
+ * 3. In coroutines:
+ *    lifecycleScope.launch {
+ *        val result = withErrorHandling(tag = "MyClass") {
+ *            riskyAsyncOperation()
+ *        }
+ *    }
+ * 
+ * 4. With user feedback:
+ *    runCatching { riskyOperation() }
+ *        .onError(tag = "MyClass", context = this, view = myView) { "Operation failed" }
+ */
+object ErrorHandler {
+    private const val TAG = "ErrorHandler"
+    
+    /**
+     * Log an error with consistent formatting
+     * 
+     * @param tag The tag for the log message
+     * @param message The error message
+     * @param throwable The exception that was thrown (optional)
+     * @param level The log level (default: ERROR)
+     */
+    fun logError(
+        tag: String, 
+        message: String, 
+        throwable: Throwable? = null,
+        level: LogLevel = LogLevel.ERROR
+    ) {
+        val fullTag = "$TAG:$tag"
+        when (level) {
+            LogLevel.DEBUG -> Log.d(fullTag, message, throwable)
+            LogLevel.INFO -> Log.i(fullTag, message, throwable)
+            LogLevel.WARNING -> Log.w(fullTag, message, throwable)
+            LogLevel.ERROR -> Log.e(fullTag, message, throwable)
+        }
+    }
+    
+    /**
+     * Show a toast message to the user
+     * 
+     * @param context The context to use for showing the toast
+     * @param message The message to show
+     * @param length The duration of the toast (default: SHORT)
+     */
+    fun showToast(
+        context: Context, 
+        message: String, 
+        length: Int = Toast.LENGTH_SHORT
+    ) {
+        Toast.makeText(context, message, length).show()
+    }
+    
+    /**
+     * Show a snackbar message to the user
+     * 
+     * @param view The view to attach the snackbar to
+     * @param message The message to show
+     * @param length The duration of the snackbar (default: SHORT)
+     * @param actionText The text for the action button (optional)
+     * @param action The action to perform when the button is clicked (optional)
+     */
+    fun showSnackbar(
+        view: View, 
+        message: String, 
+        length: Int = Snackbar.LENGTH_SHORT,
+        actionText: String? = null,
+        action: (() -> Unit)? = null
+    ) {
+        val snackbar = Snackbar.make(view, message, length)
+        if (actionText != null && action != null) {
+            snackbar.setAction(actionText) { action() }
+        }
+        snackbar.show()
+    }
+    
+    /**
+     * Execute a block of code and handle any exceptions that are thrown
+     * 
+     * @param tag The tag for error logging
+     * @param errorMessage The error message to log
+     * @param showError Whether to show an error message to the user (default: false)
+     * @param context The context to use for showing error messages (required if showError is true)
+     * @param view The view to attach snackbars to (optional, used if context is provided)
+     * @param block The code to execute
+     * @return The result of the block, or null if an exception was thrown
+     */
+    inline fun <T> handleExceptions(
+        tag: String,
+        errorMessage: String,
+        showError: Boolean = false,
+        context: Context? = null,
+        view: View? = null,
+        block: () -> T
+    ): T? {
+        return try {
+            block()
+        } catch (e: Exception) {
+            // Don't catch cancellation exceptions to allow coroutines to cancel properly
+            if (e is CancellationException) throw e
+            
+            // Log the error
+            logError(tag, errorMessage, e)
+            
+            // Show error to user if requested
+            if (showError && context != null) {
+                if (view != null) {
+                    showSnackbar(view, "$errorMessage: ${e.localizedMessage}")
+                } else {
+                    showToast(context, "$errorMessage: ${e.localizedMessage}")
+                }
+            }
+            
+            null
+        }
+    }
+    
+    /**
+     * Execute a block of code and handle any exceptions that are thrown with a fallback value
+     * 
+     * @param tag The tag for error logging
+     * @param errorMessage The error message to log
+     * @param fallback The fallback value to return if an exception is thrown
+     * @param showError Whether to show an error message to the user (default: false)
+     * @param context The context to use for showing error messages (required if showError is true)
+     * @param view The view to attach snackbars to (optional, used if context is provided)
+     * @param block The code to execute
+     * @return The result of the block, or the fallback value if an exception was thrown
+     */
+    inline fun <T> handleExceptionsWithFallback(
+        tag: String,
+        errorMessage: String,
+        fallback: T,
+        showError: Boolean = false,
+        context: Context? = null,
+        view: View? = null,
+        block: () -> T
+    ): T {
+        return try {
+            block()
+        } catch (e: Exception) {
+            // Don't catch cancellation exceptions to allow coroutines to cancel properly
+            if (e is CancellationException) throw e
+            
+            // Log the error
+            logError(tag, errorMessage, e)
+            
+            // Show error to user if requested
+            if (showError && context != null) {
+                if (view != null) {
+                    showSnackbar(view, "$errorMessage: ${e.localizedMessage}")
+                } else {
+                    showToast(context, "$errorMessage: ${e.localizedMessage}")
+                }
+            }
+            
+            fallback
+        }
+    }
+    
+    /**
+     * Log levels for error logging
+     */
+    enum class LogLevel {
+        DEBUG, INFO, WARNING, ERROR
+    }
+}
+
+/**
+ * Extension function for Result to handle errors with logging
+ */
+inline fun <T> Result<T>.onError(
+    tag: String,
+    context: Context? = null,
+    view: View? = null,
+    showError: Boolean = false,
+    crossinline errorMessageProvider: (Throwable) -> String
+): Result<T> {
+    onFailure { throwable ->
+        if (throwable is CancellationException) throw throwable
+        
+        val errorMessage = errorMessageProvider(throwable)
+        ErrorHandler.logError(tag, errorMessage, throwable)
+        
+        if (showError && context != null) {
+            val userMessage = "$errorMessage: ${throwable.localizedMessage}"
+            if (view != null) {
+                ErrorHandler.showSnackbar(view, userMessage)
+            } else {
+                ErrorHandler.showToast(context, userMessage)
+            }
+        }
+    }
+    return this
+}
+
+/**
+ * Extension function for Result to get value or default with error handling
+ */
+inline fun <T> Result<T>.getOrDefault(
+    defaultValue: T,
+    tag: String,
+    context: Context? = null,
+    view: View? = null,
+    showError: Boolean = false,
+    crossinline errorMessageProvider: (Throwable) -> String
+): T {
+    return onError(tag, context, view, showError, errorMessageProvider)
+        .getOrDefault(defaultValue)
+}
+
+/**
+ * Extension function to run code with error handling and return a Result
+ */
+inline fun <T> runCatching(block: () -> T): Result<T> {
+    return kotlin.runCatching(block)
+}
+
+/**
+ * Extension function for CoroutineScope to run suspending code with error handling
+ */
+suspend inline fun <T> withErrorHandling(
+    tag: String,
+    errorMessage: String,
+    context: Context? = null,
+    view: View? = null,
+    showError: Boolean = false,
+    crossinline block: suspend () -> T
+): T? = withContext(Dispatchers.Default) {
+    try {
+        block()
+    } catch (e: Exception) {
+        if (e is CancellationException) throw e
+        
+        ErrorHandler.logError(tag, errorMessage, e)
+        
+        if (showError && context != null) {
+            withContext(Dispatchers.Main) {
+                if (view != null) {
+                    ErrorHandler.showSnackbar(view, "$errorMessage: ${e.localizedMessage}")
+                } else {
+                    ErrorHandler.showToast(context, "$errorMessage: ${e.localizedMessage}")
+                }
+            }
+        }
+        
+        null
+    }
+}
+
+/**
+ * Extension function for CoroutineScope to run suspending code with error handling and fallback
+ */
+suspend inline fun <T> withErrorHandlingAndFallback(
+    tag: String,
+    errorMessage: String,
+    fallback: T,
+    context: Context? = null,
+    view: View? = null,
+    showError: Boolean = false,
+    crossinline block: suspend () -> T
+): T = withContext(Dispatchers.Default) {
+    try {
+        block()
+    } catch (e: Exception) {
+        if (e is CancellationException) throw e
+        
+        ErrorHandler.logError(tag, errorMessage, e)
+        
+        if (showError && context != null) {
+            withContext(Dispatchers.Main) {
+                if (view != null) {
+                    ErrorHandler.showSnackbar(view, "$errorMessage: ${e.localizedMessage}")
+                } else {
+                    ErrorHandler.showToast(context, "$errorMessage: ${e.localizedMessage}")
+                }
+            }
+        }
+        
+        fallback
+    }
+}
+
+/**
+ * Extension function to safely execute a block of code with error handling
+ */
+inline fun <T> T.safeExecute(
+    tag: String,
+    errorMessage: String,
+    showError: Boolean = false,
+    context: Context? = null,
+    view: View? = null,
+    block: T.() -> Unit
+): T {
+    return apply {
+        ErrorHandler.handleExceptions(tag, errorMessage, showError, context, view) {
+            block()
+        }
+    }
+}
+
+/**
+ * Extension function to safely execute a suspending block of code with error handling
+ */
+suspend inline fun <T> T.safeExecuteAsync(
+    tag: String,
+    errorMessage: String,
+    showError: Boolean = false,
+    context: Context? = null,
+    view: View? = null,
+    crossinline block: suspend T.() -> Unit
+): T {
+    return apply {
+        withErrorHandling(tag, errorMessage, context, view, showError) {
+            block()
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/utils/JavaScriptSanitizer.kt b/app/src/main/java/com/quick/browser/utils/JavaScriptSanitizer.kt
new file mode 100644
index 0000000..aa36623
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/utils/JavaScriptSanitizer.kt
@@ -0,0 +1,139 @@
+package com.quick.browser.utils
+
+/**
+ * Utility class for sanitizing JavaScript code to prevent XSS and other injection attacks
+ *
+ * This object provides methods to sanitize JavaScript code by removing potentially
+ * dangerous constructs, validate JavaScript code for safety, and generate Content
+ * Security Policy headers.
+ */
+object JavaScriptSanitizer {
+    
+    private const val TAG = "JavaScriptSanitizer"
+    
+    // Patterns for potentially dangerous JavaScript constructs
+    private val DANGEROUS_PATTERNS = listOf(
+        "eval\\s*\\(",
+        "setTimeout\\s*\\([^,]+,\\s*0\\s*\\)",
+        "setInterval\\s*\\([^,]+,\\s*0\\s*\\)",
+        "Function\\s*\\(",
+        "document\\.write\\s*\\(",
+        "document\\.writeln\\s*\\(",
+        "innerHTML\\s*=",
+        "outerHTML\\s*=",
+        "insertAdjacentHTML\\s*\\(",
+        "execCommand\\s*\\("
+    )
+    
+    // Allowed global functions
+    private val ALLOWED_GLOBALS = setOf(
+        "console", "Math", "JSON", "Array", "Object", "String", "Number", 
+        "Boolean", "Date", "RegExp", "Error", "encodeURIComponent", 
+        "decodeURIComponent", "parseInt", "parseFloat"
+    )
+    
+    /**
+     * Sanitize JavaScript code by removing potentially dangerous constructs
+     *
+     * @param script The JavaScript code to sanitize
+     * @return The sanitized JavaScript code
+     */
+    fun sanitizeJavaScript(script: String): String {
+        var sanitized = script
+        
+        try {
+            // Remove dangerous patterns
+            for (pattern in DANGEROUS_PATTERNS) {
+                sanitized = sanitized.replace(Regex(pattern, setOf(RegexOption.IGNORE_CASE)), "")
+            }
+            
+            // Remove access to dangerous global properties
+            sanitized = sanitized.replace(Regex("window\\.(?!(${ALLOWED_GLOBALS.joinToString("|")})\\b)[a-zA-Z_\\$][a-zA-Z0-9_\\$]*"), "")
+            sanitized = sanitized.replace(Regex("document\\.(?!(${ALLOWED_GLOBALS.joinToString("|")})\\b)[a-zA-Z_\\$][a-zA-Z0-9_\\$]*"), "")
+            
+            // Remove dangerous DOM manipulation
+            sanitized = sanitized.replace(Regex("\\.createElement\\s*\\([^)]*script[^)]*\\)", setOf(RegexOption.IGNORE_CASE)), "")
+            
+            // Remove data URLs that could contain scripts
+            sanitized = sanitized.replace(Regex("data:text/javascript[^'\"']*", setOf(RegexOption.IGNORE_CASE)), "")
+            
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error sanitizing JavaScript", e)
+            // In case of error, return empty string to prevent execution of potentially dangerous code
+            sanitized = ""
+        }
+        
+        return sanitized
+    }
+    
+    /**
+     * Validate that JavaScript code is safe to execute
+     *
+     * @param script The JavaScript code to validate
+     * @return True if the script is considered safe
+     */
+    fun isJavaScriptSafe(script: String): Boolean {
+        // Check for dangerous patterns
+        for (pattern in DANGEROUS_PATTERNS) {
+            if (Regex(pattern, setOf(RegexOption.IGNORE_CASE)).containsMatchIn(script)) {
+                return false
+            }
+        }
+        
+        // Check for dangerous global access
+        val windowAccessPattern = "window\\.(?!(${ALLOWED_GLOBALS.joinToString("|")})\\b)[a-zA-Z_\\$][a-zA-Z0-9_\\$]*"
+        val documentAccessPattern = "document\\.(?!(${ALLOWED_GLOBALS.joinToString("|")})\\b)[a-zA-Z_\\$][a-zA-Z0-9_\\$]*"
+        
+        if (Regex(windowAccessPattern).containsMatchIn(script) || Regex(documentAccessPattern).containsMatchIn(script)) {
+            return false
+        }
+        
+        // Check for dangerous DOM manipulation
+        val createElementPattern = "\\.createElement\\s*\\([^)]*script[^)]*\\)"
+        if (Regex(createElementPattern, setOf(RegexOption.IGNORE_CASE)).containsMatchIn(script)) {
+            return false
+        }
+        
+        // Check for data URLs
+        val dataUrlPattern = "data:text/javascript[^'\"']*"
+        if (Regex(dataUrlPattern, setOf(RegexOption.IGNORE_CASE)).containsMatchIn(script)) {
+            return false
+        }
+        
+        return true
+    }
+    
+    /**
+     * Generate Content Security Policy header
+     *
+     * @return CSP header string
+     */
+    fun generateCSPHeader(): String {
+        return "default-src * 'unsafe-inline' 'unsafe-eval'; " +
+                "script-src * 'unsafe-inline' 'unsafe-eval'; " +
+                "style-src * 'unsafe-inline'; " +
+                "img-src * data: https:; " +
+                "font-src * data:; " +
+                "connect-src *; " +
+                "media-src *; " +
+                "object-src *; " +
+                "child-src *; " +
+                "frame-ancestors *; " +
+                "base-uri *; " +
+                "form-action *;"
+    }
+}
+
+/**
+ * Extension function to sanitize JavaScript code
+ *
+ * @return The sanitized JavaScript code
+ */
+fun String.sanitizeJavaScript(): String = JavaScriptSanitizer.sanitizeJavaScript(this)
+
+/**
+ * Extension function to check if JavaScript code is safe
+ *
+ * @return True if the script is considered safe
+ */
+fun String.isJavaScriptSafe(): Boolean = JavaScriptSanitizer.isJavaScriptSafe(this)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/utils/Logger.kt b/app/src/main/java/com/quick/browser/utils/Logger.kt
new file mode 100644
index 0000000..78ea7de
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/utils/Logger.kt
@@ -0,0 +1,98 @@
+package com.quick.browser.utils
+
+import android.util.Log
+
+/**
+ * Logger utility for consistent logging throughout the application
+ *
+ * This object provides a unified interface for logging messages at different
+ * levels (debug, info, warning, error) with consistent formatting and tagging.
+ * It wraps the Android Log class to provide a cleaner API.
+ */
+object Logger {
+    private const val DEFAULT_TAG = "QuickBrowser"
+
+    /**
+     * Log a debug message
+     *
+     * @param tag The tag for the log message, defaults to "QuickBrowser"
+     * @param message The debug message to log
+     */
+    fun d(tag: String = DEFAULT_TAG, message: String) {
+        Log.d(tag, message)
+    }
+
+    /**
+     * Log a debug message with throwable
+     *
+     * @param tag The tag for the log message
+     * @param message The debug message to log
+     * @param throwable The throwable to log
+     */
+    fun d(tag: String, message: String, throwable: Throwable) {
+        Log.d(tag, message, throwable)
+    }
+
+    /**
+     * Log an info message
+     *
+     * @param tag The tag for the log message, defaults to "QuickBrowser"
+     * @param message The info message to log
+     */
+    fun i(tag: String = DEFAULT_TAG, message: String) {
+        Log.i(tag, message)
+    }
+
+    /**
+     * Log an info message with throwable
+     *
+     * @param tag The tag for the log message
+     * @param message The info message to log
+     * @param throwable The throwable to log
+     */
+    fun i(tag: String, message: String, throwable: Throwable) {
+        Log.i(tag, message, throwable)
+    }
+
+    /**
+     * Log a warning message
+     *
+     * @param tag The tag for the log message, defaults to "QuickBrowser"
+     * @param message The warning message to log
+     */
+    fun w(tag: String = DEFAULT_TAG, message: String) {
+        Log.w(tag, message)
+    }
+
+    /**
+     * Log a warning message with throwable
+     *
+     * @param tag The tag for the log message
+     * @param message The warning message to log
+     * @param throwable The throwable to log
+     */
+    fun w(tag: String, message: String, throwable: Throwable) {
+        Log.w(tag, message, throwable)
+    }
+
+    /**
+     * Log an error message
+     *
+     * @param tag The tag for the log message, defaults to "QuickBrowser"
+     * @param message The error message to log
+     */
+    fun e(tag: String = DEFAULT_TAG, message: String) {
+        Log.e(tag, message)
+    }
+
+    /**
+     * Log an error message with throwable
+     *
+     * @param tag The tag for the log message
+     * @param message The error message to log
+     * @param throwable The throwable to log
+     */
+    fun e(tag: String, message: String, throwable: Throwable) {
+        Log.e(tag, message, throwable)
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/utils/LoggingTag.kt b/app/src/main/java/com/quick/browser/utils/LoggingTag.kt
new file mode 100644
index 0000000..e92f774
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/utils/LoggingTag.kt
@@ -0,0 +1,20 @@
+package com.quick.browser.utils
+
+/**
+ * Interface for classes that need to provide a logging tag
+ *
+ * This interface provides a convenient way for classes to automatically
+ * generate a logging tag based on their class name. Classes implementing
+ * this interface can use the default implementation which uses the simple
+ * class name as the tag, or override it to provide a custom tag.
+ */
+interface LoggingTag {
+    /**
+     * The logging tag for this class
+     *
+     * By default, this property returns the simple name of the class.
+     * Classes can override this property to provide a custom logging tag.
+     */
+    val tag: String
+        get() = this::class.java.simpleName
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/utils/QuickBrowserGlideModule.kt b/app/src/main/java/com/quick/browser/utils/QuickBrowserGlideModule.kt
new file mode 100644
index 0000000..98b94c0
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/utils/QuickBrowserGlideModule.kt
@@ -0,0 +1,74 @@
+package com.quick.browser.utils
+
+import android.content.Context
+import com.bumptech.glide.Glide
+import com.bumptech.glide.GlideBuilder
+import com.bumptech.glide.Registry
+import com.bumptech.glide.annotation.GlideModule
+import com.bumptech.glide.load.engine.DiskCacheStrategy
+import com.bumptech.glide.load.engine.cache.InternalCacheDiskCacheFactory
+import com.bumptech.glide.load.engine.cache.LruResourceCache
+import com.bumptech.glide.module.AppGlideModule
+
+/**
+ * Custom Glide module for the Quick Browser app
+ *
+ * This module configures Glide with custom cache sizes and default options
+ * optimized for the browser application. It sets up disk and memory caching
+ * strategies to balance performance with resource usage.
+ */
+@GlideModule
+class QuickBrowserGlideModule : AppGlideModule() {
+    companion object {
+        private const val TAG = "QuickBrowserGlideModule"
+        private const val DISK_CACHE_SIZE_BYTES = 100 * 1024 * 1024L // 100 MB
+        private const val MEMORY_CACHE_SIZE_BYTES = 20 * 1024 * 1024L // 20 MB
+    }
+
+    /**
+     * Apply custom options to Glide configuration
+     *
+     * This method configures Glide with custom disk and memory cache sizes,
+     * and sets default request options for optimal image loading performance.
+     *
+     * @param context The application context
+     * @param builder The GlideBuilder instance to configure
+     */
+    override fun applyOptions(context: Context, builder: GlideBuilder) {
+        // Set disk cache size
+        builder.setDiskCache(InternalCacheDiskCacheFactory(context, DISK_CACHE_SIZE_BYTES))
+        
+        // Set memory cache size
+        builder.setMemoryCache(LruResourceCache(MEMORY_CACHE_SIZE_BYTES))
+        
+        // Set default disk cache strategy
+        builder.setDefaultRequestOptions(
+            com.bumptech.glide.request.RequestOptions()
+                .diskCacheStrategy(DiskCacheStrategy.AUTOMATIC)
+        )
+        
+        Logger.d(TAG, "Glide module configured with disk cache: ${DISK_CACHE_SIZE_BYTES} bytes, memory cache: ${MEMORY_CACHE_SIZE_BYTES} bytes")
+    }
+
+    /**
+     * Register custom components with Glide
+     *
+     * This method allows registering custom components such as ModelLoaders,
+     * ResourceDecoders, etc. with Glide's registry.
+     *
+     * @param context The application context
+     * @param glide The Glide instance
+     * @param registry The registry to register components with
+     */
+    override fun registerComponents(context: Context, glide: Glide, registry: Registry) {
+        // Register custom components if needed
+        super.registerComponents(context, glide, registry)
+    }
+
+    /**
+     * Disable manifest parsing to avoid startup time overhead
+     *
+     * @return False to disable manifest parsing
+     */
+    override fun isManifestParsingEnabled(): Boolean = false
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/utils/UrlUtils.kt b/app/src/main/java/com/quick/browser/utils/UrlUtils.kt
new file mode 100644
index 0000000..792a986
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/utils/UrlUtils.kt
@@ -0,0 +1,186 @@
+package com.quick.browser.utils
+
+import android.util.Patterns
+import java.net.URI
+import java.util.regex.Pattern
+
+/**
+ * Utility class for URL formatting, validation, and manipulation operations
+ *
+ * This object provides methods to format URLs, validate their structure,
+ * extract components such as domains and paths, and manipulate URLs.
+ */
+object UrlUtils {
+    
+    /**
+     * Format URL to ensure it has proper protocol
+     *
+     * This method adds a protocol prefix (https://) to URLs that don't have one,
+     * unless they already have a recognized protocol or are empty.
+     *
+     * @param url The URL to format
+     * @return The formatted URL with appropriate protocol
+     */
+    fun formatUrl(url: String): String {
+        return when {
+            url.startsWith("http://", ignoreCase = true) || 
+            url.startsWith("https://", ignoreCase = true) -> url
+            url.startsWith("file://", ignoreCase = true) -> url
+            url.startsWith("data:", ignoreCase = true) -> url
+            url.startsWith("javascript:", ignoreCase = true) -> url
+            url.startsWith("about:", ignoreCase = true) -> url
+            url.contains("://") -> url // Already has a protocol
+            url.isEmpty() -> ""
+            else -> "https://$url" // Default to HTTPS
+        }
+    }
+    
+    /**
+     * Validate if a URL is valid
+     *
+     * This method uses Android's built-in URL pattern matcher for strict validation,
+     * and falls back to a more lenient approach for URLs that might not strictly
+     * match the pattern but are still valid.
+     *
+     * @param url The URL to validate
+     * @return True if the URL is valid, false otherwise
+     */
+    fun isValidUrl(url: String): Boolean {
+        // First try with Android's built-in pattern
+        try {
+            if (Patterns.WEB_URL.matcher(url).matches()) {
+                return true
+            }
+        } catch (e: Exception) {
+            // If we can't use Android's pattern matcher, fall back to our own validation
+        }
+        
+        // If that fails, try a more lenient approach for URLs that might have special characters
+        // or don't strictly match the pattern but are still valid URLs
+        val lowerUrl = url.lowercase()
+        return (lowerUrl.startsWith("http://") || 
+               lowerUrl.startsWith("https://") || 
+               lowerUrl.startsWith("www.") ||
+               lowerUrl.contains("."))
+    }
+    
+    /**
+     * Extract domain from URL
+     *
+     * This method parses a URL and extracts the domain name, removing the
+     * "www." prefix if present.
+     *
+     * @param url The URL to extract domain from
+     * @return The domain or empty string if invalid
+     */
+    fun extractDomain(url: String): String {
+        return try {
+            val uri = URI(url)
+            val host = uri.host ?: return ""
+            if (host.startsWith("www.")) host.substring(4) else host
+        } catch (e: Exception) {
+            ""
+        }
+    }
+    
+    /**
+     * Check if URL is HTTPS
+     *
+     * @param url The URL to check
+     * @return True if URL is HTTPS
+     */
+    fun isHttpsUrl(url: String): Boolean {
+        return url.startsWith("https://", ignoreCase = true)
+    }
+    
+    /**
+     * Get URL without query parameters
+     *
+     * This method removes query parameters and fragments from a URL,
+     * keeping only the scheme, host, port, and path components.
+     *
+     * @param url The URL to process
+     * @return URL without query parameters
+     */
+    fun getUrlWithoutQuery(url: String): String {
+        return try {
+            val uri = URI(url)
+            val scheme = uri.scheme
+            val host = uri.host
+            val port = uri.port
+            val path = uri.path
+            
+            val portPart = if (port != -1) ":$port" else ""
+            val pathPart = path ?: ""
+            
+            "$scheme://$host$portPart$pathPart"
+        } catch (e: Exception) {
+            url
+        }
+    }
+    
+    /**
+     * Extracts a URL from text that might contain other content
+     */
+    fun extractUrl(text: String): String? {
+        // Check for Google App specific pattern first (search.app/*)
+        val googleAppPattern = "(https?://)?search\\.app/\\S+"
+        val googleAppMatcher = Pattern.compile(googleAppPattern).matcher(text)
+        if (googleAppMatcher.find()) {
+            return googleAppMatcher.group()
+        }
+        
+        // Standard URL extraction using regex
+        val urlPattern = "(https?://(?:www\\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.\\S{2,}|www\\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\\.\\S{2,}|https?://(?:www\\.|(?!www))[a-zA-Z0-9]+\\.\\S{2,}|www\\.[a-zA-Z0-9]+\\.\\S{2,})"
+        val pattern = Pattern.compile(urlPattern)
+        val matcher = pattern.matcher(text)
+        
+        return if (matcher.find()) {
+            matcher.group()
+        } else {
+            null
+        }
+    }
+}
+
+/**
+ * Extension function to format URL
+ *
+ * @return The formatted URL with appropriate protocol
+ */
+fun String.formatUrl(): String = UrlUtils.formatUrl(this)
+
+/**
+ * Extension function to validate URL
+ *
+ * @return True if the URL is valid, false otherwise
+ */
+fun String.isValidUrl(): Boolean = UrlUtils.isValidUrl(this)
+
+/**
+ * Extension function to extract domain from URL
+ *
+ * @return The domain or empty string if invalid
+ */
+fun String.extractDomain(): String = UrlUtils.extractDomain(this)
+
+/**
+ * Extension function to check if URL is HTTPS
+ *
+ * @return True if URL is HTTPS
+ */
+fun String.isHttpsUrl(): Boolean = UrlUtils.isHttpsUrl(this)
+
+/**
+ * Extension function to get URL without query parameters
+ *
+ * @return URL without query parameters
+ */
+fun String.getUrlWithoutQuery(): String = UrlUtils.getUrlWithoutQuery(this)
+
+/**
+ * Extension function to extract URL from text
+ *
+ * @return The extracted URL or null if none found
+ */
+fun String.extractUrl(): String? = UrlUtils.extractUrl(this)
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/utils/ViewExtensions.kt b/app/src/main/java/com/quick/browser/utils/ViewExtensions.kt
new file mode 100644
index 0000000..27713d1
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/utils/ViewExtensions.kt
@@ -0,0 +1,152 @@
+package com.quick.browser.utils
+
+import android.view.View
+import android.view.ViewGroup
+import android.view.ViewTreeObserver
+import androidx.core.view.children
+
+/**
+ * Recursively finds a view by its tag
+ *
+ * This extension function searches through the view hierarchy to find
+ * a view with the specified tag. It performs a depth-first search,
+ * checking the current view first, then recursively searching through
+ * all child views if the current view is a ViewGroup.
+ *
+ * @param tag The tag to search for
+ * @return The view with the specified tag, or null if not found
+ */
+fun View.findViewByTag(tag: String): View? {
+    if (this.tag == tag) {
+        return this
+    }
+    
+    if (this is ViewGroup) {
+        for (child in this.children) {
+            val result = child.findViewByTag(tag)
+            if (result != null) {
+                return result
+            }
+        }
+    }
+    
+    return null
+}
+
+/**
+ * Shows a view by setting its visibility to VISIBLE
+ *
+ * This makes the view visible and takes up space in the layout.
+ */
+fun View.show() {
+    this.visibility = View.VISIBLE
+}
+
+/**
+ * Hides a view by setting its visibility to GONE
+ *
+ * This makes the view invisible and does not take up space in the layout.
+ */
+fun View.hide() {
+    this.visibility = View.GONE
+}
+
+/**
+ * Makes a view invisible by setting its visibility to INVISIBLE
+ *
+ * This makes the view invisible but still takes up space in the layout.
+ */
+fun View.invisible() {
+    this.visibility = View.INVISIBLE
+}
+
+/**
+ * Checks if a view is visible
+ *
+ * @return True if the view is visible (visibility == VISIBLE), false otherwise
+ */
+fun View.isVisible(): Boolean {
+    return this.visibility == View.VISIBLE
+}
+
+/**
+ * Checks if a view is hidden (gone)
+ *
+ * @return True if the view is hidden (visibility == GONE), false otherwise
+ */
+fun View.isGone(): Boolean {
+    return this.visibility == View.GONE
+}
+
+/**
+ * Toggle visibility of a view between VISIBLE and GONE
+ *
+ * If the view is currently visible, it will be hidden.
+ * If the view is currently hidden or invisible, it will be made visible.
+ */
+fun View.toggleVisibility() {
+    if (this.isVisible()) {
+        this.hide()
+    } else {
+        this.show()
+    }
+}
+
+/**
+ * Set multiple views visible
+ *
+ * This extension function applies the show() method to all views
+ * in the iterable collection.
+ */
+fun Iterable<View>.show() {
+    forEach { it.show() }
+}
+
+/**
+ * Set multiple views gone
+ *
+ * This extension function applies the hide() method to all views
+ * in the iterable collection.
+ */
+fun Iterable<View>.hide() {
+    forEach { it.hide() }
+}
+
+/**
+ * Execute a block of code when the view is laid out
+ *
+ * This extension function executes the provided action immediately if
+ * the view is already laid out, or waits for the next layout pass
+ * to execute the action.
+ *
+ * @param action The block of code to execute when the view is laid out
+ */
+inline fun View.doOnLayout(crossinline action: (view: View) -> Unit) {
+    if (isLaidOut && !isLayoutRequested) {
+        action(this)
+    } else {
+        viewTreeObserver.addOnGlobalLayoutListener(object : ViewTreeObserver.OnGlobalLayoutListener {
+            override fun onGlobalLayout() {
+                viewTreeObserver.removeOnGlobalLayoutListener(this)
+                action(this@doOnLayout)
+            }
+        })
+    }
+}
+
+/**
+ * Execute a block of code when the next layout pass is completed
+ *
+ * This extension function waits for the next layout pass to execute
+ * the provided action, regardless of whether the view is already laid out.
+ *
+ * @param action The block of code to execute when the next layout pass is completed
+ */
+inline fun View.doOnNextLayout(crossinline action: (view: View) -> Unit) {
+    viewTreeObserver.addOnGlobalLayoutListener(object : ViewTreeObserver.OnGlobalLayoutListener {
+        override fun onGlobalLayout() {
+            viewTreeObserver.removeOnGlobalLayoutListener(this)
+            action(this@doOnNextLayout)
+        }
+    })
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/utils/network/ModelDownloader.kt b/app/src/main/java/com/quick/browser/utils/network/ModelDownloader.kt
new file mode 100644
index 0000000..628b2ae
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/utils/network/ModelDownloader.kt
@@ -0,0 +1,113 @@
+package com.quick.browser.utils.network
+
+import android.content.Context
+import com.quick.browser.utils.Logger
+import kotlinx.coroutines.Dispatchers
+import kotlinx.coroutines.withContext
+import java.io.File
+import java.net.URL
+
+/**
+ * Utility class for downloading NLP models
+ *
+ * This class handles downloading and managing NLP models required by the application.
+ * It provides methods to check if models are available, download them if needed, and
+ * manage their storage location.
+ *
+ * @param context The application context
+ */
+class ModelDownloader(private val context: Context) {
+
+    companion object {
+        private const val TAG = "ModelDownloader"
+        private const val SENTENCE_MODEL_FILENAME = "en-sent.bin"
+
+        // URL to download the model from
+        // This should be updated with the actual model URL
+        private const val SENTENCE_MODEL_URL = "https://opennlp.sourceforge.net/models-1.5/en-sent.bin"
+    }
+
+    /**
+     * Checks if the sentence model is already downloaded
+     *
+     * @return True if the sentence model is downloaded and available, false otherwise
+     */
+    fun isSentenceModelDownloaded(): Boolean {
+        val modelFile = File(context.getExternalFilesDir(null), SENTENCE_MODEL_FILENAME)
+        return modelFile.exists() && modelFile.length() > 0
+    }
+
+    /**
+     * Downloads the sentence model if it's not already downloaded
+     *
+     * This method attempts to download the sentence model from the configured URL.
+     * If downloading fails, it tries to use a fallback model from the app's assets.
+     *
+     * @return true if the model is available (either downloaded now or previously)
+     */
+    suspend fun ensureSentenceModelAvailable(): Boolean = withContext(Dispatchers.IO) {
+        try {
+            if (isSentenceModelDownloaded()) {
+                Logger.d(TAG, "Sentence model already downloaded")
+                return@withContext true
+            }
+
+            Logger.d(TAG, "Downloading sentence model...")
+
+            // Create a temporary file
+            val tempFile = File(context.cacheDir, "$SENTENCE_MODEL_FILENAME.tmp")
+            if (tempFile.exists()) {
+                tempFile.delete()
+            }
+
+            // Download the model
+            val url = URL(SENTENCE_MODEL_URL)
+            val connection = url.openConnection()
+            connection.connectTimeout = 30000
+            connection.readTimeout = 30000
+
+            connection.getInputStream().use { input ->
+                tempFile.outputStream().use { output ->
+                    input.copyTo(output)
+                }
+            }
+
+            // Move to final location
+            val modelFile = File(context.getExternalFilesDir(null), SENTENCE_MODEL_FILENAME)
+            tempFile.renameTo(modelFile)
+
+            Logger.d(TAG, "Sentence model downloaded successfully")
+            return@withContext true
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error downloading sentence model", e)
+
+            // Check if the asset exists
+            val assetList = context.assets.list("")
+            val hasAsset = assetList?.contains(SENTENCE_MODEL_FILENAME) == true
+
+            if (hasAsset) {
+                try {
+                    // Check if the asset has content
+                    val assetFileDescriptor = context.assets.openFd(SENTENCE_MODEL_FILENAME)
+                    val hasContent = assetFileDescriptor.length > 0
+                    assetFileDescriptor.close()
+
+                    if (hasContent) {
+                        val modelFile = File(context.getExternalFilesDir(null), SENTENCE_MODEL_FILENAME)
+                        context.assets.open(SENTENCE_MODEL_FILENAME).use { input ->
+                            modelFile.outputStream().use { output ->
+                                input.copyTo(output)
+                            }
+                        }
+                        Logger.d(TAG, "Used fallback sentence model from assets")
+                        return@withContext true
+                    }
+                } catch (e: Exception) {
+                    Logger.e(TAG, "Error checking asset content", e)
+                }
+            }
+
+            return@withContext false
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/quick/browser/utils/security/SecurityPolicyManager.kt b/app/src/main/java/com/quick/browser/utils/security/SecurityPolicyManager.kt
new file mode 100644
index 0000000..6d9546c
--- /dev/null
+++ b/app/src/main/java/com/quick/browser/utils/security/SecurityPolicyManager.kt
@@ -0,0 +1,218 @@
+package com.quick.browser.utils.security
+
+import android.content.Context
+import android.webkit.CookieManager
+import android.webkit.WebSettings
+import android.webkit.WebView
+import com.quick.browser.utils.Logger
+import java.security.MessageDigest
+import java.security.cert.Certificate
+
+/**
+ * Centralized security policy manager for the browser application
+ *
+ * This class handles all security-related configurations and policies including:
+ * - WebView security settings
+ * - Certificate pinning
+ * - Input sanitization
+ * - Content security policies
+ *
+ * @param context The application context
+ */
+class SecurityPolicyManager(private val context: Context) {
+    
+    companion object {
+        private const val TAG = "SecurityPolicyManager"
+        private const val ENABLE_STRICT_MODE = true
+    }
+    
+    /**
+     * Apply strict security settings to a WebView
+     *
+     * This method configures a WebView with security-focused settings to minimize
+     * potential attack vectors. It disables file access, mixed content, and other
+     * potentially unsafe features.
+     *
+     * @param webView The WebView to configure
+     */
+    fun applySecuritySettings(webView: WebView) {
+        try {
+            val settings = webView.settings
+            
+            // Disable file access
+            settings.allowFileAccess = false
+            settings.allowContentAccess = false
+            
+            // Disable universal access from file URLs
+            settings.allowFileAccessFromFileURLs = false
+            settings.allowUniversalAccessFromFileURLs = false
+            
+            // Disable mixed content
+            settings.mixedContentMode = WebSettings.MIXED_CONTENT_NEVER_ALLOW
+            
+            // Disable saving password
+            settings.savePassword = false
+            
+            // Enable DOM storage but with restrictions
+            settings.domStorageEnabled = true
+            
+            // Disable database storage
+            settings.databaseEnabled = false
+            
+            // Set user agent
+            setUserAgent(settings)
+            
+            // Apply additional security settings
+            applyAdvancedSecuritySettings(webView, settings)
+            
+            Logger.d(TAG, "Applied security settings to WebView")
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error applying security settings", e)
+        }
+    }
+    
+    /**
+     * Apply advanced security settings
+     *
+     * This method applies additional security configurations that may not be
+     * available on all WebView implementations or Android versions.
+     *
+     * @param webView The WebView to configure
+     * @param settings The WebView settings
+     */
+    private fun applyAdvancedSecuritySettings(webView: WebView, settings: WebSettings) {
+        try {
+            // Disable media playback requiring user gesture
+            settings.mediaPlaybackRequiresUserGesture = true
+            
+            // Disable third-party cookies
+            CookieManager.getInstance().setAcceptThirdPartyCookies(webView, false)
+        } catch (e: Exception) {
+            Logger.w(TAG, "Could not apply advanced security settings", e)
+        }
+    }
+    
+    /**
+     * Set a secure user agent string
+     *
+     * This method modifies the user agent string to remove identifying information
+     * that could be used for browser fingerprinting.
+     *
+     * @param settings The WebView settings to modify
+     */
+    private fun setUserAgent(settings: WebSettings) {
+        try {
+            // Remove identifying information from user agent
+            val originalUserAgent = settings.userAgentString
+            // Remove any build-specific information that could be used for fingerprinting
+            val secureUserAgent = originalUserAgent.replace(Regex("Build/[^\\s]+"), "Build/XYZ")
+            settings.userAgentString = secureUserAgent
+        } catch (e: Exception) {
+            Logger.w(TAG, "Could not set secure user agent", e)
+        }
+    }
+    
+    /**
+     * Sanitize user input to prevent injection attacks
+     *
+     * This method removes potentially dangerous characters and constructs from
+     * user input to prevent XSS and other injection attacks.
+     *
+     * @param input The input string to sanitize
+     * @return The sanitized string
+     */
+    fun sanitizeInput(input: String): String {
+        if (input.isEmpty()) return input
+        
+        return input
+            // Remove potentially dangerous characters
+            .replace("<", "")
+            .replace(">", "")
+            .replace("\"", "")
+            .replace("'", "")
+            .replace("&", "")
+            // Remove JavaScript protocol handlers
+            .replace(Regex("javascript:", RegexOption.IGNORE_CASE), "")
+            // Remove data URLs that could contain scripts
+            .replace(Regex("data:text/html", RegexOption.IGNORE_CASE), "")
+            // Limit length to prevent DoS
+            .take(2000)
+    }
+    
+    /**
+     * Validate and format URL for security
+     *
+     * This method validates a URL and formats it according to security policies.
+     * It ensures URLs use allowed protocols and sanitizes potentially dangerous inputs.
+     *
+     * @param url The URL to validate
+     * @return The validated and formatted URL, or null if invalid
+     */
+    fun validateAndFormatUrl(url: String): String? {
+        if (url.isEmpty()) return null
+        
+        // Sanitize the input first
+        val sanitizedUrl = sanitizeInput(url)
+        
+        // Check for allowed protocols
+        val allowedProtocols = listOf("http://", "https://", "file://", "data:")
+        val hasAllowedProtocol = allowedProtocols.any { sanitizedUrl.startsWith(it, ignoreCase = true) }
+        
+        // If no protocol, default to HTTPS
+        return when {
+            hasAllowedProtocol -> sanitizedUrl
+            sanitizedUrl.contains("://") -> null // Unknown protocol
+            else -> "https://$sanitizedUrl" // Default to HTTPS
+        }
+    }
+    
+    /**
+     * Check if a URL is safe to load based on security policies
+     *
+     * This method evaluates whether a URL should be allowed to load based on
+     * security policies such as blocking localhost and private IP addresses
+     * in strict mode.
+     *
+     * @param url The URL to check
+     * @return True if the URL is safe to load
+     */
+    fun isUrlSafeToLoad(url: String): Boolean {
+        if (url.isEmpty()) return false
+        
+        // Block localhost and private IP addresses in strict mode
+        if (ENABLE_STRICT_MODE) {
+            val blockedPatterns = listOf(
+                "localhost",
+                "127.0.0.1",
+                "10.",
+                "172.16.",
+                "192.168."
+            )
+            
+            return !blockedPatterns.any { url.contains(it) }
+        }
+        
+        return true
+    }
+    
+    /**
+     * Generate a certificate fingerprint for pinning
+     *
+     * This method generates a SHA-256 fingerprint of a certificate's public key
+     * for use in certificate pinning implementations.
+     *
+     * @param certificate The certificate to fingerprint
+     * @return The SHA-256 fingerprint of the certificate
+     */
+    fun generateCertificateFingerprint(certificate: Certificate): String {
+        return try {
+            val md = MessageDigest.getInstance("SHA-256")
+            val publicKey = certificate.publicKey.encoded
+            val digest = md.digest(publicKey)
+            digest.joinToString("") { "%02x".format(it) }
+        } catch (e: Exception) {
+            Logger.e(TAG, "Error generating certificate fingerprint", e)
+            ""
+        }
+    }
+}
\ No newline at end of file
diff --git a/app/src/main/res/drawable-night/address_bar_background.xml b/app/src/main/res/drawable-night/address_bar_background.xml
new file mode 100644
index 0000000..99e982d
--- /dev/null
+++ b/app/src/main/res/drawable-night/address_bar_background.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <solid android:color="#2C2C2C" />
+    <corners android:radius="8dp" />
+    <stroke
+        android:width="1dp"
+        android:color="#404040" />
+</shape>
\ No newline at end of file
diff --git a/app/src/main/res/drawable-night/address_bar_container_background.xml b/app/src/main/res/drawable-night/address_bar_container_background.xml
new file mode 100644
index 0000000..fd0b1ce
--- /dev/null
+++ b/app/src/main/res/drawable-night/address_bar_container_background.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <solid android:color="#1E1E1E" />
+    <corners android:radius="12dp" />
+    <stroke
+        android:width="1dp"
+        android:color="#404040" />
+</shape>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/address_bar_background.xml b/app/src/main/res/drawable/address_bar_background.xml
new file mode 100644
index 0000000..600eb19
--- /dev/null
+++ b/app/src/main/res/drawable/address_bar_background.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <solid android:color="@android:color/white" />
+    <corners android:radius="24dp" />
+    <stroke
+        android:width="1dp"
+        android:color="#E0E0E0" />
+</shape>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/address_bar_container_background.xml b/app/src/main/res/drawable/address_bar_container_background.xml
new file mode 100644
index 0000000..622f6d3
--- /dev/null
+++ b/app/src/main/res/drawable/address_bar_container_background.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <solid android:color="#F5F5F5" />
+    <corners android:radius="28dp" />
+    <stroke
+        android:width="1dp"
+        android:color="#E0E0E0" />
+</shape>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/bubble_background.xml b/app/src/main/res/drawable/bubble_background.xml
new file mode 100644
index 0000000..ed79432
--- /dev/null
+++ b/app/src/main/res/drawable/bubble_background.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="?android:attr/colorControlHighlight">
+    <item>
+        <shape android:shape="oval">
+            <solid android:color="@android:color/white" />
+            <stroke
+                android:width="0.5dp"
+                android:color="?attr/colorPrimaryVariant" />
+        </shape>
+    </item>
+</ripple>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/color_item_ripple.xml b/app/src/main/res/drawable/color_item_ripple.xml
new file mode 100644
index 0000000..64f7508
--- /dev/null
+++ b/app/src/main/res/drawable/color_item_ripple.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<ripple xmlns:android="http://schemas.android.com/apk/res/android"
+    android:color="?attr/colorControlHighlight">
+    <item android:id="@android:id/mask">
+        <shape android:shape="oval">
+            <solid android:color="#000000" />
+        </shape>
+    </item>
+</ripple>
diff --git a/app/src/main/res/drawable/delete_button_background.xml b/app/src/main/res/drawable/delete_button_background.xml
new file mode 100644
index 0000000..e074ebc
--- /dev/null
+++ b/app/src/main/res/drawable/delete_button_background.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="oval">
+    <solid android:color="#F44336" />
+    <stroke
+        android:width="2dp"
+        android:color="#FFFFFF" />
+</shape>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/dialog_background.xml b/app/src/main/res/drawable/dialog_background.xml
new file mode 100644
index 0000000..e90e464
--- /dev/null
+++ b/app/src/main/res/drawable/dialog_background.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <solid android:color="?attr/colorSurface" />
+    <corners android:radius="8dp" />
+</shape>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/favicon_background.xml b/app/src/main/res/drawable/favicon_background.xml
new file mode 100644
index 0000000..a3e044d
--- /dev/null
+++ b/app/src/main/res/drawable/favicon_background.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="oval">
+    <solid android:color="#E0FFFFFF" />
+</shape>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/gradient_overlay.xml b/app/src/main/res/drawable/gradient_overlay.xml
new file mode 100644
index 0000000..3f4cf07
--- /dev/null
+++ b/app/src/main/res/drawable/gradient_overlay.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android">
+    <gradient
+        android:angle="270"
+        android:endColor="#80000000"
+        android:startColor="#00000000"
+        android:type="linear" />
+</shape>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_add.xml b/app/src/main/res/drawable/ic_add.xml
new file mode 100644
index 0000000..5a84898
--- /dev/null
+++ b/app/src/main/res/drawable/ic_add.xml
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorOnSurface">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_arrow_back.xml b/app/src/main/res/drawable/ic_arrow_back.xml
new file mode 100644
index 0000000..302fefd
--- /dev/null
+++ b/app/src/main/res/drawable/ic_arrow_back.xml
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorOnPrimary">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M20,11H7.83l5.59,-5.59L12,4l-8,8 8,8 1.41,-1.41L7.83,13H20v-2z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_arrow_right_circle.xml b/app/src/main/res/drawable/ic_arrow_right_circle.xml
new file mode 100644
index 0000000..93fa192
--- /dev/null
+++ b/app/src/main/res/drawable/ic_arrow_right_circle.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="48dp"
+    android:height="48dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="#1C274C"
+        android:pathData="M12,22C17.5228,22 22,17.5228 22,12C22,6.47715 17.5228,2 12,2C6.47715,2 2,6.47715 2,12C2,17.5228 6.47715,22 12,22ZM12.4697,8.46967C12.7626,8.17678 13.2374,8.17678 13.5303,8.46967L16.5303,11.4697C16.8232,11.7626 16.8232,12.2374 16.5303,12.5303L13.5303,15.5303C13.2374,15.8232 12.7626,15.8232 12.4697,15.5303C12.1768,15.2374 12.1768,14.7626 12.4697,14.4697L14.1893,12.75H8C7.58579,12.75 7.25,12.4142 7.25,12C7.25,11.5858 7.58579,11.25 8,11.25H14.1893L12.4697,9.53033C12.1768,9.23744 12.1768,8.76256 12.4697,8.46967Z" />
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_article.xml b/app/src/main/res/drawable/ic_article.xml
new file mode 100644
index 0000000..a6ed160
--- /dev/null
+++ b/app/src/main/res/drawable/ic_article.xml
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorOnSurface">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M19,3L5,3c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2L21,5c0,-1.1 -0.9,-2 -2,-2zM14,17L7,17v-2h7v2zM17,13L7,13v-2h10v2zM17,9L7,9L7,7h10v2z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_article_saved.xml b/app/src/main/res/drawable/ic_article_saved.xml
new file mode 100644
index 0000000..e43a70d
--- /dev/null
+++ b/app/src/main/res/drawable/ic_article_saved.xml
@@ -0,0 +1,16 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+  <path
+      android:pathData="M2,12C2,7.2859 2,4.9289 3.4645,3.4645C4.9289,2 7.286,2 12,2C16.714,2 19.0711,2 20.5355,3.4645C22,4.9289 22,7.286 22,12C22,16.714 22,19.0711 20.5355,20.5355C19.0711,22 16.714,22 12,22C7.286,22 4.9289,22 3.4645,20.5355C2,19.0711 2,16.714 2,12Z"
+      android:fillColor="#1C274C"
+      android:fillAlpha="0.5"/>
+  <path
+      android:pathData="M12.75,7C12.75,6.5858 12.4142,6.25 12,6.25C11.5858,6.25 11.25,6.5858 11.25,7L11.25,12.1893L9.5303,10.4697C9.2374,10.1768 8.7626,10.1768 8.4697,10.4697C8.1768,10.7626 8.1768,11.2374 8.4697,11.5303L11.4697,14.5303C11.6103,14.671 11.8011,14.75 12,14.75C12.1989,14.75 12.3897,14.671 12.5303,14.5303L15.5303,11.5303C15.8232,11.2374 15.8232,10.7626 15.5303,10.4697C15.2374,10.1768 14.7626,10.1768 14.4697,10.4697L12.75,12.1893V7Z"
+      android:fillColor="#1C274C"/>
+  <path
+      android:pathData="M8,16.25C7.5858,16.25 7.25,16.5858 7.25,17C7.25,17.4142 7.5858,17.75 8,17.75H16C16.4142,17.75 16.75,17.4142 16.75,17C16.75,16.5858 16.4142,16.25 16,16.25H8Z"
+      android:fillColor="#1C274C"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_back_arrow.xml b/app/src/main/res/drawable/ic_back_arrow.xml
new file mode 100644
index 0000000..47f3ceb
--- /dev/null
+++ b/app/src/main/res/drawable/ic_back_arrow.xml
@@ -0,0 +1,13 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+  <path
+      android:fillColor="#1C274C"
+      android:pathData="M20.75,12C20.75,11.5858 20.4142,11.25 20,11.25H10.75V12.75H20C20.4142,12.75 20.75,12.4142 20.75,12Z"
+      android:fillAlpha="0.5"/>
+  <path
+      android:fillColor="#1C274C"
+      android:pathData="M10.75,18C10.75,18.3034 10.5673,18.5768 10.287,18.6929C10.0068,18.809 9.6842,18.7449 9.4697,18.5304L3.4697,12.5304C3.329,12.3897 3.25,12.1989 3.25,12C3.25,11.8011 3.329,11.6103 3.4697,11.4697L9.4697,5.4697C9.6842,5.2552 10.0068,5.191 10.287,5.3071C10.5673,5.4232 10.75,5.6967 10.75,6.0000V18Z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_block_ads.xml b/app/src/main/res/drawable/ic_block_ads.xml
new file mode 100644
index 0000000..3737dea
--- /dev/null
+++ b/app/src/main/res/drawable/ic_block_ads.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM4,12c0,-4.42 3.58,-8 8,-8 1.85,0 3.55,0.63 4.9,1.69L5.69,16.9C4.63,15.55 4,13.85 4,12zM12,20c-1.85,0 -3.55,-0.63 -4.9,-1.69L18.31,7.1C19.37,8.45 20,10.15 20,12c0,4.42 -3.58,8 -8,8z" />
+</vector>
diff --git a/app/src/main/res/drawable/ic_calendar_month.xml b/app/src/main/res/drawable/ic_calendar_month.xml
new file mode 100644
index 0000000..6595b38
--- /dev/null
+++ b/app/src/main/res/drawable/ic_calendar_month.xml
@@ -0,0 +1,13 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="#FFFFFF"
+        android:pathData="M20,3h-1V1h-2v2H7V1H5v2H4c-1.1,0 -2,0.9 -2,2v14c0,1.1 0.9,2 2,2h16c1.1,0 2,-0.9 2,-2V5c0,-1.1 -0.9,-2 -2,-2zM20,19H4V8h16v11z"/>
+    <path
+        android:fillColor="#FFFFFF"
+        android:pathData="M7,10h2v2H7zM11,10h2v2h-2zM15,10h2v2h-2zM7,14h2v2H7zM11,14h2v2h-2zM15,14h2v2h-2z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_check.xml b/app/src/main/res/drawable/ic_check.xml
new file mode 100644
index 0000000..aa8d444
--- /dev/null
+++ b/app/src/main/res/drawable/ic_check.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="#FFFFFF"
+        android:pathData="M9,16.17L4.83,12l-1.42,1.41L9,19 21,7l-1.41,-1.41z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_chevron_left.xml b/app/src/main/res/drawable/ic_chevron_left.xml
new file mode 100644
index 0000000..b80d2d3
--- /dev/null
+++ b/app/src/main/res/drawable/ic_chevron_left.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M14.71,6.71c0.39,0.39 0.39,1.02 0,1.41L10.83,12l3.88,3.88c0.39,0.39 0.39,1.02 0,1.41 -0.39,0.39 -1.02,0.39 -1.41,0L8.71,12.7c-0.39,-0.39 -0.39,-1.02 0,-1.41L13.3,6.7c0.38,-0.38 1.02,-0.38 1.41,0.01z" />
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_chevron_right.xml b/app/src/main/res/drawable/ic_chevron_right.xml
new file mode 100644
index 0000000..542a427
--- /dev/null
+++ b/app/src/main/res/drawable/ic_chevron_right.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M9.29,6.71c-0.39,0.39 -0.39,1.02 0,1.41L13.17,12l-3.88,3.88c-0.39,0.39 -0.39,1.02 0,1.41 0.39,0.39 1.02,0.39 1.41,0l4.59,-4.59c0.39,-0.39 0.39,-1.02 0,-1.41L10.7,6.7c-0.38,-0.38 -1.02,-0.38 -1.41,0.01z" />
+</vector>
diff --git a/app/src/main/res/drawable/ic_clear_all.xml b/app/src/main/res/drawable/ic_clear_all.xml
new file mode 100644
index 0000000..153f408
--- /dev/null
+++ b/app/src/main/res/drawable/ic_clear_all.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M6,19c0,1.1 0.9,2 2,2h8c1.1,0 2,-0.9 2,-2V7H6v12zM19,4h-3.5l-1,-1h-5l-1,1H5v2h14V4z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_close.xml b/app/src/main/res/drawable/ic_close.xml
new file mode 100644
index 0000000..f544d93
--- /dev/null
+++ b/app/src/main/res/drawable/ic_close.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="#5F6368"
+        android:pathData="M19,6.41L17.59,5 12,10.59 6.41,5 5,6.41 10.59,12 5,17.59 6.41,19 12,13.41 17.59,19 19,17.59 13.41,12z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_delete.xml b/app/src/main/res/drawable/ic_delete.xml
new file mode 100644
index 0000000..d7ede84
--- /dev/null
+++ b/app/src/main/res/drawable/ic_delete.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M6,19c0,1.1 0.9,2 2,2h8c1.1,0 2,-0.9 2,-2V7H6v12zM19,4h-3.5l-1,-1h-5l-1,1H5v2h14V4z" />
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_download.xml b/app/src/main/res/drawable/ic_download.xml
new file mode 100644
index 0000000..91065b3
--- /dev/null
+++ b/app/src/main/res/drawable/ic_download.xml
@@ -0,0 +1,13 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+  <path
+      android:pathData="M22,16.0003V15.0003C22,12.1718 22,10.7581 21.1211,9.8794C20.2424,9.0007 18.8282,9.0007 15.9998,9.0007H7.9998C5.1713,9.0007 3.7571,9.0007 2.8785,9.8794C2,10.7579 2,12.1711 2,14.9981V15.0003V16.0003C2,18.8287 2,20.2429 2.8787,21.1216C3.7574,22.0003 5.1716,22.0003 8,22.0003H16H16C18.8284,22.0003 20.2426,22.0003 21.1213,21.1216C22,20.2429 22,18.8287 22,16.0003Z"
+      android:fillColor="#1C274C"
+      android:fillAlpha="0.5"/>
+  <path
+      android:pathData="M12,1.25C11.5858,1.25 11.25,1.5858 11.25,2V12.9726L9.5694,11.0119C9.2999,10.6974 8.8264,10.661 8.5119,10.9306C8.1974,11.2001 8.161,11.6736 8.4305,11.9881L11.4305,15.4881C11.573,15.6543 11.781,15.75 12,15.75C12.2189,15.75 12.4269,15.6543 12.5694,15.4881L15.5694,11.9881C15.839,11.6736 15.8026,11.2001 15.4881,10.9306C15.1736,10.661 14.7001,10.6974 14.4305,11.0119L12.75,12.9726V2C12.75,1.5858 12.4142,1.25 12,1.25Z"
+      android:fillColor="#1C274C"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_folder.xml b/app/src/main/res/drawable/ic_folder.xml
new file mode 100644
index 0000000..b81654d
--- /dev/null
+++ b/app/src/main/res/drawable/ic_folder.xml
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorOnSurface">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M20,6h-8l-2,-2L4,4c-1.1,0 -1.99,0.9 -1.99,2L2,18c0,1.1 0.9,2 2,2h16c1.1,0 2,-0.9 2,-2L22,8c0,-1.1 -0.9,-2 -2,-2zM20,18L4,18L4,8h16v10z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_format_align_center.xml b/app/src/main/res/drawable/ic_format_align_center.xml
new file mode 100644
index 0000000..d7bd7ee
--- /dev/null
+++ b/app/src/main/res/drawable/ic_format_align_center.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorOnSurface">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M7,15v2h10v-2H7zM3,21h18v-2H3V21zM3,13h18v-2H3V13zM7,7v2h10V7H7zM3,3v2h18V3H3z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_format_align_justify.xml b/app/src/main/res/drawable/ic_format_align_justify.xml
new file mode 100644
index 0000000..ff22068
--- /dev/null
+++ b/app/src/main/res/drawable/ic_format_align_justify.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorOnSurface">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M3,21h18v-2H3V21zM3,17h18v-2H3V17zM3,13h18v-2H3V13zM3,9h18V7H3V9zM3,3v2h18V3H3z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_format_align_left.xml b/app/src/main/res/drawable/ic_format_align_left.xml
new file mode 100644
index 0000000..f2c056c
--- /dev/null
+++ b/app/src/main/res/drawable/ic_format_align_left.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorOnSurface">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M15,15H3v2h12V15zM15,7H3v2h12V7zM3,13h18v-2H3V13zM3,21h18v-2H3V21zM3,3v2h18V3H3z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_format_align_right.xml b/app/src/main/res/drawable/ic_format_align_right.xml
new file mode 100644
index 0000000..4cd962e
--- /dev/null
+++ b/app/src/main/res/drawable/ic_format_align_right.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorOnSurface">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M3,21h18v-2H3V21zM9,17v-2h12v2H9zM3,13h18v-2H3V13zM9,9v-2h12v2H9zM3,3v2h18V3H3z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_forward_arrow.xml b/app/src/main/res/drawable/ic_forward_arrow.xml
new file mode 100644
index 0000000..9f6228b
--- /dev/null
+++ b/app/src/main/res/drawable/ic_forward_arrow.xml
@@ -0,0 +1,13 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+  <path
+      android:fillColor="#1C274C"
+      android:pathData="M3.25,12C3.25,11.5858 3.5858,11.25 4,11.25H13.25V12.75H4C3.5858,12.75 3.25,12.4142 3.25,12Z"
+      android:fillAlpha="0.5"/>
+  <path
+      android:fillColor="#1C274C"
+      android:pathData="M13.25,12.75V18C13.25,18.3034 13.4327,18.5768 13.713,18.6929C13.9932,18.809 14.3158,18.7449 14.5303,18.5304L20.5303,12.5304C20.671,12.3897 20.75,12.1989 20.75,12C20.75,11.8011 20.671,11.6103 20.5303,11.4697L14.5303,5.4697C14.3158,5.2552 13.9932,5.191 13.713,5.3071C13.4327,5.4232 13.25,5.6967 13.25,6.0000V11.25V12.75Z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_globe.xml b/app/src/main/res/drawable/ic_globe.xml
new file mode 100644
index 0000000..044f2e5
--- /dev/null
+++ b/app/src/main/res/drawable/ic_globe.xml
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <!-- Left hemisphere -->
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M2.02783,11.25C2.41136,6.07745 6.72957,2 12.0001,2C11.1693,2 10.4295,2.36421 9.82093,2.92113C9.21541,3.47525 8.70371,4.24878 8.28983,5.16315C7.87352,6.08292 7.55013,7.15868 7.33126,8.32611C7.1558,9.26194 7.04903,10.2485 7.01344,11.25H2.02783ZM2.02783,12.75H7.01344C7.04903,13.7515 7.1558,14.7381 7.33126,15.6739C7.55013,16.8413 7.87351,17.9171 8.28983,18.8368C8.70371,19.7512 9.21541,20.5247 9.82093,21.0789C10.4295,21.6358 11.1693,22 12.0001,22C6.72957,22 2.41136,17.9226 2.02783,12.75Z"/>
+    <!-- Top right quadrant -->
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M12.0001,2C12.831,2 13.5708,2.36421 14.1793,2.92113C14.7849,3.47525 15.2966,4.24878 15.7104,5.16315C16.1267,6.08292 16.4501,7.15868 16.669,8.32612C16.8445,9.26194 16.9512,10.2485 16.9868,11.25H21.9724C21.5889,6.07745 17.2707,2 12.0001,2Z"/>
+    <!-- Bottom right quadrant -->
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M16.669,15.6739C16.4501,16.8413 16.1267,17.9171 15.7104,18.8368C15.2966,19.7512 14.7849,20.5247 14.1793,21.0789C13.5708,21.6358 12.831,22 12.0001,22C17.2707,22 21.5889,17.9226 21.9724,12.75H16.9868C16.9512,13.7515 16.8445,14.7381 16.669,15.6739Z"/>
+    <!-- Top half of inner globe with opacity -->
+    <path
+        android:fillColor="@android:color/white"
+        android:fillAlpha="0.5"
+        android:pathData="M12.0002,3.39551C11.7252,3.39551 11.3699,3.51252 10.9568,3.89058C10.5406,4.27142 10.124,4.86831 9.7559,5.68153C9.39025,6.48936 9.09334,7.46456 8.88902,8.55435C8.72811,9.41258 8.62829,10.3223 8.59326,11.2502H15.4071C15.3721,10.3223 15.2723,9.41258 15.1113,8.55435C14.907,7.46457 14.6101,6.48937 14.2445,5.68153C13.8764,4.86831 13.4597,4.27142 13.0436,3.89058C12.6305,3.51252 12.2752,3.39551 12.0002,3.39551Z"/>
+    <!-- Bottom half of inner globe with opacity -->
+    <path
+        android:fillColor="@android:color/white"
+        android:fillAlpha="0.5"
+        android:pathData="M8.88902,15.446C9.09334,16.5358 9.39025,17.511 9.7559,18.3188C10.124,19.132 10.5406,19.7289 10.9568,20.1097C11.3699,20.4878 11.7252,20.6048 12.0002,20.6048C12.2752,20.6048 12.6305,20.4878 13.0436,20.1097C13.4597,19.7289 13.8764,19.132 14.2445,18.3188C14.6101,17.511 14.907,16.5358 15.1113,15.446C15.2723,14.5877 15.3721,13.678 15.4071,12.7502H8.59326C8.62829,13.678 8.72811,14.5877 8.88902,15.446Z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_history.xml b/app/src/main/res/drawable/ic_history.xml
new file mode 100644
index 0000000..8e689bf
--- /dev/null
+++ b/app/src/main/res/drawable/ic_history.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M13,3c-4.97,0 -9,4.03 -9,9L1,12l3.89,3.89 0.07,0.14L9,12L6,12c0,-3.87 3.13,-7 7,-7s7,3.13 7,7 -3.13,7 -7,7c-1.93,0 -3.68,-0.79 -4.94,-2.06l-1.42,1.42C8.27,19.99 10.51,21 13,21c4.97,0 9,-4.03 9,-9s-4.03,-9 -9,-9zM12,8v5l4.28,2.54 0.72,-1.21 -3.5,-2.08L13.5,8L12,8z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_history_empty.xml b/app/src/main/res/drawable/ic_history_empty.xml
new file mode 100644
index 0000000..8edd84d
--- /dev/null
+++ b/app/src/main/res/drawable/ic_history_empty.xml
@@ -0,0 +1,13 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorOnSurfaceVariant">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M13,3c-4.97,0 -9,4.03 -9,9H1l3.89,3.89 0.07,0.14L9,12H6c0,-3.87 3.13,-7 7,-7s7,3.13 7,7 -3.13,7 -7,7c-1.93,0 -3.68,-0.79 -4.94,-2.06l-1.42,1.42C8.27,19.99 10.51,21 13,21c4.97,0 9,-4.03 9,-9s-4.03,-9 -9,-9z"/>
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M12,8v5l4.28,2.54 0.72,-1.21 -3.5,-2.08V8z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_javascript.xml b/app/src/main/res/drawable/ic_javascript.xml
new file mode 100644
index 0000000..83c2512
--- /dev/null
+++ b/app/src/main/res/drawable/ic_javascript.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M12,14.5c0,0.83 -0.67,1.5 -1.5,1.5S9,15.33 9,14.5V9h1.5v5.5zM14.5,14.5c0,0.83 -0.67,1.5 -1.5,1.5s-1.5,-0.67 -1.5,-1.5V9H13v5.5zM16,8H8V6h8v2zM19,4L5,4c-1.1,0 -2,0.9 -2,2v12c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2L21,6c0,-1.1 -0.9,-2 -2,-2zM19,18L5,18L5,6h14v12z" />
+</vector>
diff --git a/app/src/main/res/drawable/ic_launch.xml b/app/src/main/res/drawable/ic_launch.xml
new file mode 100644
index 0000000..599c629
--- /dev/null
+++ b/app/src/main/res/drawable/ic_launch.xml
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorOnSurface">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M19,19H5V5h7V3H5c-1.11,0 -2,0.9 -2,2v14c0,1.1 0.89,2 2,2h14c1.1,0 2,-0.9 2,-2v-7h-2v7zM14,3v2h3.59l-9.83,9.83 1.41,1.41L19,6.41V10h2V3h-7z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_launcher_background.xml b/app/src/main/res/drawable/ic_launcher_background.xml
new file mode 100644
index 0000000..690b05b
--- /dev/null
+++ b/app/src/main/res/drawable/ic_launcher_background.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="108dp"
+    android:height="108dp"
+    android:viewportWidth="1080"
+    android:viewportHeight="1080">
+    <path
+        android:fillColor="#FFFFFF"
+        android:pathData="M0,0h1080v1080h-1080z" />
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_launcher_foreground.xml b/app/src/main/res/drawable/ic_launcher_foreground.xml
new file mode 100644
index 0000000..e01e5b8
--- /dev/null
+++ b/app/src/main/res/drawable/ic_launcher_foreground.xml
@@ -0,0 +1,97 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android" xmlns:aapt="http://schemas.android.com/aapt"
+    android:viewportWidth="920"
+    android:viewportHeight="920"
+    android:width="24dp"
+    android:height="24dp">
+
+    <group
+        android:translateX="460"
+        android:translateY="440">
+        <group
+                android:rotation="-42.06606"
+                android:scaleX="2.984022"
+                android:scaleY="1.091"
+                android:translateX="149.15"
+                android:translateY="212.38">
+            <group
+                    android:rotation="95.05558">
+                <group
+                        android:translateX="-50"
+                        android:translateY="-50">
+                    <path
+                            android:pathData="M94.75 50C94.75 56.213 89.514 61.25 83.054 61.25L16.946 61.25C10.486 61.25 5.25 56.213 5.25 50L5.25 50C5.25 43.787 10.486 38.75 16.945999999999998 38.75L83.053 38.75C89.514 38.75 94.75 43.787 94.75 50L94.75 50z"
+                            android:fillColor="#389AD6"
+                            android:strokeColor="#2A5081"
+                            android:strokeWidth="7"/>
+                </group>
+            </group>
+        </group>
+        <group
+            android:scaleX="12.5"
+            android:scaleY="12.5"
+            android:translateX="-138.85"
+            android:translateY="-40.01">
+            <group
+                android:translateX="-20.9"
+                android:translateY="-28.79">
+                <path
+                    android:pathData="M20.54 18.83C20.54 18.83 19 28.17 25.38 32.58C25.63 33 26.68 38.91 23.38 38.75C20.08 38.59 16.08 37.33 16.08 32C16.08 26.67 15.63 21.33 20.54 18.83Z"
+                    android:fillColor="#9DCBF4" />
+            </group>
+        </group>
+        <group
+            android:scaleX="12.5"
+            android:scaleY="12.5"
+            android:translateX="-12.61"
+            android:translateY="34.05">
+            <group
+                android:translateX="-31"
+                android:translateY="-35.04">
+                <path
+                    android:pathData="M17.79 20.42C17.24 20.990000000000002 17.46 22.8 17.419999999999998 23.51C17.2 27.220000000000002 16.61 31.51 18.979999999999997 34.75C19.859999999999996 35.94 21.409999999999997 36.56 22.619999999999997 35.47C23.83 34.379999999999995 24.549999999999997 34.1 25.139999999999997 35.69C25.519999999999996 36.69 25.539999999999996 37.87 25.879999999999995 38.919999999999995C26.799999999999997 41.74999999999999 30.459999999999994 46.339999999999996 32.05 46.24999999999999C32.941026017056366 46.038122519077525 33.76562354494654 45.60864463996806 34.45 45C36.970000000000006 43.35 39.45 41.77 42.550000000000004 42.54C44.14000000000001 42.93 45.300000000000004 42.94 46.470000000000006 41.62C46.89000000000001 41.15 48.050000000000004 39.879999999999995 48.06000000000001 39.269999999999996C47.99000000000001 43.67999999999999 44.06000000000001 46.91 40.06000000000001 48.029999999999994C32.06000000000001 50.279999999999994 21.67000000000001 52.029999999999994 16.06000000000001 40.029999999999994C10.45000000000001 28.029999999999994 17.77 20.44 17.79 20.42Z"
+                    android:fillColor="#389AD6" />
+            </group>
+        </group>
+        <group
+            android:scaleX="12.5"
+            android:scaleY="-12.5"
+            android:translateX="0.32">
+            <group
+                android:translateX="-32.04"
+                android:translateY="-31.99">
+                <path
+                    android:pathData="M44.79 19.29C51.410177206462734 25.935769361530006 51.81672150361394 36.55155332652406 45.7242042960021 43.68417070912446C39.63168708839026 50.816788091724845 29.08286343210834 52.074749508318504 21.483902694128325 46.57485929539081C13.88494195614831 41.074969082463106 11.783693398047483 30.661280881155633 16.655411816993002 22.645087501619024C21.52713023593852 14.628894122082409 31.738381192101677 11.697938413234478 40.119999999999955 15.90999999999998"
+                    android:strokeColor="#2A5081"
+                    android:strokeWidth="2"
+                    android:strokeLineCap="round"
+                    android:strokeLineJoin="round" />
+            </group>
+        </group>
+        <group
+            android:scaleX="12.5"
+            android:scaleY="-12.5"
+            android:translateX="0.45"
+            android:translateY="0.09">
+            <group
+                android:translateX="-32.05"
+                android:translateY="-32">
+                <path
+                    android:pathData="M36.73 22.09C38.00577005699805 25.235327675987325 38.631670952821395 28.60634826164457 38.57 31.99999999999999C38.57 39.87 35.65 46.25 32.05 46.25C28.449999999999996 46.25 25.52 39.87 25.52 32C25.52 24.130000000000003 28.44 17.75 32 17.75C33.10048210128786 17.80870554470488 34.127989403203856 18.318841212205427 34.84 19.16"
+                    android:strokeColor="#2A5081"
+                    android:strokeWidth="2"
+                    android:strokeLineCap="round"
+                    android:strokeLineJoin="round" />
+            </group>
+        </group>
+        <group
+            android:scaleX="12.5"
+            android:scaleY="-12.5"
+            android:translateX="159.94"
+            android:translateY="164.15">
+            <path
+                android:pathData="M1 0A1 1 0 0 1 -1 0A1 1 0 0 1 1 0Z"
+                android:fillColor="#2A5081" />
+        </group>
+    </group>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_menu.xml b/app/src/main/res/drawable/ic_menu.xml
new file mode 100644
index 0000000..239e372
--- /dev/null
+++ b/app/src/main/res/drawable/ic_menu.xml
@@ -0,0 +1,10 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorOnSurface">
+  <path
+      android:fillColor="@android:color/white"
+      android:pathData="M3,18h18v-2L3,16v2zM3,13h18v-2L3,11v2zM3,6v2h18L21,6L3,6z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_minimize.xml b/app/src/main/res/drawable/ic_minimize.xml
new file mode 100644
index 0000000..a08d6b6
--- /dev/null
+++ b/app/src/main/res/drawable/ic_minimize.xml
@@ -0,0 +1,13 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+  <path
+      android:fillColor="#1C274C"
+      android:pathData="M12,22C17.5228,22 22,17.5228 22,12C22,6.4772 17.5228,2 12,2C6.4772,2 2,6.4772 2,12C2,17.5228 6.4772,22 12,22Z"
+      android:fillAlpha="0.5"/>
+  <path
+      android:fillColor="#1C274C"
+      android:pathData="M21.5303,2.4697C21.8232,2.7626 21.8232,3.2374 21.5303,3.5303L13.8107,11.25H17.3438C17.758,11.25 18.0938,11.5858 18.0938,12C18.0938,12.4142 17.758,12.75 17.3438,12.75H12C11.5858,12.75 11.25,12.4142 11.25,12L11.25,6.6563C11.25,6.242 11.5858,5.9063 12,5.9063C12.4142,5.9063 12.75,6.242 12.75,6.6563L12.75,10.1893L20.4697,2.4697C20.7626,2.1768 21.2374,2.1768 21.5303,2.4697Z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_more_vert.xml b/app/src/main/res/drawable/ic_more_vert.xml
new file mode 100644
index 0000000..4c25dec
--- /dev/null
+++ b/app/src/main/res/drawable/ic_more_vert.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorOnSurface">
+    
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M12,8c1.1,0 2,-0.9 2,-2s-0.9,-2 -2,-2 -2,0.9 -2,2 0.9,2 2,2zM12,10c-1.1,0 -2,0.9 -2,2s0.9,2 2,2 2,-0.9 2,-2 -0.9,-2 -2,-2zM12,16c-1.1,0 -2,0.9 -2,2s0.9,2 2,2 2,-0.9 2,-2 -0.9,-2 -2,-2z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_offline.xml b/app/src/main/res/drawable/ic_offline.xml
new file mode 100644
index 0000000..4a99cd0
--- /dev/null
+++ b/app/src/main/res/drawable/ic_offline.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="48dp"
+        android:height="48dp"
+        android:viewportWidth="24"
+        android:viewportHeight="24"
+        android:tint="?attr/colorControlNormal">
+    <path
+            android:fillColor="@android:color/white"
+            android:pathData="M12,2C6.5,2 2,6.5 2,12s4.5,10 10,10s10,-4.5 10,-10S17.5,2 12,2zM4,12c0,-4.4 3.6,-8 8,-8c1.8,0 3.5,0.6 4.9,1.7L5.7,16.9C4.6,15.5 4,13.8 4,12zM12,20c-1.8,0 -3.5,-0.6 -4.9,-1.7L18.3,7.1C19.4,8.5 20,10.2 20,12c0,4.4 -3.6,8 -8,8z" />
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_open_full.xml b/app/src/main/res/drawable/ic_open_full.xml
new file mode 100644
index 0000000..18db803
--- /dev/null
+++ b/app/src/main/res/drawable/ic_open_full.xml
@@ -0,0 +1,16 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+        android:width="24dp"
+        android:height="24dp"
+        android:viewportWidth="24"
+        android:viewportHeight="24">
+
+    <path
+            android:fillColor="#1C274C"
+            android:fillAlpha="0.5"
+            android:pathData="M3.464,3.464C4.929,2 7.286,2 12,2s7.071,0 8.536,1.464C22,4.929 22,7.286 22,12s0,7.071 -1.464,8.536C19.071,22 16.714,22 12,22s-7.071,0 -8.536,-1.464C2,19.071 2,16.714 2,12s0,-7.071 1.464,-8.536Z" />
+
+    <path
+            android:fillColor="#1C274C"
+            android:fillType="evenOdd"
+            android:pathData="M16.47,1.47a0.75,0.75 0 0,1 1.06,0l5,5a0.75,0.75 0 0,1 0,1.06l-5,5a0.75,0.75 0 1,1 -1.06,-1.06L20.19,7.75H14c-1.55,0 -2.47,0.757 -2.79,1.079l-0.19,0.192l-0.192,0.191C10.507,9.533 9.75,10.449 9.75,12v3a0.75,0.75 0 0,1 -1.5,0v-3c0,-2.084 1.027,-3.36 1.521,-3.852l0.189,-0.189l0.189,-0.189C10.64,7.277 11.916,6.25 14,6.25h6.19l-3.72,-3.72a0.75,0.75 0 0,1 0,-1.06Z" />
+</vector>
diff --git a/app/src/main/res/drawable/ic_read_mode.xml b/app/src/main/res/drawable/ic_read_mode.xml
new file mode 100644
index 0000000..8c37451
--- /dev/null
+++ b/app/src/main/res/drawable/ic_read_mode.xml
@@ -0,0 +1,29 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <!-- Notebook body with opacity -->
+    <path
+        android:fillColor="@android:color/white"
+        android:fillAlpha="0.5"
+        android:pathData="M12,5.21395C11.3163,5.21395 10.9426,5.05264 10.2823,4.87544C8.9381,4.51475 8.04921,3.76429 7,3.48742C6.11349,3.25349 4.95877,3.13488 3.9824,3.07487C2.8863,3.0075 2,3.89961 2,4.99778V16.1436C2,17.2545 2.90605,18.1534 4.01486,18.2228C4.98428,18.2834 6.12329,18.402 7,18.6333C7.48596,18.7616 8.21615,19.0645 8.87295,19.3592C9.87751,19.81 10.7139,20.3926 12,20.3926C13.2861,20.3926 14.1225,19.81 15.127,19.3592C15.7838,19.0645 16.514,18.7616 17,18.6333C17.8767,18.402 19.0157,18.2834 19.9851,18.2228C21.094,18.1534 22,17.2545 22,16.1436V4.99778C22,3.89961 21.1137,3.0075 20.0176,3.07487C19.0412,3.13488 17.8865,3.25349 17,3.48742C15.9508,3.76429 15.0619,4.51475 13.7177,4.87544C13.0574,5.05264 12.6837,5.21395 12,5.21395Z"/>
+    <!-- Left page line 1 -->
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M4.27257,12.8183C4.37303,12.4164 4.78023,12.1721 5.18208,12.2726L9.18208,13.2726C9.58393,13.373 9.82825,13.7802 9.72778,14.1821C9.62732,14.5839 9.22012,14.8282 8.81828,14.7278L4.81828,13.7278C4.41643,13.6273 4.17211,13.2201 4.27257,12.8183Z"/>
+    <!-- Left page line 2 -->
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M5.18208,8.27257C4.78023,8.17211 4.37303,8.41643 4.27257,8.81828C4.17211,9.22012 4.41643,9.62732 4.81828,9.72778L8.81828,10.7278C9.22012,10.8282 9.62732,10.5839 9.72778,10.1821C9.82825,9.78023 9.58393,9.37303 9.18208,9.27257L5.18208,8.27257Z"/>
+    <!-- Right page line 1 -->
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M19.7274,12.8183C19.627,12.4164 19.2198,12.1721 18.8179,12.2726L14.8179,13.2726C14.4161,13.373 14.1718,13.7802 14.2722,14.1821C14.3727,14.5839 14.7799,14.8282 15.1817,14.7278L19.1817,13.7278C19.5836,13.6273 19.8279,13.2201 19.7274,12.8183Z"/>
+    <!-- Right page line 2 -->
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M18.8179,8.27257C19.2198,8.17211 19.627,8.41643 19.7274,8.81828C19.8279,9.22012 19.5836,9.62732 19.1817,9.72778L15.1817,10.7278C14.7799,10.8282 14.3727,10.5839 14.2722,10.1821C14.1718,9.78023 14.4161,9.37303 14.8179,9.27257L18.8179,8.27257Z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_save.xml b/app/src/main/res/drawable/ic_save.xml
new file mode 100644
index 0000000..d38b94b
--- /dev/null
+++ b/app/src/main/res/drawable/ic_save.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M19,12v7L5,19v-7L3,12v7c0,1.1 0.9,2 2,2h14c1.1,0 2,-0.9 2,-2v-7h-2zM13,12.67l2.59,-2.58L17,11.5l-5,5 -5,-5 1.41,-1.41L11,12.67L11,3h2z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_save_article.xml b/app/src/main/res/drawable/ic_save_article.xml
new file mode 100644
index 0000000..dc69561
--- /dev/null
+++ b/app/src/main/res/drawable/ic_save_article.xml
@@ -0,0 +1,28 @@
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+  <path
+      android:pathData="M12,7L12,14M12,14L15,11M12,14L9,11"
+      android:strokeLineJoin="round"
+      android:strokeWidth="1.5"
+      android:fillColor="#00000000"
+      android:strokeColor="#1C274C"
+      android:strokeLineCap="round"/>
+  <path
+      android:pathData="M16,17H12H8"
+      android:strokeLineJoin="round"
+      android:strokeWidth="1.5"
+      android:fillColor="#00000000"
+      android:strokeColor="#1C274C"
+      android:strokeLineCap="round"/>
+  <path
+      android:pathData="M2,12C2,7.2859 2,4.9289 3.4645,3.4645C4.9289,2 7.286,2 12,2C16.714,2 19.0711,2 20.5355,3.4645C22,4.9289 22,7.286 22,12C22,16.714 22,19.0711 20.5355,20.5355C19.0711,22 16.714,22 12,22C7.286,22 4.9289,22 3.4645,20.5355C2,19.0711 2,16.714 2,12Z"
+      android:strokeLineJoin="round"
+      android:strokeWidth="1.5"
+      android:fillColor="#00000000"
+      android:strokeColor="#1C274C"
+      android:strokeLineCap="round"
+      android:fillAlpha="0.5"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_search.xml b/app/src/main/res/drawable/ic_search.xml
new file mode 100644
index 0000000..d42d391
--- /dev/null
+++ b/app/src/main/res/drawable/ic_search.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="#757575"
+        android:pathData="M15.5,14h-0.79l-0.28,-0.27C15.41,12.59 16,11.11 16,9.5 16,5.91 13.09,3 9.5,3S3,5.91 3,9.5 5.91,16 9.5,16c1.61,0 3.09,-0.59 4.23,-1.57l0.27,0.28v0.79l5,4.99L20.49,19l-4.99,-5zM9.5,14C7.01,14 5,11.99 5,9.5S7.01,5 9.5,5 14,7.01 14,9.5 11.99,14 9.5,14z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_settings.xml b/app/src/main/res/drawable/ic_settings.xml
new file mode 100644
index 0000000..dca8dd8
--- /dev/null
+++ b/app/src/main/res/drawable/ic_settings.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M19.14,12.94c0.04,-0.3 0.06,-0.61 0.06,-0.94 0,-0.32 -0.02,-0.64 -0.07,-0.94l2.03,-1.58c0.18,-0.14 0.23,-0.41 0.12,-0.61l-1.92,-3.32c-0.12,-0.22 -0.37,-0.29 -0.59,-0.22l-2.39,0.96c-0.5,-0.38 -1.03,-0.7 -1.62,-0.94L14.4,2.81c-0.04,-0.24 -0.24,-0.41 -0.48,-0.41h-3.84c-0.24,0 -0.43,0.17 -0.47,0.41L9.25,5.35C8.66,5.59 8.12,5.92 7.63,6.29L5.24,5.33c-0.22,-0.08 -0.47,0 -0.59,0.22L2.74,8.87c-0.12,0.21 -0.08,0.47 0.12,0.61l2.03,1.58C4.84,11.36 4.8,11.69 4.8,12s0.02,0.64 0.07,0.94l-2.03,1.58c-0.18,0.14 -0.23,0.41 -0.12,0.61l1.92,3.32c0.12,0.22 0.37,0.29 0.59,0.22l2.39,-0.96c0.5,0.38 1.03,0.7 1.62,0.94l0.36,2.54c0.05,0.24 0.24,0.41 0.48,0.41h3.84c0.24,0 0.44,-0.17 0.47,-0.41l0.36,-2.54c0.59,-0.24 1.13,-0.56 1.62,-0.94l2.39,0.96c0.22,0.08 0.47,0 0.59,-0.22l1.92,-3.32c0.12,-0.22 0.07,-0.47 -0.12,-0.61l-2.01,-1.58zM12,15.6c-1.98,0 -3.6,-1.62 -3.6,-3.6s1.62,-3.6 3.6,-3.6 3.6,1.62 3.6,3.6 -1.62,3.6 -3.6,3.6z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_share.xml b/app/src/main/res/drawable/ic_share.xml
new file mode 100644
index 0000000..12069c6
--- /dev/null
+++ b/app/src/main/res/drawable/ic_share.xml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <!-- Share icon with three connection points -->
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M13.803,5.33333C13.803,3.49238 15.3022,2 17.1515,2C19.0008,2 20.5,3.49238 20.5,5.33333C20.5,7.17428 19.0008,8.66667 17.1515,8.66667C16.2177,8.66667 15.3738,8.28596 14.7671,7.67347L10.1317,10.8295C10.1745,11.0425 10.197,11.2625 10.197,11.4872C10.197,11.9322 10.109,12.3576 9.94959,12.7464L15.0323,16.0858C15.6092,15.6161 16.3473,15.3333 17.1515,15.3333C19.0008,15.3333 20.5,16.8257 20.5,18.6667C20.5,20.5076 19.0008,22 17.1515,22C15.3022,22 13.803,20.5076 13.803,18.6667C13.803,18.1845 13.9062,17.7255 14.0917,17.3111L9.05007,13.9987C8.46196,14.5098 7.6916,14.8205 6.84848,14.8205C4.99917,14.8205 3.5,13.3281 3.5,11.4872C3.5,9.64623 4.99917,8.15385 6.84848,8.15385C7.9119,8.15385 8.85853,8.64725 9.47145,9.41518L13.9639,6.35642C13.8594,6.03359 13.803,5.6896 13.803,5.33333Z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_summarize.xml b/app/src/main/res/drawable/ic_summarize.xml
new file mode 100644
index 0000000..0af23cd
--- /dev/null
+++ b/app/src/main/res/drawable/ic_summarize.xml
@@ -0,0 +1,25 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <!-- Book body with opacity -->
+    <path
+        android:fillColor="@android:color/white"
+        android:fillAlpha="0.5"
+        android:pathData="M4.72718,2.73332C5.03258,2.42535 5.46135,2.22456 6.27103,2.11478C7.10452,2.00177 8.2092,2 9.7931,2H14.2069C15.7908,2 16.8955,2.00177 17.729,2.11478C18.5387,2.22456 18.9674,2.42535 19.2728,2.73332C19.5782,3.0413 19.7773,3.47368 19.8862,4.2902C19.9982,5.13073 20,6.24474 20,7.84202L20,18H7.42598C6.34236,18 5.96352,18.0057 5.67321,18.0681C5.15982,18.1785 4.71351,18.4151 4.38811,18.7347C4.27837,18.8425 4.22351,18.8964 4.09696,19.2397C4.02435,19.4367 4,19.5687 4,19.7003V7.84202C4,6.24474 4.00176,5.13073 4.11382,4.2902C4.22268,3.47368 4.42179,3.0413 4.72718,2.73332Z"/>
+    <!-- Book bottom part -->
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M20,18H7.42598C6.34236,18 5.96352,18.0057 5.67321,18.0681C5.15982,18.1785 4.71351,18.4151 4.38811,18.7347C4.27837,18.8425 4.22351,18.8964 4.09696,19.2397C3.97041,19.5831 3.99045,19.7288 4.03053,20.02C4.03761,20.0714 4.04522,20.1216 4.05343,20.1706C4.16271,20.8228 4.36259,21.1682 4.66916,21.4142C4.97573,21.6602 5.40616,21.8206 6.21896,21.9083C7.05566,21.9986 8.1646,22 9.75461,22H14.1854C15.7754,22 16.8844,21.9986 17.7211,21.9083C18.5339,21.8206 18.9643,21.6602 19.2709,21.4142C19.4705,21.254 19.6249,21.0517 19.7385,20.75H8C7.58579,20.75 7.25,20.4142 7.25,20C7.25,19.5858 7.58579,19.25 8,19.25H19.9754C19.9926,18.8868 19.9982,18.4741 20,18Z"/>
+    <!-- First line -->
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M7.25,7C7.25,6.58579 7.58579,6.25 8,6.25H16C16.4142,6.25 16.75,6.58579 16.75,7C16.75,7.41421 16.4142,7.75 16,7.75H8C7.58579,7.75 7.25,7.41421 7.25,7Z"/>
+    <!-- Second line -->
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M8,9.75C7.58579,9.75 7.25,10.0858 7.25,10.5C7.25,10.9142 7.58579,11.25 8,11.25H13C13.4142,11.25 13.75,10.9142 13.75,10.5C13.75,10.0858 13.4142,9.75 13,9.75H8Z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_today.xml b/app/src/main/res/drawable/ic_today.xml
new file mode 100644
index 0000000..743db2a
--- /dev/null
+++ b/app/src/main/res/drawable/ic_today.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="#FFFFFF"
+        android:pathData="M19,3h-1V1h-2v2H8V1H6v2H5c-1.11,0 -1.99,0.9 -1.99,2L3,19c0,1.1 0.89,2 2,2h14c1.1,0 2,-0.9 2,-2V5c0,-1.1 -0.9,-2 -2,-2zM19,19H5V8h14v11zM7,10h5v5H7z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_web_page.xml b/app/src/main/res/drawable/ic_web_page.xml
new file mode 100644
index 0000000..f871aea
--- /dev/null
+++ b/app/src/main/res/drawable/ic_web_page.xml
@@ -0,0 +1,11 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24"
+    android:tint="?attr/colorControlNormal">
+    <path
+        android:fillColor="@android:color/white"
+        android:pathData="M19,3H5C3.89,3 3,3.9 3,5v14c0,1.1 0.89,2 2,2h14c1.1,0 2,-0.9 2,-2V5C21,3.9 20.1,3 19,3zM19,19H5V7h14V19zM17,12H7v-2h10V12zM13,16H7v-2h6V16z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/ic_website.xml b/app/src/main/res/drawable/ic_website.xml
new file mode 100644
index 0000000..15ce5d9
--- /dev/null
+++ b/app/src/main/res/drawable/ic_website.xml
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="24dp"
+    android:height="24dp"
+    android:viewportWidth="24"
+    android:viewportHeight="24">
+    <path
+        android:fillColor="@android:color/black"
+        android:pathData="M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM11,19.93c-3.95,-0.49 -7,-3.85 -7,-7.93 0,-0.62 0.08,-1.21 0.21,-1.79L9,15v1c0,1.1 0.9,2 2,2v1.93zM17.9,17.39c-0.26,-0.81 -1,-1.39 -1.9,-1.39h-1v-3c0,-0.55 -0.45,-1 -1,-1H8v-2h2c0.55,0 1,-0.45 1,-1V7h2c1.1,0 2,-0.9 2,-2v-0.41c2.93,1.19 5,4.06 5,7.41 0,2.08 -0.8,3.97 -2.1,5.39z"/>
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/pill_background_selector.xml b/app/src/main/res/drawable/pill_background_selector.xml
new file mode 100644
index 0000000..c0696ff
--- /dev/null
+++ b/app/src/main/res/drawable/pill_background_selector.xml
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="utf-8"?>
+<selector xmlns:android="http://schemas.android.com/apk/res/android">
+    
+    <!-- Focused state -->
+    <item android:state_focused="true">
+        <shape android:shape="rectangle">
+            <corners android:radius="20dp" />
+            <solid android:color="#FFFFFF" />
+            <stroke
+                android:width="2dp"
+                android:color="?attr/colorPrimary" />
+        </shape>
+    </item>
+    
+    <!-- Default state -->
+    <item>
+        <shape android:shape="rectangle">
+            <corners android:radius="20dp" />
+            <solid android:color="#F5F5F5" />
+            <stroke
+                android:width="1dp"
+                android:color="#E0E0E0" />
+        </shape>
+    </item>
+    
+</selector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/progress_circle.xml b/app/src/main/res/drawable/progress_circle.xml
new file mode 100644
index 0000000..4417095
--- /dev/null
+++ b/app/src/main/res/drawable/progress_circle.xml
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="utf-8"?>
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:id="@android:id/background">
+        <shape
+            android:shape="ring"
+            android:thickness="5dp"
+            android:useLevel="false">
+            <solid android:color="#330D47A1" />
+        </shape>
+    </item>
+    <item android:id="@android:id/progress">
+        <rotate
+            android:fromDegrees="270"
+            android:toDegrees="270">
+            <shape
+                android:shape="ring"
+                android:thickness="5dp"
+                android:useLevel="true">
+                <solid android:color="#0D47A1" />
+            </shape>
+        </rotate>
+    </item>
+</layer-list>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/resize_bar_background.xml b/app/src/main/res/drawable/resize_bar_background.xml
new file mode 100644
index 0000000..ba551f2
--- /dev/null
+++ b/app/src/main/res/drawable/resize_bar_background.xml
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="utf-8"?>
+<shape xmlns:android="http://schemas.android.com/apk/res/android"
+    android:shape="rectangle">
+    <solid android:color="#CCCCCC" />
+    <corners android:radius="2dp" />
+</shape>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/resize_corner_bottom_left.xml b/app/src/main/res/drawable/resize_corner_bottom_left.xml
new file mode 100644
index 0000000..15af934
--- /dev/null
+++ b/app/src/main/res/drawable/resize_corner_bottom_left.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="32dp"
+    android:height="32dp"
+    android:viewportWidth="32"
+    android:viewportHeight="32">
+    
+    <!-- Black outline for better visibility -->
+    <path
+        android:pathData="M4,16 A12,12 0 0,0 16,28"
+        android:strokeWidth="3"
+        android:strokeColor="?attr/colorPrimary"
+        android:strokeLineCap="round" />
+        
+    <!-- Simple bold white arc -->
+    <path
+        android:pathData="M4,16 A12,12 0 0,0 16,28"
+        android:strokeWidth="2"
+        android:strokeColor="#FFFFFF"
+        android:strokeLineCap="round" />
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/resize_corner_bottom_right.xml b/app/src/main/res/drawable/resize_corner_bottom_right.xml
new file mode 100644
index 0000000..cf78cc6
--- /dev/null
+++ b/app/src/main/res/drawable/resize_corner_bottom_right.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="32dp"
+    android:height="32dp"
+    android:viewportWidth="32"
+    android:viewportHeight="32">
+    
+    <!-- Black outline for better visibility -->
+    <path
+        android:pathData="M28,16 A12,12 0 0,1 16,28"
+        android:strokeWidth="3"
+        android:strokeColor="?attr/colorPrimary"
+        android:strokeLineCap="round" />
+        
+    <!-- Simple bold white arc -->
+    <path
+        android:pathData="M28,16 A12,12 0 0,1 16,28"
+        android:strokeWidth="2"
+        android:strokeColor="#FFFFFF"
+        android:strokeLineCap="round" />
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/resize_corner_top_left.xml b/app/src/main/res/drawable/resize_corner_top_left.xml
new file mode 100644
index 0000000..d78ca26
--- /dev/null
+++ b/app/src/main/res/drawable/resize_corner_top_left.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="32dp"
+    android:height="32dp"
+    android:viewportWidth="32"
+    android:viewportHeight="32">
+    
+    <!-- Black outline for better visibility -->
+    <path
+        android:pathData="M4,16 A12,12 0 0,1 16,4"
+        android:strokeWidth="3"
+        android:strokeColor="?attr/colorPrimary"
+        android:strokeLineCap="round" />
+        
+    <!-- Simple bold white arc -->
+    <path
+        android:pathData="M4,16 A12,12 0 0,1 16,4"
+        android:strokeWidth="2"
+        android:strokeColor="#FFFFFF"
+        android:strokeLineCap="round" />
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/drawable/resize_corner_top_right.xml b/app/src/main/res/drawable/resize_corner_top_right.xml
new file mode 100644
index 0000000..eae7d6b
--- /dev/null
+++ b/app/src/main/res/drawable/resize_corner_top_right.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<vector xmlns:android="http://schemas.android.com/apk/res/android"
+    android:width="32dp"
+    android:height="32dp"
+    android:viewportWidth="32"
+    android:viewportHeight="32">
+    
+    <!-- Black outline for better visibility -->
+    <path
+        android:pathData="M28,16 A12,12 0 0,0 16,4"
+        android:strokeWidth="3"
+        android:strokeColor="?attr/colorPrimary"
+        android:strokeLineCap="round" />
+        
+    <!-- Simple bold white arc -->
+    <path
+        android:pathData="M28,16 A12,12 0 0,0 16,4"
+        android:strokeWidth="2"
+        android:strokeColor="#FFFFFF"
+        android:strokeLineCap="round" />
+</vector>
\ No newline at end of file
diff --git a/app/src/main/res/layout/activity_history.xml b/app/src/main/res/layout/activity_history.xml
new file mode 100644
index 0000000..3c7e743
--- /dev/null
+++ b/app/src/main/res/layout/activity_history.xml
@@ -0,0 +1,114 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".presentation.ui.history.HistoryActivity">
+
+    <androidx.appcompat.widget.Toolbar
+        android:id="@+id/toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:minHeight="?attr/actionBarSize"
+        android:background="?attr/colorPrimary"
+        android:elevation="4dp"
+        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
+        app:contentInsetStart="8dp"
+        app:contentInsetStartWithNavigation="8dp"
+        app:layout_constraintTop_toTopOf="parent"
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light">
+        
+        <include layout="@layout/toolbar_custom_history" />
+        
+    </androidx.appcompat.widget.Toolbar>
+
+    <androidx.swiperefreshlayout.widget.SwipeRefreshLayout
+        android:id="@+id/swipe_refresh_layout"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        app:layout_constraintBottom_toTopOf="@+id/search_card"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@id/toolbar">
+
+        <androidx.recyclerview.widget.RecyclerView
+            android:id="@+id/history_recycler_view"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:clipToPadding="false"
+            android:paddingTop="8dp"
+            android:paddingBottom="8dp"
+            tools:listitem="@layout/item_history_card" />
+
+    </androidx.swiperefreshlayout.widget.SwipeRefreshLayout>
+
+    <LinearLayout
+        android:id="@+id/empty_history_view"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:gravity="center"
+        android:padding="32dp"
+        android:visibility="gone"
+        app:layout_constraintBottom_toTopOf="@+id/search_card"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@id/toolbar"
+        tools:visibility="visible">
+
+        <ImageView
+            android:layout_width="96dp"
+            android:layout_height="96dp"
+            android:src="@drawable/ic_history_empty"
+            android:alpha="0.3"
+            android:contentDescription="@string/no_history_found" />
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="16dp"
+            android:text="@string/no_history_found"
+            android:textAppearance="@style/TextAppearance.AppCompat.Large"
+            android:textColor="?android:attr/textColorSecondary"
+            android:gravity="center" />
+
+        <TextView
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="8dp"
+            android:text="@string/history_empty_message"
+            android:textAppearance="@style/TextAppearance.AppCompat.Medium"
+            android:textColor="?android:attr/textColorTertiary"
+            android:gravity="center" />
+
+    </LinearLayout>
+
+    <!-- Search Bar (Initially hidden) -->
+    <com.google.android.material.card.MaterialCardView
+        android:id="@+id/search_card"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="16dp"
+        android:layout_marginEnd="16dp"
+        android:layout_marginBottom="8dp"
+        android:visibility="gone"
+        app:cardCornerRadius="28dp"
+        app:cardElevation="2dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent">
+
+        <androidx.appcompat.widget.SearchView
+            android:id="@+id/search_view"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@android:color/transparent"
+            app:queryHint="Search history..."
+            app:iconifiedByDefault="false"
+            app:closeIcon="@drawable/ic_close"
+            app:searchIcon="@drawable/ic_search" />
+
+    </com.google.android.material.card.MaterialCardView>
+
+</androidx.constraintlayout.widget.ConstraintLayout>
diff --git a/app/src/main/res/layout/activity_main.xml b/app/src/main/res/layout/activity_main.xml
new file mode 100644
index 0000000..59e6770
--- /dev/null
+++ b/app/src/main/res/layout/activity_main.xml
@@ -0,0 +1,127 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".presentation.ui.main.MainActivity">
+
+    <!-- App Logo and Title -->
+    <ImageView
+        android:id="@+id/app_logo"
+        android:layout_width="96dp"
+        android:layout_height="96dp"
+        android:layout_marginStart="16dp"
+        android:layout_marginTop="64dp"
+        android:contentDescription="@string/app_logo"
+        android:src="@drawable/ic_launcher_foreground"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <TextView
+        android:id="@+id/app_title"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="0dp"
+        android:text="@string/app_name"
+        android:textAppearance="@style/TextAppearance.AppCompat.Medium"
+        android:textColor="?android:attr/colorPrimary"
+        android:textStyle="bold"
+        app:layout_constraintBottom_toBottomOf="@id/app_logo"
+        app:layout_constraintStart_toEndOf="@id/app_logo"
+        app:layout_constraintTop_toTopOf="@id/app_logo" />
+
+    <!-- Tagline -->
+    <TextView
+        android:id="@+id/app_description"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginBottom="32dp"
+        android:gravity="center"
+        android:text="@string/app_description"
+        android:textAppearance="@style/TextAppearance.AppCompat.Medium"
+        android:textColor="?android:attr/textColorSecondary"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_bias="0.85" />
+
+    <!-- Main content area (empty now as we've moved elements) -->
+    <LinearLayout
+        android:id="@+id/main_content"
+        android:layout_width="0dp"
+        android:layout_height="0dp"
+        android:layout_margin="24dp"
+        android:gravity="center"
+        android:orientation="vertical"
+        android:visibility="gone"
+        app:layout_constraintBottom_toTopOf="@id/toolbar"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@id/app_logo" />
+
+    <!-- Toolbar at the bottom -->
+    <androidx.appcompat.widget.Toolbar
+        android:id="@+id/toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:minHeight="?attr/actionBarSize"
+        android:background="?attr/colorPrimary"
+        android:theme="@style/ThemeOverlay.AppCompat.ActionBar"
+        app:contentInsetStart="0dp"
+        app:contentInsetStartWithNavigation="0dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light">
+        
+        <androidx.constraintlayout.widget.ConstraintLayout
+            android:layout_width="match_parent"
+            android:layout_height="match_parent">
+            
+            <!-- Address Bar -->
+            <EditText
+                android:id="@+id/address_bar"
+                android:layout_width="0dp"
+                android:layout_height="40dp"
+                android:layout_marginStart="8dp"
+                android:layout_marginEnd="8dp"
+                android:layout_marginTop="18dp"
+                android:layout_marginBottom="18dp"
+                android:background="@drawable/address_bar_background"
+                android:hint="@string/enter_url_hint"
+                android:imeOptions="actionGo"
+                android:inputType="textUri"
+                android:maxLines="1"
+                android:paddingStart="16dp"
+                android:paddingEnd="16dp"
+                android:textSize="16sp"
+                android:textColor="?android:attr/textColorSecondary"
+                android:textColorHint="?android:attr/textColorSecondary"
+                android:selectAllOnFocus="true"
+                app:layout_constraintTop_toTopOf="parent"
+                app:layout_constraintBottom_toBottomOf="parent"
+                app:layout_constraintStart_toStartOf="parent"
+                app:layout_constraintEnd_toStartOf="@+id/menu_button" />
+            
+            <!-- Menu Button -->
+            <ImageButton
+                android:id="@+id/menu_button"
+                android:layout_width="48dp"
+                android:layout_height="48dp"
+                android:layout_marginEnd="8dp"
+                android:background="?attr/selectableItemBackgroundBorderless"
+                android:contentDescription="@string/menu"
+                android:padding="12dp"
+                android:src="@drawable/ic_more_vert"
+                app:tint="@android:color/white"
+                app:layout_constraintTop_toTopOf="parent"
+                app:layout_constraintBottom_toBottomOf="parent"
+                app:layout_constraintEnd_toEndOf="parent" />
+                
+        </androidx.constraintlayout.widget.ConstraintLayout>
+        
+    </androidx.appcompat.widget.Toolbar>
+
+</androidx.constraintlayout.widget.ConstraintLayout>
diff --git a/app/src/main/res/layout/activity_offline_reader.xml b/app/src/main/res/layout/activity_offline_reader.xml
new file mode 100644
index 0000000..6d2da33
--- /dev/null
+++ b/app/src/main/res/layout/activity_offline_reader.xml
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+                                                   xmlns:app="http://schemas.android.com/apk/res-auto"
+                                                   android:layout_width="match_parent"
+                                                   android:layout_height="match_parent">
+
+    <androidx.appcompat.widget.Toolbar
+        android:id="@+id/toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:minHeight="?attr/actionBarSize"
+        android:background="?attr/colorPrimary"
+        android:elevation="4dp"
+        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
+        app:contentInsetStart="8dp"
+        app:contentInsetStartWithNavigation="8dp"
+        app:layout_constraintTop_toTopOf="parent"
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light">
+        
+        <include layout="@layout/toolbar_custom_reader" />
+        
+    </androidx.appcompat.widget.Toolbar>
+
+    <WebView
+        android:id="@+id/webview_offline_reader"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        app:layout_constraintBottom_toTopOf="@+id/search_card"
+        app:layout_constraintTop_toBottomOf="@id/toolbar" />
+
+    <!-- Search Bar (Initially hidden) -->
+    <com.google.android.material.card.MaterialCardView
+        android:id="@+id/search_card"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="16dp"
+        android:layout_marginEnd="16dp"
+        android:layout_marginBottom="8dp"
+        android:visibility="gone"
+        app:cardCornerRadius="28dp"
+        app:cardElevation="2dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent">
+
+        <androidx.appcompat.widget.SearchView
+            android:id="@+id/search_view"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:background="@android:color/transparent"
+            app:queryHint="Search in article..."
+            app:iconifiedByDefault="false"
+            app:closeIcon="@drawable/ic_close"
+            app:searchIcon="@drawable/ic_search" />
+
+    </com.google.android.material.card.MaterialCardView>
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/activity_saved_articles.xml b/app/src/main/res/layout/activity_saved_articles.xml
new file mode 100644
index 0000000..ef7fce4
--- /dev/null
+++ b/app/src/main/res/layout/activity_saved_articles.xml
@@ -0,0 +1,135 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.drawerlayout.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/drawer_layout"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".presentation.ui.saved.SavedArticlesActivity">
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <androidx.appcompat.widget.Toolbar
+            android:id="@+id/toolbar"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:minHeight="?attr/actionBarSize"
+            android:background="?attr/colorPrimary"
+            android:elevation="4dp"
+            android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
+            app:contentInsetStart="8dp"
+            app:contentInsetStartWithNavigation="8dp"
+            app:layout_constraintTop_toTopOf="parent"
+            app:popupTheme="@style/ThemeOverlay.AppCompat.Light">
+            
+            <include layout="@layout/toolbar_custom_saved" />
+            
+        </androidx.appcompat.widget.Toolbar>
+
+        <androidx.swiperefreshlayout.widget.SwipeRefreshLayout
+            android:id="@+id/swipe_refresh_layout"
+            android:layout_width="match_parent"
+            android:layout_height="0dp"
+            app:layout_constraintBottom_toTopOf="@+id/search_card"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/toolbar">
+
+            <androidx.recyclerview.widget.RecyclerView
+                android:id="@+id/recycler_view_saved_articles"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:clipToPadding="false"
+                android:paddingTop="8dp"
+                android:paddingBottom="8dp"
+                tools:listitem="@layout/item_history_card" />
+
+        </androidx.swiperefreshlayout.widget.SwipeRefreshLayout>
+
+        <LinearLayout
+            android:id="@+id/empty_history_view"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+            android:gravity="center"
+            android:padding="32dp"
+            android:visibility="gone"
+            app:layout_constraintBottom_toTopOf="@+id/search_card"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/toolbar"
+            tools:visibility="visible">
+
+            <ImageView
+                android:layout_width="96dp"
+                android:layout_height="96dp"
+                android:src="@drawable/ic_history_empty"
+                android:alpha="0.3"
+                android:contentDescription="@string/no_saved_articles_found" />
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="16dp"
+                android:text="@string/no_saved_articles_found"
+                android:textAppearance="@style/TextAppearance.AppCompat.Large"
+                android:textColor="?android:attr/textColorSecondary"
+                android:gravity="center" />
+
+            <TextView
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_marginTop="8dp"
+                android:text="@string/saved_articles_empty_message"
+                android:textAppearance="@style/TextAppearance.AppCompat.Medium"
+                android:textColor="?android:attr/textColorTertiary"
+                android:gravity="center" />
+
+        </LinearLayout>
+
+        <!-- Search Bar (Initially hidden) -->
+        <com.google.android.material.card.MaterialCardView
+            android:id="@+id/search_card"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_marginStart="16dp"
+            android:layout_marginEnd="16dp"
+            android:layout_marginBottom="8dp"
+            android:visibility="gone"
+            app:cardCornerRadius="28dp"
+            app:cardElevation="2dp"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintEnd_toEndOf="parent">
+
+            <androidx.appcompat.widget.SearchView
+                android:id="@+id/search_view"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:background="@android:color/transparent"
+                app:queryHint="Search saved articles..."
+                app:iconifiedByDefault="false"
+                app:closeIcon="@drawable/ic_close"
+                app:searchIcon="@drawable/ic_search" />
+
+        </com.google.android.material.card.MaterialCardView>
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+
+    <!-- Side panel for folders -->
+    <com.google.android.material.navigation.NavigationView
+        android:id="@+id/nav_view"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:layout_gravity="start"
+        android:fitsSystemWindows="true">
+
+        <include
+            android:id="@+id/side_panel"
+            layout="@layout/layout_side_panel" />
+
+    </com.google.android.material.navigation.NavigationView>
+
+</androidx.drawerlayout.widget.DrawerLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/activity_settings.xml b/app/src/main/res/layout/activity_settings.xml
new file mode 100644
index 0000000..f899769
--- /dev/null
+++ b/app/src/main/res/layout/activity_settings.xml
@@ -0,0 +1,309 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".presentation.ui.settings.SettingsActivity">
+
+    <androidx.appcompat.widget.Toolbar
+        android:id="@+id/toolbar"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:minHeight="?attr/actionBarSize"
+        android:background="?attr/colorPrimary"
+        android:elevation="4dp"
+        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"
+        app:contentInsetStart="8dp"
+        app:contentInsetStartWithNavigation="8dp"
+        app:layout_constraintTop_toTopOf="parent"
+        app:popupTheme="@style/ThemeOverlay.AppCompat.Light">
+        
+        <include layout="@layout/toolbar_custom_settings" />
+        
+    </androidx.appcompat.widget.Toolbar>
+
+    <ScrollView
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintTop_toBottomOf="@id/toolbar">
+
+        <LinearLayout
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:orientation="vertical"
+            android:padding="16dp">
+
+            <!-- Browser Settings -->
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:paddingTop="16dp"
+                android:paddingBottom="8dp"
+                android:text="@string/browser_settings"
+                android:textAppearance="@style/TextAppearance.AppCompat.Medium"
+                android:textColor="?attr/colorPrimary"
+                android:textStyle="bold" />
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:padding="4dp">
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:orientation="horizontal"
+                    android:gravity="center_vertical"
+                    android:padding="1dp"
+                    android:layout_marginBottom="1dp">
+
+                    <ImageView
+                        android:layout_width="24dp"
+                        android:layout_height="24dp"
+                        android:src="@drawable/ic_javascript"
+                        android:layout_marginEnd="16dp"
+                        android:contentDescription="@string/enable_javascript"
+                        app:tint="?attr/colorPrimary" />
+
+                    <TextView
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:text="@string/enable_javascript"
+                        android:textSize="16sp" />
+
+                    <com.google.android.material.switchmaterial.SwitchMaterial
+                        android:id="@+id/switch_javascript"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content" />
+                </LinearLayout>
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:orientation="horizontal"
+                    android:gravity="center_vertical"
+                    android:padding="1dp"
+                    android:layout_marginBottom="1dp">
+
+                    <ImageView
+                        android:layout_width="24dp"
+                        android:layout_height="24dp"
+                        android:src="@drawable/ic_block_ads"
+                        android:layout_marginEnd="16dp"
+                        android:contentDescription="@string/block_ads_and_trackers"
+                        app:tint="?attr/colorPrimary" />
+
+                    <TextView
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:text="@string/block_ads_and_trackers"
+                        android:textSize="16sp" />
+
+                    <com.google.android.material.switchmaterial.SwitchMaterial
+                        android:id="@+id/switch_block_ads"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content" />
+                </LinearLayout>
+            </LinearLayout>
+
+            <!-- Privacy Settings -->
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:paddingTop="8dp"
+                android:paddingBottom="4dp"
+                android:text="@string/privacy"
+                android:textAppearance="@style/TextAppearance.AppCompat.Medium"
+                android:textColor="?attr/colorPrimary"
+                android:textStyle="bold" />
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:padding="4dp">
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:orientation="horizontal"
+                    android:gravity="center_vertical"
+                    android:padding="1dp"
+                    android:layout_marginBottom="1dp">
+
+                    <ImageView
+                        android:layout_width="24dp"
+                        android:layout_height="24dp"
+                        android:src="@drawable/ic_history"
+                        android:layout_marginEnd="16dp"
+                        android:contentDescription="@string/save_browsing_history"
+                        app:tint="?attr/colorPrimary" />
+
+                    <TextView
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:text="@string/save_browsing_history"
+                        android:textSize="16sp" />
+
+                    <com.google.android.material.switchmaterial.SwitchMaterial
+                        android:id="@+id/switch_save_history"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content" />
+                </LinearLayout>
+                
+                <!-- Show URL Bar Setting -->
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:orientation="horizontal"
+                    android:gravity="center_vertical"
+                    android:padding="1dp"
+                    android:layout_marginBottom="1dp"
+                    android:layout_marginTop="8dp">
+
+                    <ImageView
+                        android:layout_width="24dp"
+                        android:layout_height="24dp"
+                        android:src="@drawable/ic_web_page"
+                        android:layout_marginEnd="16dp"
+                        android:contentDescription="@string/show_url_bar"
+                        app:tint="?attr/colorPrimary" />
+
+                    <TextView
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:text="@string/show_url_bar"
+                        android:textSize="16sp" />
+
+                    <com.google.android.material.switchmaterial.SwitchMaterial
+                        android:id="@+id/switch_show_url_bar"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content" />
+                </LinearLayout>
+            </LinearLayout>
+            
+            <!-- Accessibility Settings -->
+            <TextView
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:paddingTop="8dp"
+                android:paddingBottom="4dp"
+                android:text="@string/accessibility"
+                android:textAppearance="@style/TextAppearance.AppCompat.Medium"
+                android:textColor="?attr/colorPrimary"
+                android:textStyle="bold" />
+
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical"
+                android:padding="4dp">
+
+                <LinearLayout
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:orientation="horizontal"
+                    android:gravity="center_vertical"
+                    android:padding="1dp"
+                    android:layout_marginBottom="1dp">
+
+                    <ImageView
+                        android:layout_width="24dp"
+                        android:layout_height="24dp"
+                        android:src="@drawable/ic_web_page"
+                        android:layout_marginEnd="16dp"
+                        android:contentDescription="@string/automatic_font_sizing"
+                        app:tint="?attr/colorPrimary" />
+
+                    <LinearLayout
+                        android:layout_width="0dp"
+                        android:layout_height="wrap_content"
+                        android:layout_weight="1"
+                        android:orientation="vertical">
+
+                        <TextView
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:text="@string/automatic_font_sizing"
+                            android:textSize="16sp" />
+
+                        <TextView
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:text="@string/automatic_font_sizing_desc"
+                            android:textSize="12sp"
+                            android:textColor="?android:attr/textColorSecondary" />
+                    </LinearLayout>
+
+                    <com.google.android.material.switchmaterial.SwitchMaterial
+                        android:id="@+id/switch_auto_font_size"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content" />
+                </LinearLayout>
+
+                <LinearLayout
+                    android:id="@+id/layout_manual_font_size"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:orientation="vertical"
+                    android:layout_marginTop="8dp"
+                    android:layout_marginLeft="42dp">
+
+                    <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:text="@string/font_size"
+                        android:textSize="14sp"
+                        android:paddingBottom="4dp"
+                        android:layout_marginLeft="14dp"/>
+
+                    <TextView
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:text="@string/font_size_desc"
+                        android:textSize="12sp"
+                        android:paddingBottom="8dp"
+                        android:layout_marginLeft="14dp"
+                        android:textColor="?android:attr/textColorSecondary"/>
+
+                    <SeekBar
+                        android:id="@+id/seekbar_font_size"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:max="30"
+                        android:min="8"
+                        android:progress="16" />
+
+                    <TextView
+                        android:id="@+id/text_font_size_preview"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:text="@string/font_size_preview"
+                        android:textSize="16sp"
+                        android:gravity="center"
+                        android:paddingTop="8dp"
+                        android:paddingBottom="8dp" />
+                        
+                    <TextView
+                        android:id="@+id/text_font_size_sample"
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:text="@string/font_size_sample_text"
+                        android:textSize="16sp"
+                        android:paddingTop="8dp"
+                        android:paddingBottom="16dp"
+                        android:layout_marginLeft="14dp"
+                        android:layout_marginRight="14dp"/>
+                </LinearLayout>
+            </LinearLayout>
+        </LinearLayout>
+    </ScrollView>
+
+</androidx.constraintlayout.widget.ConstraintLayout>
diff --git a/app/src/main/res/layout/bubble_layout.xml b/app/src/main/res/layout/bubble_layout.xml
new file mode 100644
index 0000000..dbf452f
--- /dev/null
+++ b/app/src/main/res/layout/bubble_layout.xml
@@ -0,0 +1,767 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="wrap_content"
+    android:layout_height="wrap_content"
+    android:clipChildren="false"
+    android:clipToPadding="false">
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:orientation="vertical"
+        android:clipChildren="false"
+        android:clipToPadding="false">
+
+        <!-- Bubble Head -->
+        <FrameLayout
+            android:id="@+id/bubble_container"
+            android:layout_width="68dp"
+            android:layout_height="68dp"
+            android:clipChildren="false"
+            android:clipToPadding="false">
+
+            <!-- Progress Bar positioned around the bubble -->
+            <ProgressBar
+                android:id="@+id/progress_circular"
+                style="?android:attr/progressBarStyleHorizontal"
+                android:layout_width="64dp"
+                android:layout_height="64dp"
+                android:layout_gravity="center"
+                android:background="@android:color/transparent"
+                android:indeterminate="false"
+                android:max="100"
+                android:progress="65"
+                android:progressDrawable="@drawable/progress_circle" />
+
+            <androidx.cardview.widget.CardView
+                android:layout_width="48dp"
+                android:layout_height="48dp"
+                android:layout_gravity="center"
+                app:cardCornerRadius="24dp"
+                app:cardElevation="4dp">
+                
+                <ImageView
+                    android:id="@+id/bubble_icon"
+                    android:layout_width="match_parent"
+                    android:layout_height="match_parent"
+                    android:background="@drawable/bubble_background"
+                    android:contentDescription="@string/bubble_description"
+                    android:padding="0dp"
+                    android:scaleType="fitCenter"
+                    tools:src="@drawable/ic_globe" />
+            </androidx.cardview.widget.CardView>
+        </FrameLayout>
+
+        <!-- Container for URL bar and expanded content with resize handles overlay -->
+        <FrameLayout
+            android:id="@+id/expandable_content_wrapper"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:padding="2dp"
+            android:clipChildren="false"
+            android:clipToPadding="false">
+
+            <!-- Content container for URL bar and expanded content -->
+            <LinearLayout
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:orientation="vertical">
+
+                <!-- URL Bar - shown when bubble is expanded -->
+                <com.google.android.material.card.MaterialCardView
+                    android:id="@+id/url_bar_container"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginStart="8dp"
+                    android:layout_marginEnd="8dp"
+                    android:layout_marginTop="0dp"
+                    android:layout_marginBottom="0dp"
+                    app:cardElevation="3dp"
+                    app:cardBackgroundColor="@android:color/white"
+                    app:strokeWidth="0.5dp"
+                    app:strokeColor="#E0E0E0"
+                    android:visibility="gone">
+                    
+                    <LinearLayout
+                        android:layout_width="match_parent"
+                        android:layout_height="wrap_content"
+                        android:orientation="horizontal"
+                        android:gravity="center_vertical"
+                        android:paddingStart="10dp"
+                        android:paddingEnd="8dp"
+                        android:paddingTop="2dp"
+                        android:paddingBottom="2dp">
+                        
+                        <!-- Site icon -->
+                        <ImageView
+                            android:id="@+id/url_bar_icon"
+                            android:layout_width="24dp"
+                            android:layout_height="24dp"
+                            android:layout_marginEnd="10dp"
+                            android:src="@drawable/ic_globe"
+                            android:contentDescription="@string/site_icon" />
+                        
+                        <!-- URL text -->
+                        <EditText
+                            android:id="@+id/url_bar_text"
+                            android:layout_width="0dp"
+                            android:layout_height="26dp"
+                            android:layout_weight="1"
+                            android:textSize="16sp"
+                            android:textColor="#000000"
+                            android:textColorHint="?android:attr/textColorSecondary"
+                            android:singleLine="true"
+                            android:ellipsize="middle"
+                            android:background="@drawable/pill_background_selector"
+                            android:hint="@string/enter_url_hint"
+                            android:inputType="textUri"
+                            android:imeOptions="actionGo"
+                            android:selectAllOnFocus="true"
+                            android:focusable="true"
+                            android:focusableInTouchMode="true"
+                            android:clickable="true"
+                            android:paddingStart="16dp"
+                            android:paddingEnd="16dp"
+                            android:paddingTop="2dp"
+                            android:paddingBottom="2dp"
+                            android:text="https://google.com" />
+                        
+                        <!-- Minimize button -->
+                        <com.google.android.material.button.MaterialButton
+                            android:id="@+id/btn_url_bar_minimize"
+                            style="@style/Widget.MaterialComponents.Button.TextButton.Icon"
+                            android:layout_width="22dp"
+                            android:layout_height="match_parent"
+                            android:layout_marginStart="10dp"
+                            android:layout_marginEnd="0dp"
+                            android:minWidth="0dp"
+                            android:minHeight="0dp"
+                            android:padding="0dp"
+                            android:clickable="true"
+                            android:focusable="true"
+                            android:background="?attr/selectableItemBackgroundBorderless"
+                            app:icon="@drawable/ic_minimize"
+                            app:iconSize="20dp"
+                            app:iconTint="@color/colorPrimary"
+                            android:contentDescription="@string/minimize_bubble" />
+                    </LinearLayout>
+                </com.google.android.material.card.MaterialCardView>
+
+                <!-- Expanded Bubble Content -->
+                <com.google.android.material.card.MaterialCardView
+                    android:id="@+id/expanded_container"
+                    android:layout_width="match_parent"
+                    android:layout_height="wrap_content"
+                    android:layout_marginStart="8dp"
+                    android:layout_marginEnd="8dp"
+                    android:layout_marginTop="2dp"
+                    android:layout_marginBottom="8dp"
+                    app:shapeAppearanceOverlay="@style/ExpandedContainerBottomRoundedCorners"
+                    app:cardElevation="2dp"
+                    app:cardBackgroundColor="@android:color/white"
+                    app:strokeWidth="0.5dp"
+                    app:strokeColor="#E0E0E0"
+                    app:contentPadding="0dp"
+                    android:visibility="gone">
+
+                    <!-- Main Content Area -->
+                    <FrameLayout
+                        android:id="@+id/content_container"
+                        android:layout_width="match_parent"
+                        android:layout_height="match_parent">
+
+                        <!-- WebView for regular bubbles with swipe refresh -->
+                        <androidx.swiperefreshlayout.widget.SwipeRefreshLayout
+                            android:id="@+id/swipe_refresh_layout"
+                            android:layout_width="match_parent"
+                            android:layout_height="match_parent"
+                            android:visibility="gone">
+                            
+                            <WebView
+                                android:id="@+id/web_view"
+                                android:layout_width="match_parent"
+                                android:layout_height="match_parent"
+                                android:background="@android:color/white"
+                                android:hardwareAccelerated="true"
+                                android:scrollbars="vertical"
+                                android:scrollbarStyle="insideOverlay" />
+                                
+                        </androidx.swiperefreshlayout.widget.SwipeRefreshLayout>
+                        
+                        <!-- Summary container that will be shown when summarize is clicked -->
+                        <androidx.core.widget.NestedScrollView
+                            android:id="@+id/summary_container"
+                            android:layout_width="match_parent"
+                            android:layout_height="match_parent"
+                            android:visibility="gone">
+                            
+                            <LinearLayout
+                                android:id="@+id/summary_content"
+                                android:layout_width="match_parent"
+                                android:layout_height="wrap_content"
+                                android:orientation="vertical"
+                                android:padding="16dp">
+                                
+                                <TextView
+                                    android:id="@+id/summary_title"
+                                    android:layout_width="match_parent"
+                                    android:layout_height="wrap_content"
+                                    android:textSize="20sp"
+                                    android:textStyle="bold"
+                                    android:layout_marginBottom="16dp"
+                                    android:text="@string/summary_title" />
+                                    
+                                <ProgressBar
+                                    android:id="@+id/summary_progress"
+                                    android:layout_width="wrap_content"
+                                    android:layout_height="wrap_content"
+                                    android:layout_gravity="center"
+                                    android:layout_marginTop="24dp"
+                                    android:layout_marginBottom="24dp" />
+                                    
+                                <!-- Summary points will be added here dynamically -->
+                                
+                            </LinearLayout>
+                            
+                        </androidx.core.widget.NestedScrollView>
+
+                    </FrameLayout>
+
+                    <!-- Feedback message -->
+                    <com.google.android.material.card.MaterialCardView
+                        android:id="@+id/save_message_container"
+                        android:layout_width="wrap_content"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="center"
+                        app:cardCornerRadius="12dp"
+                        app:cardElevation="6dp"
+                        android:visibility="gone">
+                        
+                        <LinearLayout
+                            android:layout_width="wrap_content"
+                            android:layout_height="wrap_content"
+                            android:orientation="horizontal"
+                            android:gravity="center_vertical"
+                            android:padding="12dp">
+                            
+                            <ImageView
+                                android:id="@+id/save_message_icon"
+                                android:layout_width="24dp"
+                                android:layout_height="24dp"
+                                android:layout_marginEnd="8dp"
+                                android:src="@drawable/ic_check"
+                                app:tint="?attr/colorPrimary" />
+                                
+                            <TextView
+                                android:id="@+id/save_message"
+                                android:layout_width="wrap_content"
+                                android:layout_height="wrap_content"
+                                android:textColor="?android:attr/textColorPrimary"
+                                android:textSize="14sp" />
+                        </LinearLayout>
+                    </com.google.android.material.card.MaterialCardView>
+
+                    <!-- Settings panel that appears above the toolbar -->
+                    <com.google.android.material.card.MaterialCardView
+                        android:id="@+id/settings_panel"
+                        android:layout_width="200dp"
+                        android:layout_height="wrap_content"
+                        android:layout_gravity="bottom|center_horizontal"
+                        android:layout_marginBottom="60dp"
+                        app:cardCornerRadius="12dp"
+                        app:cardElevation="12dp"
+                        app:cardBackgroundColor="@android:color/white"
+                        app:strokeWidth="0.5dp"
+                        app:strokeColor="#E0E0E0"
+                        android:visibility="gone"
+                        android:alpha="0"
+                        android:scaleX="0.8"
+                        android:scaleY="0.8">
+                        
+                        <LinearLayout
+                            android:layout_width="match_parent"
+                            android:layout_height="wrap_content"
+                            android:orientation="vertical"
+                            android:padding="16dp">
+                            
+                            <!-- Regular browser settings (visible when not in reader mode) -->
+                            <LinearLayout
+                                android:id="@+id/browser_settings_section"
+                                android:layout_width="match_parent"
+                                android:layout_height="wrap_content"
+                                android:orientation="vertical">
+                                
+                                <!-- Ad blocking toggle -->
+                                <LinearLayout
+                                    android:layout_width="match_parent"
+                                    android:layout_height="wrap_content"
+                                    android:orientation="horizontal"
+                                    android:gravity="center_vertical"
+                                    android:layout_marginBottom="8dp">
+                                    
+                                    <TextView
+                                        android:layout_width="0dp"
+                                        android:layout_height="wrap_content"
+                                        android:layout_weight="1"
+                                        android:text="@string/block_ads"
+                                        android:textColor="#000000"
+                                        android:textSize="13sp" />
+                                        
+                                    <com.google.android.material.switchmaterial.SwitchMaterial
+                                        android:id="@+id/ad_block_switch"
+                                        android:layout_width="wrap_content"
+                                        android:layout_height="wrap_content"
+                                        android:layout_marginStart="16dp" />
+                                </LinearLayout>
+                                
+                                <!-- JavaScript toggle -->
+                                <LinearLayout
+                                    android:layout_width="match_parent"
+                                    android:layout_height="wrap_content"
+                                    android:orientation="horizontal"
+                                    android:gravity="center_vertical"
+                                    android:layout_marginBottom="8dp">
+                                    
+                                    <TextView
+                                        android:layout_width="0dp"
+                                        android:layout_height="wrap_content"
+                                        android:layout_weight="1"
+                                        android:text="@string/enable_javascript"
+                                        android:textColor="#000000"
+                                        android:textSize="13sp" />
+                                        
+                                    <com.google.android.material.switchmaterial.SwitchMaterial
+                                        android:id="@+id/javascript_switch"
+                                        android:layout_width="wrap_content"
+                                        android:layout_height="wrap_content"
+                                        android:layout_marginStart="16dp" />
+                                </LinearLayout>
+                                
+                                <!-- Divider -->
+                                <View
+                                    android:layout_width="match_parent"
+                                    android:layout_height="1dp"
+                                    android:background="#E0E0E0"
+                                    android:layout_marginTop="8dp"
+                                    android:layout_marginBottom="8dp" />
+                                
+                                <!-- Quick actions (Nav/Save/Share) -->
+                                <LinearLayout
+                                    android:layout_width="match_parent"
+                                    android:layout_height="wrap_content"
+                                    android:orientation="horizontal"
+                                    android:gravity="center"
+                                    android:padding="4dp">
+                                    
+                                    <com.google.android.material.button.MaterialButton
+                                        android:id="@+id/btn_nav_back"
+                                        style="@style/Widget.MaterialComponents.Button.TextButton"
+                                        android:layout_width="0dp"
+                                        android:layout_height="40dp"
+                                        android:layout_weight="1"
+                                        android:layout_marginEnd="4dp"
+                                        app:icon="@drawable/ic_back_arrow"
+                                        app:iconGravity="textStart"
+                                        app:iconSize="24dp"
+                                        app:iconTint="@color/colorPrimary" />
+                                    
+                                    <com.google.android.material.button.MaterialButton
+                                        android:id="@+id/btn_nav_forward"
+                                        style="@style/Widget.MaterialComponents.Button.TextButton"
+                                        android:layout_width="0dp"
+                                        android:layout_height="40dp"
+                                        android:layout_weight="1"
+                                        android:layout_marginStart="4dp"
+                                        android:layout_marginEnd="4dp"
+                                        app:icon="@drawable/ic_forward_arrow"
+                                        app:iconGravity="textStart"
+                                        app:iconSize="24dp"
+                                        app:iconTint="@color/colorPrimary" />
+                                    
+                                    <com.google.android.material.button.MaterialButton
+                                        android:id="@+id/btn_save_article_icon"
+                                        style="@style/Widget.MaterialComponents.Button.TextButton"
+                                        android:layout_width="0dp"
+                                        android:layout_height="40dp"
+                                        android:layout_weight="1"
+                                        android:layout_marginStart="4dp"
+                                        android:layout_marginEnd="4dp"
+                                        app:icon="@drawable/ic_download"
+                                        app:iconGravity="textStart"
+                                        app:iconSize="24dp"
+                                        app:iconTint="@color/colorPrimary" />
+                                    
+                                    <com.google.android.material.button.MaterialButton
+                                        android:id="@+id/btn_share_icon"
+                                        style="@style/Widget.MaterialComponents.Button.TextButton"
+                                        android:layout_width="0dp"
+                                        android:layout_height="40dp"
+                                        android:layout_weight="1"
+                                        android:layout_marginStart="4dp"
+                                        app:icon="@drawable/ic_share"
+                                        app:iconGravity="textStart"
+                                        app:iconSize="24dp"
+                                        app:iconTint="@color/colorPrimary" />
+                                </LinearLayout>
+                            </LinearLayout>
+                            
+                            <!-- Reader mode settings (visible only in reader mode) -->
+                            <LinearLayout
+                                android:id="@+id/reader_settings_section"
+                                android:layout_width="match_parent"
+                                android:layout_height="wrap_content"
+                                android:orientation="vertical"
+                                android:visibility="gone">
+                                
+                                <!-- Settings Title -->
+                                <TextView
+                                    android:layout_width="match_parent"
+                                    android:layout_height="wrap_content"
+                                    android:text="@string/reader_settings_title"
+                                    android:textColor="#000000"
+                                    android:textSize="14sp"
+                                    android:textStyle="bold"
+                                    android:layout_marginBottom="12dp"
+                                    android:gravity="center" />
+                                
+                                <!-- Font Size -->
+                                <LinearLayout
+                                    android:layout_width="match_parent"
+                                    android:layout_height="wrap_content"
+                                    android:orientation="vertical"
+                                    android:layout_marginBottom="12dp">
+                                    
+                                    <TextView
+                                        android:layout_width="match_parent"
+                                        android:layout_height="wrap_content"
+                                        android:text="@string/reader_font_size"
+                                        android:textColor="#000000"
+                                        android:textSize="12sp"
+                                        android:layout_marginBottom="4dp" />
+                                    
+                                    <LinearLayout
+                                        android:layout_width="match_parent"
+                                        android:layout_height="wrap_content"
+                                        android:orientation="horizontal"
+                                        android:gravity="center">
+                                        
+                                        <com.google.android.material.button.MaterialButton
+                                            android:id="@+id/btn_font_decrease"
+                                            style="@style/Widget.MaterialComponents.Button.OutlinedButton"
+                                            android:layout_width="32dp"
+                                            android:layout_height="32dp"
+                                            android:minWidth="0dp"
+                                            android:minHeight="0dp"
+                                            app:strokeColor="@color/button_stroke_color"
+                                            app:strokeWidth="1dp"
+                                            app:icon="@drawable/ic_chevron_left"
+                                            app:iconSize="18dp"
+                                            app:iconTint="@color/button_icon_color"
+                                            app:iconPadding="0dp"
+                                            app:iconGravity="textStart"
+                                            android:layout_marginEnd="8dp" />
+                                        
+                                        <TextView
+                                            android:id="@+id/font_size_display"
+                                            android:layout_width="0dp"
+                                            android:layout_height="wrap_content"
+                                            android:layout_weight="1"
+                                            android:text="18sp"
+                                            android:textColor="#000000"
+                                            android:textSize="12sp"
+                                            android:gravity="center" />
+                                        
+                                        <com.google.android.material.button.MaterialButton
+                                            android:id="@+id/btn_font_increase"
+                                            style="@style/Widget.MaterialComponents.Button.OutlinedButton"
+                                            android:layout_width="32dp"
+                                            android:layout_height="32dp"
+                                            android:minWidth="0dp"
+                                            android:minHeight="0dp"
+                                            app:strokeColor="@color/button_stroke_color"
+                                            app:strokeWidth="1dp"
+                                            app:icon="@drawable/ic_chevron_right"
+                                            app:iconSize="18dp"
+                                            app:iconTint="@color/button_icon_color"
+                                            app:iconPadding="0dp"
+                                            app:iconGravity="textStart"
+                                            android:layout_marginStart="8dp" />
+                                    </LinearLayout>
+                                </LinearLayout>
+                                
+                                <!-- Background Color -->
+                                <LinearLayout
+                                    android:layout_width="match_parent"
+                                    android:layout_height="wrap_content"
+                                    android:orientation="vertical"
+                                    android:layout_marginBottom="12dp">
+                                    
+                                    <TextView
+                                        android:layout_width="match_parent"
+                                        android:layout_height="wrap_content"
+                                        android:text="@string/reader_background"
+                                        android:textColor="#000000"
+                                        android:textSize="12sp"
+                                        android:layout_marginBottom="4dp" />
+                                    
+                                    <LinearLayout
+                                        android:layout_width="match_parent"
+                                        android:layout_height="wrap_content"
+                                        android:orientation="horizontal"
+                                        android:gravity="center">
+                                        
+                                        <com.google.android.material.button.MaterialButton
+                                            android:id="@+id/btn_bg_white"
+                                            style="@style/Widget.MaterialComponents.Button.OutlinedButton"
+                                            android:layout_width="0dp"
+                                            android:layout_height="32dp"
+                                            android:layout_weight="1"
+                                            android:minHeight="0dp"
+                                            android:layout_marginEnd="2dp" />
+
+                                        <com.google.android.material.button.MaterialButton
+                                            android:id="@+id/btn_bg_sepia"
+                                            style="@style/Widget.MaterialComponents.Button.OutlinedButton"
+                                            android:layout_width="0dp"
+                                            android:layout_height="32dp"
+                                            android:layout_weight="1"
+                                            android:minHeight="0dp"
+                                            android:layout_marginHorizontal="2dp" />
+                                        
+                                        <com.google.android.material.button.MaterialButton
+                                            android:id="@+id/btn_bg_dark"
+                                            style="@style/Widget.MaterialComponents.Button.OutlinedButton"
+                                            android:layout_width="0dp"
+                                            android:layout_height="32dp"
+                                            android:layout_weight="1"
+                                            android:minHeight="0dp"
+                                            android:layout_marginStart="2dp" />
+                                    </LinearLayout>
+                                </LinearLayout>
+                                
+                                <!-- Text Alignment -->
+                                <LinearLayout
+                                    android:layout_width="match_parent"
+                                    android:layout_height="wrap_content"
+                                    android:orientation="vertical">
+                                    
+                                    <TextView
+                                        android:layout_width="match_parent"
+                                        android:layout_height="wrap_content"
+                                        android:text="@string/reader_text_align"
+                                        android:textColor="#000000"
+                                        android:textSize="12sp"
+                                        android:layout_marginBottom="4dp" />
+                                    
+                                    <LinearLayout
+                                        android:layout_width="match_parent"
+                                        android:layout_height="wrap_content"
+                                        android:orientation="horizontal"
+                                        android:gravity="center">
+                                        
+                                        <com.google.android.material.button.MaterialButton
+                                            android:id="@+id/btn_align_left"
+                                            style="@style/Widget.MaterialComponents.Button.TextButton.Icon"
+                                            android:layout_width="0dp"
+                                            android:layout_height="32dp"
+                                            android:layout_weight="1"
+                                            android:minHeight="0dp"
+                                            app:strokeColor="@color/button_stroke_color"
+                                            app:strokeWidth="1dp"
+                                            app:icon="@drawable/ic_format_align_left"
+                                            app:iconSize="16dp"
+                                            app:iconPadding="0dp"
+                                            app:iconGravity="textStart"
+                                            android:layout_marginEnd="2dp" />
+                                        
+                                        <com.google.android.material.button.MaterialButton
+                                            android:id="@+id/btn_align_center"
+                                            style="@style/Widget.MaterialComponents.Button.TextButton.Icon"
+                                            android:layout_width="0dp"
+                                            android:layout_height="32dp"
+                                            android:layout_weight="1"
+                                            android:minHeight="0dp"
+                                            app:strokeColor="@color/button_stroke_color"
+                                            app:strokeWidth="1dp"
+                                            app:icon="@drawable/ic_format_align_center"
+                                            app:iconSize="16dp"
+                                            app:iconPadding="0dp"
+                                            app:iconGravity="textStart"
+                                            android:layout_marginHorizontal="2dp" />
+                                        
+                                        <com.google.android.material.button.MaterialButton
+                                            android:id="@+id/btn_align_right"
+                                            style="@style/Widget.MaterialComponents.Button.TextButton.Icon"
+                                            android:layout_width="0dp"
+                                            android:layout_height="32dp"
+                                            android:layout_weight="1"
+                                            android:minHeight="0dp"
+                                            app:strokeColor="@color/button_stroke_color"
+                                            app:strokeWidth="1dp"
+                                            app:icon="@drawable/ic_format_align_right"
+                                            app:iconSize="16dp"
+                                            app:iconPadding="0dp"
+                                            app:iconGravity="textStart"
+                                            android:layout_marginHorizontal="2dp" />
+                                        
+                                        <com.google.android.material.button.MaterialButton
+                                            android:id="@+id/btn_align_justify"
+                                            style="@style/Widget.MaterialComponents.Button.TextButton.Icon"
+                                            android:layout_width="0dp"
+                                            android:layout_height="32dp"
+                                            android:layout_weight="1"
+                                            android:minHeight="0dp"
+                                            app:strokeColor="@color/button_stroke_color"
+                                            app:strokeWidth="1dp"
+                                            app:icon="@drawable/ic_format_align_justify"
+                                            app:iconSize="16dp"
+                                            app:iconPadding="0dp"
+                                            app:iconGravity="textStart"
+                                            android:layout_marginStart="2dp" />
+                                    </LinearLayout>
+                                </LinearLayout>
+                                
+                            </LinearLayout>
+                        </LinearLayout>
+                    </com.google.android.material.card.MaterialCardView>
+                    
+                    <!-- Pill-shaped toolbar at the bottom -->
+                    <com.google.android.material.card.MaterialCardView
+                        android:id="@+id/toolbar_container"
+                        android:layout_width="wrap_content"
+                        android:layout_height="32dp"
+                        android:layout_gravity="bottom|center_horizontal"
+                        android:layout_marginBottom="16dp"
+                        app:cardCornerRadius="24dp"
+                        app:cardElevation="6dp"
+                        app:cardBackgroundColor="@android:color/white"
+                        app:strokeWidth="0.5dp"
+                        app:strokeColor="#E0E0E0">
+
+                        <LinearLayout
+                            android:layout_width="wrap_content"
+                            android:layout_height="match_parent"
+                            android:orientation="horizontal"
+                            android:gravity="center_vertical"
+                            android:paddingStart="4dp"
+                            android:paddingEnd="4dp"
+                            android:background="?android:attr/selectableItemBackground">
+
+                            <com.google.android.material.button.MaterialButton
+                                android:id="@+id/btn_close"
+                                style="@style/Widget.QBrowser.Button.CircularIcon"
+                                android:layout_width="40dp"
+                                android:layout_height="40dp"
+                                android:contentDescription="@string/close_bubble"
+                                app:icon="@drawable/ic_close"
+                                app:iconTint="@color/crimson_red"
+                                android:layout_marginEnd="2dp" />
+
+                            <com.google.android.material.button.MaterialButton
+                                android:id="@+id/btn_read_mode"
+                                style="@style/Widget.QBrowser.Button.CircularIcon"
+                                android:layout_width="40dp"
+                                android:layout_height="40dp"
+                                android:contentDescription="@string/read_mode"
+                                app:icon="@drawable/ic_read_mode"
+                                app:iconTint="@color/colorPrimary"
+                                android:layout_marginEnd="2dp" />
+
+                            <com.google.android.material.button.MaterialButton
+                                android:id="@+id/btn_summarize"
+                                style="@style/Widget.QBrowser.Button.CircularIcon"
+                                android:layout_width="40dp"
+                                android:layout_height="40dp"
+                                android:contentDescription="@string/summarize"
+                                app:icon="@drawable/ic_summarize"
+                                app:iconTint="@color/colorPrimary"
+                                android:layout_marginEnd="2dp" />
+
+                            <com.google.android.material.button.MaterialButton
+                                android:id="@+id/btn_minimize"
+                                style="@style/Widget.QBrowser.Button.CircularIcon"
+                                android:layout_width="40dp"
+                                android:layout_height="40dp"
+                                android:contentDescription="@string/minimize_bubble"
+                                app:icon="@drawable/ic_minimize"
+                                app:iconTint="@color/colorPrimary"
+                                android:layout_marginEnd="2dp"
+                                android:visibility="gone" />
+
+                            <com.google.android.material.button.MaterialButton
+                                android:id="@+id/btn_toolbar_settings"
+                                style="@style/Widget.QBrowser.Button.CircularIcon"
+                                android:layout_width="40dp"
+                                android:layout_height="40dp"
+                                android:contentDescription="@string/settings"
+                                app:icon="@drawable/ic_more_vert"
+                                app:iconTint="@color/colorPrimary"
+                                android:layout_marginEnd="2dp" />
+
+                        </LinearLayout>
+                    </com.google.android.material.card.MaterialCardView>
+
+                </com.google.android.material.card.MaterialCardView>
+            
+            </LinearLayout>
+
+            <!-- Resize handles container - positioned above URL bar and expanded content -->
+            <FrameLayout
+                android:id="@+id/resize_handles_container"
+                android:layout_width="match_parent"
+                android:layout_height="match_parent"
+                android:clipChildren="false"
+                android:clipToPadding="false"
+                android:visibility="gone">
+                
+                <!-- Bottom Left Handle -->
+                <ImageView
+                    android:id="@+id/resize_handle_bottom_left"
+                    android:layout_width="30dp"
+                    android:layout_height="30dp"
+                    android:layout_gravity="bottom|start"
+                    android:layout_marginStart="-3dp"
+                    android:layout_marginBottom="-3dp"
+                    android:src="@drawable/resize_corner_bottom_left"
+                    android:contentDescription="@string/resize_handle"
+                    android:elevation="16dp"
+                    android:scaleType="fitCenter"
+                    android:padding="0dp" />
+                    
+                <!-- Bottom Right Handle -->
+                <ImageView
+                    android:id="@+id/resize_handle_bottom_right"
+                    android:layout_width="30dp"
+                    android:layout_height="30dp"
+                    android:layout_gravity="bottom|end"
+                    android:layout_marginEnd="-3dp"
+                    android:layout_marginBottom="-3dp"
+                    android:src="@drawable/resize_corner_bottom_right"
+                    android:contentDescription="@string/resize_handle"
+                    android:elevation="16dp"
+                    android:scaleType="fitCenter"
+                    android:padding="0dp" />
+                    
+                <!-- Horizontal resize bar at bottom center -->
+                <View
+                    android:id="@+id/resize_bar"
+                    android:layout_width="80dp"
+                    android:layout_height="4dp"
+                    android:layout_gravity="bottom|center_horizontal"
+                    android:layout_marginBottom="12dp"
+                    android:background="@drawable/resize_bar_background"
+                    android:elevation="0dp"
+                    android:paddingTop="12dp"
+                    android:paddingBottom="12dp"
+                    android:paddingStart="8dp"
+                    android:paddingEnd="8dp"
+                    android:clickable="true"
+                    android:focusable="true" />
+            </FrameLayout>
+
+        </FrameLayout>
+    </LinearLayout>
+
+</androidx.coordinatorlayout.widget.CoordinatorLayout>
diff --git a/app/src/main/res/layout/dialog_create_folder.xml b/app/src/main/res/layout/dialog_create_folder.xml
new file mode 100644
index 0000000..8be829d
--- /dev/null
+++ b/app/src/main/res/layout/dialog_create_folder.xml
@@ -0,0 +1,54 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    android:padding="24dp">
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/create_folder"
+        android:textAppearance="@style/TextAppearance.AppCompat.Large"
+        android:textColor="?attr/colorOnSurface"
+        android:layout_marginBottom="16dp" />
+
+    <com.google.android.material.textfield.TextInputLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:hint="@string/enter_folder_name">
+
+        <com.google.android.material.textfield.TextInputEditText
+            android:id="@+id/folder_name_input"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:inputType="text"
+            android:maxLines="1" />
+
+    </com.google.android.material.textfield.TextInputLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:gravity="end"
+        android:layout_marginTop="24dp">
+
+        <com.google.android.material.button.MaterialButton
+            android:id="@+id/cancel_button"
+            style="@style/Widget.Material3.Button.TextButton"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/cancel"
+            android:layout_marginEnd="8dp" />
+
+        <com.google.android.material.button.MaterialButton
+            android:id="@+id/create_button"
+            style="@style/Widget.Material3.Button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/create_folder" />
+
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/dialog_delete_options.xml b/app/src/main/res/layout/dialog_delete_options.xml
new file mode 100644
index 0000000..b6f39d5
--- /dev/null
+++ b/app/src/main/res/layout/dialog_delete_options.xml
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    android:padding="16dp"
+    android:background="@drawable/dialog_background">
+
+    <TextView
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="Delete History"
+        android:textAppearance="@style/TextAppearance.AppCompat.Title"
+        android:textColor="?attr/colorPrimary"
+        android:gravity="center"
+        android:paddingBottom="16dp" />
+
+    <RadioGroup
+        android:id="@+id/delete_options_radio_group"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="vertical">
+
+        <RadioButton
+            android:id="@+id/radio_delete_last_hour"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Last Hour"
+            android:textSize="16sp"
+            android:padding="12dp"
+            android:layout_marginBottom="8dp" />
+
+        <RadioButton
+            android:id="@+id/radio_delete_today_yesterday"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Today and Yesterday"
+            android:textSize="16sp"
+            android:padding="12dp"
+            android:layout_marginBottom="8dp" />
+
+        <RadioButton
+            android:id="@+id/radio_delete_everything"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="Everything"
+            android:textSize="16sp"
+            android:padding="12dp"
+            android:layout_marginBottom="8dp" />
+
+    </RadioGroup>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:gravity="end"
+        android:layout_marginTop="16dp">
+
+        <Button
+            android:id="@+id/button_cancel"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Cancel"
+            android:layout_marginEnd="8dp"
+            style="@style/Widget.MaterialComponents.Button.TextButton" />
+
+        <Button
+            android:id="@+id/button_delete"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="Delete"
+            style="@style/Widget.MaterialComponents.Button" />
+
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/dialog_select_folder.xml b/app/src/main/res/layout/dialog_select_folder.xml
new file mode 100644
index 0000000..5320518
--- /dev/null
+++ b/app/src/main/res/layout/dialog_select_folder.xml
@@ -0,0 +1,55 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    android:padding="24dp">
+
+    <TextView
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="@string/select_folder"
+        android:textAppearance="@style/TextAppearance.AppCompat.Large"
+        android:textColor="?attr/colorOnSurface"
+        android:layout_marginBottom="16dp" />
+
+    <androidx.recyclerview.widget.RecyclerView
+        android:id="@+id/folders_recycler_view"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_marginBottom="16dp"
+        android:maxHeight="300dp" />
+
+    <com.google.android.material.button.MaterialButton
+        android:id="@+id/create_new_folder_button"
+        style="@style/Widget.Material3.Button.TextButton"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:text="@string/create_new_folder"
+        android:gravity="start|center_vertical" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:gravity="end"
+        android:layout_marginTop="16dp">
+
+        <com.google.android.material.button.MaterialButton
+            android:id="@+id/cancel_button"
+            style="@style/Widget.Material3.Button.TextButton"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/cancel"
+            android:layout_marginEnd="8dp" />
+
+        <com.google.android.material.button.MaterialButton
+            android:id="@+id/save_button"
+            style="@style/Widget.Material3.Button"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/save_article" />
+
+    </LinearLayout>
+
+</LinearLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/item_folder.xml b/app/src/main/res/layout/item_folder.xml
new file mode 100644
index 0000000..6f37373
--- /dev/null
+++ b/app/src/main/res/layout/item_folder.xml
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="horizontal"
+    android:padding="12dp"
+    android:background="?attr/selectableItemBackground"
+    android:gravity="center_vertical">
+
+    <ImageView
+        android:layout_width="24dp"
+        android:layout_height="24dp"
+        android:src="@drawable/ic_folder"
+        android:contentDescription="@string/folder"
+        app:tint="?attr/colorOnSurface" />
+
+    <TextView
+        android:id="@+id/folder_name"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_weight="1"
+        android:layout_marginStart="16dp"
+        android:textAppearance="@style/TextAppearance.AppCompat.Medium"
+        android:textColor="?attr/colorOnSurface" />
+
+    <ImageButton
+        android:id="@+id/delete_folder_button"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:background="?attr/selectableItemBackgroundBorderless"
+        android:src="@drawable/ic_delete"
+        android:contentDescription="@string/delete_folder"
+        android:visibility="gone"
+        app:tint="?attr/colorOnSurface" />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/item_folder_selection.xml b/app/src/main/res/layout/item_folder_selection.xml
new file mode 100644
index 0000000..61587bd
--- /dev/null
+++ b/app/src/main/res/layout/item_folder_selection.xml
@@ -0,0 +1,27 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="horizontal"
+    android:padding="12dp"
+    android:background="?attr/selectableItemBackground"
+    android:gravity="center_vertical">
+
+    <ImageView
+        android:layout_width="24dp"
+        android:layout_height="24dp"
+        android:src="@drawable/ic_folder"
+        android:contentDescription="@string/folder"
+        app:tint="?attr/colorOnSurface" />
+
+    <TextView
+        android:id="@+id/folder_name"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_weight="1"
+        android:layout_marginStart="16dp"
+        android:textAppearance="@style/TextAppearance.AppCompat.Medium"
+        android:textColor="?attr/colorOnSurface" />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/item_history.xml b/app/src/main/res/layout/item_history.xml
new file mode 100644
index 0000000..0f11425
--- /dev/null
+++ b/app/src/main/res/layout/item_history.xml
@@ -0,0 +1,81 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_margin="8dp"
+    app:cardCornerRadius="8dp"
+    app:cardElevation="2dp">
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:padding="12dp">
+
+        <TextView
+            android:id="@+id/text_title"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="8dp"
+            android:ellipsize="end"
+            android:maxLines="1"
+            android:textAppearance="@style/TextAppearance.AppCompat.Medium"
+            android:textStyle="bold"
+            app:layout_constraintEnd_toStartOf="@id/btn_delete"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent"
+            tools:text="Page Title" />
+
+        <TextView
+            android:id="@+id/text_url"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="8dp"
+            android:ellipsize="middle"
+            android:maxLines="1"
+            android:textAppearance="@style/TextAppearance.AppCompat.Small"
+            android:textColor="?android:attr/textColorSecondary"
+            app:layout_constraintEnd_toStartOf="@id/btn_delete"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/text_title"
+            tools:text="https://www.example.com/very/long/url/that/will/be/truncated/in/the/middle" />
+
+        <TextView
+            android:id="@+id/text_date"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="4dp"
+            android:textAppearance="@style/TextAppearance.AppCompat.Small"
+            android:textColor="?android:attr/textColorTertiary"
+            android:textSize="12sp"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/text_url"
+            tools:text="Oct 15, 2023 14:30" />
+
+        <View
+            android:id="@+id/offline_indicator"
+            android:layout_width="12dp"
+            android:layout_height="12dp"
+            android:layout_marginStart="8dp"
+            android:background="@drawable/ic_save"
+            android:backgroundTint="?attr/colorPrimary"
+            android:visibility="gone"
+            app:layout_constraintBottom_toBottomOf="@id/text_date"
+            app:layout_constraintStart_toEndOf="@id/text_date"
+            app:layout_constraintTop_toTopOf="@id/text_date"
+            tools:visibility="visible" />
+
+        <ImageButton
+            android:id="@+id/btn_delete"
+            android:layout_width="36dp"
+            android:layout_height="36dp"
+            android:background="?attr/selectableItemBackgroundBorderless"
+            android:contentDescription="@string/delete"
+            android:src="@drawable/ic_close"
+            app:tint="?android:attr/textColorSecondary"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintTop_toTopOf="parent" />
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</androidx.cardview.widget.CardView>
diff --git a/app/src/main/res/layout/item_history_card.xml b/app/src/main/res/layout/item_history_card.xml
new file mode 100644
index 0000000..34d2e7f
--- /dev/null
+++ b/app/src/main/res/layout/item_history_card.xml
@@ -0,0 +1,186 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.cardview.widget.CardView xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="200dp"
+    android:layout_margin="8dp"
+    app:cardCornerRadius="12dp"
+    app:cardElevation="4dp">
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:layout_width="match_parent"
+        android:layout_height="match_parent">
+
+        <!-- Preview Image Background -->
+        <ImageView
+            android:id="@+id/preview_image"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:scaleType="centerCrop"
+            android:background="@color/light_gray"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent"
+            tools:src="@drawable/ic_web_page" />
+
+        <!-- Gradient overlay for text readability -->
+        <View
+            android:id="@+id/gradient_overlay"
+            android:layout_width="match_parent"
+            android:layout_height="100dp"
+            android:background="@drawable/gradient_overlay"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent" />
+
+        <!-- Round Favicon in bottom left corner -->
+        <ImageView
+            android:id="@+id/favicon_image"
+            android:layout_width="24dp"
+            android:layout_height="24dp"
+            android:layout_marginStart="12dp"
+            android:layout_marginBottom="12dp"
+            android:background="@drawable/favicon_background"
+            android:padding="2dp"
+            android:scaleType="centerCrop"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintBottom_toBottomOf="parent"
+            tools:src="@drawable/ic_website" />
+            
+        <!-- Website name next to favicon -->
+        <TextView
+            android:id="@+id/website_name"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginStart="8dp"
+            android:textAppearance="@style/TextAppearance.AppCompat.Small"
+            android:textColor="@android:color/white"
+            android:textStyle="bold"
+            android:textSize="12sp"
+            android:shadowColor="@android:color/black"
+            android:shadowDx="1"
+            android:shadowDy="1"
+            android:shadowRadius="2"
+            app:layout_constraintStart_toEndOf="@id/favicon_image"
+            app:layout_constraintTop_toTopOf="@id/favicon_image"
+            app:layout_constraintBottom_toBottomOf="@id/favicon_image"
+            tools:text="Example" />
+
+        <!-- Save button -->
+        <ImageView
+            android:id="@+id/save_button"
+            android:layout_width="32dp"
+            android:layout_height="32dp"
+            android:layout_marginTop="12dp"
+            android:layout_marginEnd="8dp"
+            android:background="?android:attr/selectableItemBackgroundBorderless"
+            android:padding="6dp"
+            android:src="@drawable/ic_download"
+            android:clickable="true"
+            android:focusable="true"
+            app:layout_constraintEnd_toStartOf="@id/share_button"
+            app:layout_constraintTop_toTopOf="parent"
+            app:tint="@android:color/white" />
+
+        <!-- Share button in top right corner -->
+        <ImageView
+            android:id="@+id/share_button"
+            android:layout_width="32dp"
+            android:layout_height="32dp"
+            android:layout_margin="12dp"
+            android:background="?android:attr/selectableItemBackgroundBorderless"
+            android:padding="6dp"
+            android:src="@drawable/ic_share"
+            android:clickable="true"
+            android:focusable="true"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintTop_toTopOf="parent"
+            app:tint="@android:color/white" />
+
+        <!-- Title text floating at bottom -->
+        <TextView
+            android:id="@+id/title_text"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_marginStart="12dp"
+            android:layout_marginEnd="12dp"
+            android:layout_marginBottom="8dp"
+            android:ellipsize="end"
+            android:maxLines="2"
+            android:textAppearance="@style/TextAppearance.AppCompat.Medium"
+            android:textColor="@android:color/white"
+            android:textStyle="bold"
+            android:shadowColor="@android:color/black"
+            android:shadowDx="1"
+            android:shadowDy="1"
+            android:shadowRadius="3"
+            app:layout_constraintBottom_toTopOf="@id/favicon_image"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            tools:text="Sample Article Title That Might Be Long" />
+
+        <!-- Offline indicator -->
+        <ImageView
+            android:id="@+id/offline_indicator"
+            android:layout_width="20dp"
+            android:layout_height="20dp"
+            android:layout_marginEnd="8dp"
+            android:layout_marginBottom="12dp"
+            android:src="@drawable/ic_offline"
+            android:visibility="gone"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintEnd_toStartOf="@id/date_text"
+            app:tint="@android:color/white" />
+
+        <!-- Date text at bottom right -->
+        <TextView
+            android:id="@+id/date_text"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="12dp"
+            android:layout_marginBottom="12dp"
+            android:textAppearance="@style/TextAppearance.AppCompat.Small"
+            android:textColor="@android:color/white"
+            android:alpha="0.8"
+            android:textSize="11sp"
+            android:shadowColor="@android:color/black"
+            android:shadowDx="1"
+            android:shadowDy="1"
+            android:shadowRadius="2"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            tools:text="Oct 15" />
+
+        <!-- Delete button overlay (initially hidden) -->
+        <View
+            android:id="@+id/delete_overlay"
+            android:layout_width="match_parent"
+            android:layout_height="match_parent"
+            android:background="@color/black_overlay"
+            android:visibility="gone"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent" />
+
+        <ImageView
+            android:id="@+id/delete_button"
+            android:layout_width="64dp"
+            android:layout_height="64dp"
+            android:background="@drawable/delete_button_background"
+            android:src="@drawable/ic_delete"
+            android:padding="16dp"
+            android:visibility="gone"
+            android:clickable="true"
+            android:focusable="true"
+            app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent"
+            app:tint="@android:color/white" />
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+
+</androidx.cardview.widget.CardView>
\ No newline at end of file
diff --git a/app/src/main/res/layout/item_history_header.xml b/app/src/main/res/layout/item_history_header.xml
new file mode 100644
index 0000000..a6e3960
--- /dev/null
+++ b/app/src/main/res/layout/item_history_header.xml
@@ -0,0 +1,28 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:orientation="vertical"
+    android:paddingTop="16dp"
+    android:paddingBottom="8dp"
+    android:paddingStart="16dp"
+    android:paddingEnd="16dp">
+
+    <TextView
+        android:id="@+id/header_title"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:textAppearance="@style/TextAppearance.AppCompat.Medium"
+        android:textColor="?attr/colorPrimary"
+        android:textStyle="bold"
+        android:textSize="18sp"
+        android:text="Today" />
+
+    <View
+        android:layout_width="match_parent"
+        android:layout_height="1dp"
+        android:layout_marginTop="8dp"
+        android:background="?attr/colorPrimary"
+        android:alpha="0.3" />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/item_saved_article.xml b/app/src/main/res/layout/item_saved_article.xml
new file mode 100644
index 0000000..a325927
--- /dev/null
+++ b/app/src/main/res/layout/item_saved_article.xml
@@ -0,0 +1,81 @@
+<?xml version="1.0" encoding="utf-8"?>
+<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_margin="8dp"
+    app:cardCornerRadius="8dp"
+    app:cardElevation="2dp">
+
+    <androidx.constraintlayout.widget.ConstraintLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:padding="12dp">
+
+        <TextView
+            android:id="@+id/text_title"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="8dp"
+            android:ellipsize="end"
+            android:maxLines="1"
+            android:textAppearance="@style/TextAppearance.AppCompat.Medium"
+            android:textStyle="bold"
+            app:layout_constraintEnd_toStartOf="@id/button_delete"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toTopOf="parent"
+            tools:text="Article Title" />
+
+        <TextView
+            android:id="@+id/text_excerpt"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_marginEnd="8dp"
+            android:ellipsize="end"
+            android:maxLines="2"
+            android:textAppearance="@style/TextAppearance.AppCompat.Small"
+            android:textColor="?android:attr/textColorSecondary"
+            app:layout_constraintEnd_toStartOf="@id/button_delete"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/text_title"
+            tools:text="This is a brief excerpt of the article content that will be displayed here to give users a preview of what the article is about." />
+
+        <TextView
+            android:id="@+id/text_site_name"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginTop="4dp"
+            android:textAppearance="@style/TextAppearance.AppCompat.Small"
+            android:textColor="?android:attr/textColorTertiary"
+            android:textSize="12sp"
+            app:layout_constraintStart_toStartOf="parent"
+            app:layout_constraintTop_toBottomOf="@id/text_excerpt"
+            tools:text="Example Site" />
+
+        <TextView
+            android:id="@+id/text_saved_date"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginStart="8dp"
+            android:layout_marginTop="4dp"
+            android:textAppearance="@style/TextAppearance.AppCompat.Small"
+            android:textColor="?android:attr/textColorTertiary"
+            android:textSize="12sp"
+            app:layout_constraintStart_toEndOf="@id/text_site_name"
+            app:layout_constraintTop_toBottomOf="@id/text_excerpt"
+            tools:text="Oct 15, 2023" />
+
+        <com.google.android.material.button.MaterialButton
+            android:id="@+id/button_delete"
+            style="@style/Widget.Material3.Button.IconButton"
+            android:layout_width="36dp"
+            android:layout_height="36dp"
+            android:contentDescription="@string/delete"
+            app:icon="@drawable/ic_delete"
+            app:iconTint="?android:attr/textColorSecondary"
+            app:layout_constraintEnd_toEndOf="parent"
+            app:layout_constraintTop_toTopOf="parent" />
+
+    </androidx.constraintlayout.widget.ConstraintLayout>
+</com.google.android.material.card.MaterialCardView>
\ No newline at end of file
diff --git a/app/src/main/res/layout/layout_side_panel.xml b/app/src/main/res/layout/layout_side_panel.xml
new file mode 100644
index 0000000..259d9ea
--- /dev/null
+++ b/app/src/main/res/layout/layout_side_panel.xml
@@ -0,0 +1,110 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:background="?attr/colorSurface"
+    android:elevation="16dp">
+
+    <!-- Header with app name and close button -->
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:padding="16dp"
+        android:gravity="center_vertical">
+
+        <TextView
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:text="@string/saved_articles"
+            android:textAppearance="@style/TextAppearance.AppCompat.Large"
+            android:textStyle="bold"
+            android:textColor="?attr/colorOnSurface" />
+
+        <ImageButton
+            android:id="@+id/close_button"
+            android:layout_width="48dp"
+            android:layout_height="48dp"
+            android:background="?attr/selectableItemBackgroundBorderless"
+            android:src="@drawable/ic_close"
+            android:contentDescription="@string/close"
+            app:tint="?attr/colorOnSurface" />
+
+    </LinearLayout>
+
+    <!-- All Articles item -->
+    <LinearLayout
+        android:id="@+id/all_articles_item"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:padding="16dp"
+        android:background="?attr/selectableItemBackground"
+        android:gravity="center_vertical">
+
+        <ImageView
+            android:layout_width="24dp"
+            android:layout_height="24dp"
+            android:src="@drawable/ic_article"
+            android:contentDescription="@string/all_articles"
+            app:tint="?attr/colorOnSurface" />
+
+        <TextView
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:layout_marginStart="16dp"
+            android:text="@string/all_articles"
+            android:textAppearance="@style/TextAppearance.AppCompat.Medium"
+            android:textColor="?attr/colorOnSurface" />
+
+    </LinearLayout>
+
+    <!-- Divider -->
+    <View
+        android:layout_width="match_parent"
+        android:layout_height="1dp"
+        android:background="?attr/colorOnSurface"
+        android:alpha="0.1" />
+
+    <!-- Folders section title -->
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:padding="16dp"
+        android:gravity="center_vertical">
+
+        <TextView
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:text="@string/folders"
+            android:textAppearance="@style/TextAppearance.AppCompat.Medium"
+            android:textStyle="bold"
+            android:textColor="?attr/colorOnSurface" />
+
+        <ImageButton
+            android:id="@+id/add_folder_button"
+            android:layout_width="48dp"
+            android:layout_height="48dp"
+            android:background="?attr/selectableItemBackgroundBorderless"
+            android:src="@drawable/ic_add"
+            android:contentDescription="@string/add_folder"
+            app:tint="?attr/colorOnSurface" />
+
+    </LinearLayout>
+
+    <!-- Folders list -->
+    <androidx.recyclerview.widget.RecyclerView
+        android:id="@+id/folders_recycler_view"
+        android:layout_width="match_parent"
+        android:layout_height="0dp"
+        android:layout_weight="1"
+        android:paddingStart="16dp"
+        android:paddingEnd="16dp" />
+
+</LinearLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/toolbar_custom.xml b/app/src/main/res/layout/toolbar_custom.xml
new file mode 100644
index 0000000..7031d96
--- /dev/null
+++ b/app/src/main/res/layout/toolbar_custom.xml
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="?attr/actionBarSize">
+
+    <ImageButton
+        android:id="@+id/toolbar_menu"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:layout_marginStart="8dp"
+        android:background="?attr/selectableItemBackgroundBorderless"
+        android:contentDescription="@string/menu"
+        android:src="@drawable/ic_menu"
+        android:padding="12dp"
+        app:tint="@android:color/white"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <TextView
+        android:id="@+id/toolbar_title"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="8dp"
+        android:text="@string/history_title"
+        android:textColor="@android:color/white"
+        android:textSize="20sp"
+        android:textStyle="bold"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toStartOf="@+id/toolbar_search"
+        app:layout_constraintStart_toEndOf="@+id/toolbar_menu"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <ImageButton
+        android:id="@+id/toolbar_search"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:layout_marginEnd="0dp"
+        android:background="?attr/selectableItemBackgroundBorderless"
+        android:contentDescription="@string/search_history"
+        android:src="@drawable/ic_search"
+        android:padding="12dp"
+        app:tint="@android:color/white"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toStartOf="@+id/toolbar_delete"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <ImageButton
+        android:id="@+id/toolbar_delete"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:layout_marginEnd="8dp"
+        android:background="?attr/selectableItemBackgroundBorderless"
+        android:contentDescription="@string/delete"
+        android:src="@drawable/ic_delete"
+        android:padding="12dp"
+        app:tint="@android:color/white"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/toolbar_custom_history.xml b/app/src/main/res/layout/toolbar_custom_history.xml
new file mode 100644
index 0000000..55c5764
--- /dev/null
+++ b/app/src/main/res/layout/toolbar_custom_history.xml
@@ -0,0 +1,49 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="?attr/actionBarSize">
+
+    <TextView
+        android:id="@+id/toolbar_title"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="2dp"
+        android:text="@string/history_title"
+        android:textColor="@android:color/white"
+        android:textSize="20sp"
+        android:textStyle="bold"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toStartOf="@+id/toolbar_search"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <ImageButton
+        android:id="@+id/toolbar_search"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:layout_marginEnd="0dp"
+        android:background="?attr/selectableItemBackgroundBorderless"
+        android:contentDescription="@string/search_history"
+        android:src="@drawable/ic_search"
+        android:padding="12dp"
+        app:tint="@android:color/white"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toStartOf="@+id/toolbar_delete"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <ImageButton
+        android:id="@+id/toolbar_delete"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:layout_marginEnd="8dp"
+        android:background="?attr/selectableItemBackgroundBorderless"
+        android:contentDescription="@string/delete"
+        android:src="@drawable/ic_delete"
+        android:padding="12dp"
+        app:tint="@android:color/white"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/toolbar_custom_reader.xml b/app/src/main/res/layout/toolbar_custom_reader.xml
new file mode 100644
index 0000000..4632546
--- /dev/null
+++ b/app/src/main/res/layout/toolbar_custom_reader.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="?attr/actionBarSize">
+
+    <ImageButton
+        android:id="@+id/toolbar_search"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:layout_marginEnd="8dp"
+        android:background="?attr/selectableItemBackgroundBorderless"
+        android:contentDescription="Search"
+        android:src="@drawable/ic_search"
+        android:padding="12dp"
+        app:tint="@android:color/white"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/toolbar_custom_saved.xml b/app/src/main/res/layout/toolbar_custom_saved.xml
new file mode 100644
index 0000000..a8f6ccd
--- /dev/null
+++ b/app/src/main/res/layout/toolbar_custom_saved.xml
@@ -0,0 +1,63 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="?attr/actionBarSize">
+
+    <ImageButton
+        android:id="@+id/toolbar_menu"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:layout_marginStart="2dp"
+        android:background="?attr/selectableItemBackgroundBorderless"
+        android:contentDescription="@string/menu"
+        android:src="@drawable/ic_menu"
+        android:padding="12dp"
+        app:tint="@android:color/white"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <TextView
+        android:id="@+id/toolbar_title"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="8dp"
+        android:text="@string/saved_articles"
+        android:textColor="@android:color/white"
+        android:textSize="20sp"
+        android:textStyle="bold"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toStartOf="@+id/toolbar_search"
+        app:layout_constraintStart_toEndOf="@+id/toolbar_menu"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <ImageButton
+        android:id="@+id/toolbar_search"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:layout_marginEnd="0dp"
+        android:background="?attr/selectableItemBackgroundBorderless"
+        android:contentDescription="@string/search_history"
+        android:src="@drawable/ic_search"
+        android:padding="12dp"
+        app:tint="@android:color/white"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toStartOf="@+id/toolbar_delete"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <ImageButton
+        android:id="@+id/toolbar_delete"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:layout_marginEnd="8dp"
+        android:background="?attr/selectableItemBackgroundBorderless"
+        android:contentDescription="@string/delete"
+        android:src="@drawable/ic_delete"
+        android:padding="12dp"
+        app:tint="@android:color/white"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/toolbar_custom_saved_search.xml b/app/src/main/res/layout/toolbar_custom_saved_search.xml
new file mode 100644
index 0000000..5e261bb
--- /dev/null
+++ b/app/src/main/res/layout/toolbar_custom_saved_search.xml
@@ -0,0 +1,35 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="?attr/actionBarSize">
+
+    <TextView
+        android:id="@+id/toolbar_title"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="2dp"
+        android:text="@string/saved_articles"
+        android:textColor="@android:color/white"
+        android:textSize="20sp"
+        android:textStyle="bold"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toStartOf="@+id/toolbar_search"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <ImageButton
+        android:id="@+id/toolbar_search"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:layout_marginEnd="8dp"
+        android:background="?attr/selectableItemBackgroundBorderless"
+        android:contentDescription="Search"
+        android:src="@drawable/ic_search"
+        android:padding="12dp"
+        app:tint="@android:color/white"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/toolbar_custom_settings.xml b/app/src/main/res/layout/toolbar_custom_settings.xml
new file mode 100644
index 0000000..2b8b924
--- /dev/null
+++ b/app/src/main/res/layout/toolbar_custom_settings.xml
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:layout_width="match_parent"
+    android:layout_height="?attr/actionBarSize">
+
+    <TextView
+        android:id="@+id/toolbar_title"
+        android:layout_width="0dp"
+        android:layout_height="wrap_content"
+        android:layout_marginStart="2dp"
+        android:text="@string/settings"
+        android:textColor="@android:color/white"
+        android:textSize="20sp"
+        android:textStyle="bold"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
diff --git a/app/src/main/res/layout/url_bar_layout.xml b/app/src/main/res/layout/url_bar_layout.xml
new file mode 100644
index 0000000..9fbe020
--- /dev/null
+++ b/app/src/main/res/layout/url_bar_layout.xml
@@ -0,0 +1,98 @@
+<?xml version="1.0" encoding="utf-8"?>
+<com.google.android.material.card.MaterialCardView xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    android:id="@+id/url_bar_container"
+    android:layout_width="match_parent"
+    android:layout_height="wrap_content"
+    android:layout_marginStart="8dp"
+    android:layout_marginEnd="8dp"
+    android:layout_marginTop="0dp"
+    android:layout_marginBottom="0dp"
+    app:cardElevation="3dp"
+    app:cardBackgroundColor="@android:color/white"
+    app:strokeWidth="0.5dp"
+    app:strokeColor="#E0E0E0">
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:gravity="center_vertical"
+        android:paddingStart="10dp"
+        android:paddingEnd="8dp"
+        android:paddingTop="2dp"
+        android:paddingBottom="2dp">
+
+        <!-- Site icon -->
+        <ImageView
+            android:id="@+id/url_bar_icon"
+            android:layout_width="24dp"
+            android:layout_height="24dp"
+            android:layout_marginEnd="10dp"
+            android:src="@drawable/ic_globe"
+            android:contentDescription="@string/site_icon" />
+
+        <!-- URL text -->
+        <EditText
+            android:id="@+id/url_bar_text"
+            android:layout_width="0dp"
+            android:layout_height="26dp"
+            android:layout_weight="1"
+            android:textSize="16sp"
+            android:textColor="#000000"
+            android:textColorHint="?android:attr/textColorSecondary"
+            android:singleLine="true"
+            android:ellipsize="middle"
+            android:background="@drawable/pill_background_selector"
+            android:hint="@string/enter_url_hint"
+            android:inputType="textUri"
+            android:imeOptions="actionGo"
+            android:selectAllOnFocus="true"
+            android:focusable="true"
+            android:focusableInTouchMode="true"
+            android:clickable="true"
+            android:paddingStart="16dp"
+            android:paddingEnd="16dp"
+            android:paddingTop="2dp"
+            android:paddingBottom="2dp"
+            android:text="https://google.com" />
+
+        <!-- Share button -->
+        <com.google.android.material.button.MaterialButton
+            android:id="@+id/btn_url_bar_share"
+            style="@style/Widget.MaterialComponents.Button.TextButton.Icon"
+            android:layout_width="28dp"
+            android:layout_height="match_parent"
+            android:layout_marginStart="4dp"
+            android:layout_marginEnd="0dp"
+            android:minWidth="0dp"
+            android:minHeight="0dp"
+            android:padding="0dp"
+            android:clickable="true"
+            android:focusable="true"
+            android:background="?attr/selectableItemBackgroundBorderless"
+            app:icon="@drawable/ic_share"
+            app:iconSize="20dp"
+            app:iconTint="?android:attr/textColorSecondary"
+            android:contentDescription="@string/share" />
+
+        <!-- Settings button -->
+        <com.google.android.material.button.MaterialButton
+            android:id="@+id/btn_url_bar_settings"
+            style="@style/Widget.MaterialComponents.Button.TextButton.Icon"
+            android:layout_width="22dp"
+            android:layout_height="match_parent"
+            android:layout_marginStart="0dp"
+            android:layout_marginEnd="0dp"
+            android:minWidth="0dp"
+            android:minHeight="0dp"
+            android:padding="0dp"
+            android:clickable="true"
+            android:focusable="true"
+            android:background="?attr/selectableItemBackgroundBorderless"
+            app:icon="@drawable/ic_more_vert"
+            app:iconSize="20dp"
+            app:iconTint="?android:attr/textColorSecondary"
+            android:contentDescription="@string/settings" />
+    </LinearLayout>
+</com.google.android.material.card.MaterialCardView>
\ No newline at end of file
diff --git a/app/src/main/res/menu/history_menu.xml b/app/src/main/res/menu/history_menu.xml
new file mode 100644
index 0000000..4f6a14e
--- /dev/null
+++ b/app/src/main/res/menu/history_menu.xml
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+    
+    <item
+        android:id="@+id/menu_delete_today"
+        android:title="Delete Today's History"
+        android:icon="@drawable/ic_today"
+        app:showAsAction="never" />
+    <item
+        android:id="@+id/menu_delete_last_month"
+        android:title="Delete Last Month's History"
+        android:icon="@drawable/ic_calendar_month"
+        app:showAsAction="never" />
+    <item
+        android:id="@+id/menu_delete_all"
+        android:title="Delete All History"
+        android:icon="@drawable/ic_clear_all"
+        app:showAsAction="never" />
+</menu>
\ No newline at end of file
diff --git a/app/src/main/res/menu/main_menu.xml b/app/src/main/res/menu/main_menu.xml
new file mode 100644
index 0000000..c8a6350
--- /dev/null
+++ b/app/src/main/res/menu/main_menu.xml
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<menu xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto">
+    <item
+        android:id="@+id/menu_saved_articles"
+        android:icon="@drawable/ic_save"
+        android:title="@string/saved_articles"
+        app:showAsAction="ifRoom" />
+    <item
+        android:id="@+id/menu_history"
+        android:icon="@drawable/ic_history"
+        android:title="@string/history"
+        app:showAsAction="ifRoom" />
+    <item
+        android:id="@+id/menu_settings"
+        android:icon="@drawable/ic_settings"
+        android:title="@string/settings"
+        app:showAsAction="ifRoom" />
+</menu>
\ No newline at end of file
diff --git a/app/src/main/res/mipmap-hdpi/ic_launcher.xml b/app/src/main/res/mipmap-hdpi/ic_launcher.xml
new file mode 100644
index 0000000..eca70cf
--- /dev/null
+++ b/app/src/main/res/mipmap-hdpi/ic_launcher.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/app/src/main/res/mipmap-hdpi/ic_launcher_round.xml b/app/src/main/res/mipmap-hdpi/ic_launcher_round.xml
new file mode 100644
index 0000000..eca70cf
--- /dev/null
+++ b/app/src/main/res/mipmap-hdpi/ic_launcher_round.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/app/src/main/res/mipmap-mdpi/ic_launcher.xml b/app/src/main/res/mipmap-mdpi/ic_launcher.xml
new file mode 100644
index 0000000..eca70cf
--- /dev/null
+++ b/app/src/main/res/mipmap-mdpi/ic_launcher.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/app/src/main/res/mipmap-mdpi/ic_launcher_round.xml b/app/src/main/res/mipmap-mdpi/ic_launcher_round.xml
new file mode 100644
index 0000000..eca70cf
--- /dev/null
+++ b/app/src/main/res/mipmap-mdpi/ic_launcher_round.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/app/src/main/res/mipmap-xhdpi/ic_launcher.xml b/app/src/main/res/mipmap-xhdpi/ic_launcher.xml
new file mode 100644
index 0000000..eca70cf
--- /dev/null
+++ b/app/src/main/res/mipmap-xhdpi/ic_launcher.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/app/src/main/res/mipmap-xhdpi/ic_launcher_round.xml b/app/src/main/res/mipmap-xhdpi/ic_launcher_round.xml
new file mode 100644
index 0000000..eca70cf
--- /dev/null
+++ b/app/src/main/res/mipmap-xhdpi/ic_launcher_round.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/app/src/main/res/mipmap-xxhdpi/ic_launcher.xml b/app/src/main/res/mipmap-xxhdpi/ic_launcher.xml
new file mode 100644
index 0000000..eca70cf
--- /dev/null
+++ b/app/src/main/res/mipmap-xxhdpi/ic_launcher.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.xml b/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.xml
new file mode 100644
index 0000000..eca70cf
--- /dev/null
+++ b/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/app/src/main/res/mipmap-xxxhdpi/ic_launcher.xml b/app/src/main/res/mipmap-xxxhdpi/ic_launcher.xml
new file mode 100644
index 0000000..eca70cf
--- /dev/null
+++ b/app/src/main/res/mipmap-xxxhdpi/ic_launcher.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.xml b/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.xml
new file mode 100644
index 0000000..eca70cf
--- /dev/null
+++ b/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
+    <background android:drawable="@drawable/ic_launcher_background" />
+    <foreground android:drawable="@drawable/ic_launcher_foreground" />
+</adaptive-icon>
\ No newline at end of file
diff --git a/app/src/main/res/values-night/colors.xml b/app/src/main/res/values-night/colors.xml
new file mode 100644
index 0000000..aa113fc
--- /dev/null
+++ b/app/src/main/res/values-night/colors.xml
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- Night theme colors -->
+    <color name="primaryColorDark">#303F9F</color>
+    <color name="primaryDarkColorDark">#1A237E</color>
+    <color name="primaryTextColorDark">#FFFFFF</color>
+    <color name="secondaryColorDark">#5C6BC0</color>
+    <color name="secondaryDarkColorDark">#3949AB</color>
+    <color name="secondaryTextColorDark">#FFFFFF</color>
+    
+    <!-- Override daylight colors with night colors -->
+    <color name="bubble_background">#303F9F</color>
+    <color name="bubble_inactive">#5C6BC0</color>
+    <color name="tab_background">#283593</color>
+    <color name="tab_selected_background">#303F9F</color>
+    <color name="tab_text">#E8EAF6</color>
+    <color name="tab_selected_text">#FFFFFF</color>
+</resources>
\ No newline at end of file
diff --git a/app/src/main/res/values-night/themes.xml b/app/src/main/res/values-night/themes.xml
new file mode 100644
index 0000000..a0136cf
--- /dev/null
+++ b/app/src/main/res/values-night/themes.xml
@@ -0,0 +1,35 @@
+<resources xmlns:tools="http://schemas.android.com/tools">
+    <!-- Dark application theme. -->
+    <style name="Theme.QBrowser" parent="Theme.MaterialComponents.DayNight.NoActionBar">
+        <!-- Primary brand color. -->
+        <item name="colorPrimary">@color/primaryColorDark</item>
+        <item name="colorPrimaryVariant">@color/primaryDarkColorDark</item>
+        <item name="colorOnPrimary">@color/primaryTextColorDark</item>
+        <!-- Secondary brand color. -->
+        <item name="colorSecondary">@color/secondaryColorDark</item>
+        <item name="colorSecondaryVariant">@color/secondaryDarkColorDark</item>
+        <item name="colorOnSecondary">@color/secondaryTextColorDark</item>
+        <!-- Status bar color. -->
+        <item name="android:statusBarColor">@color/primaryDarkColorDark</item>
+        <!-- Customize your theme here. -->
+        <item name="android:navigationBarColor">@color/primaryDarkColorDark</item>
+        
+        <!-- Uniform text colors -->
+        <item name="android:textColorPrimary">@color/darkOnSurface</item>
+        <item name="android:textColorSecondary">#9E9E9E</item>
+        
+        <!-- Uniform background colors -->
+        <item name="android:colorBackground">@color/darkBackground</item>
+        <item name="colorSurface">@color/darkSurface</item>
+        <item name="colorOnSurface">@color/darkOnSurface</item>
+        
+        <!-- Menu and popup styles -->
+        <item name="popupMenuStyle">@style/PopupMenu.QBrowser</item>
+        <item name="actionOverflowMenuStyle">@style/PopupMenu.QBrowser</item>
+    </style>
+
+    <style name="Theme.QBrowser.ReadMode" parent="Theme.QBrowser">
+        <item name="android:background">@color/read_mode_background_dark</item>
+        <item name="android:textColor">@color/read_mode_text_dark</item>
+    </style>
+</resources>
diff --git a/app/src/main/res/values/colors.xml b/app/src/main/res/values/colors.xml
new file mode 100755
index 0000000..bcb67d2
--- /dev/null
+++ b/app/src/main/res/values/colors.xml
@@ -0,0 +1,147 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- Main colors -->
+    <color name="primary">#2A5081</color>
+    <color name="primary_dark">#0f4080</color>
+    <color name="primary_light">#8aa2c3</color>
+    <color name="colorAccent">#FF4081</color>
+
+    <!-- Aliases for themes.xml compatibility -->
+    <color name="colorPrimary">@color/primary</color>
+    <color name="colorPrimaryDark">@color/primary_dark</color>
+    <color name="colorPrimaryLight">@color/primary_light</color>
+    <color name="primaryTextColor">#FFFFFF</color>
+    <color name="secondaryColor">#2A5081</color>
+    <color name="secondaryDarkColor">#C2185B</color>
+    <color name="secondaryTextColor">#FFFFFF</color>
+
+    <!-- Text colors -->
+    <color name="text_primary">#212121</color>
+    <color name="text_secondary">#757575</color>
+    
+    <!-- Uniform text colors -->
+    <color name="textColorPrimary">#212121</color>
+    <color name="textColorSecondary">#757575</color>
+    
+    <!-- Button colors -->
+    <color name="button_stroke_color">#757575</color>
+    <color name="button_icon_color">#757575</color>
+    
+    <!-- Uniform background colors -->
+    <color name="backgroundColor">#FFFFFF</color>
+    <color name="surfaceColor">#FFFFFF</color>
+    <color name="onSurfaceColor">#212121</color>
+    
+    <!-- Dark theme colors -->
+    <color name="darkBackground">#121212</color>
+    <color name="darkSurface">#1E1E1E</color>
+    <color name="darkOnSurface">#E0E0E0</color>
+
+    <!-- Bubble UI colors -->
+    <color name="bubble_background">#F5F5F5</color>
+    <color name="tab_background">#EEEEEE</color>
+    <color name="tab_text">#424242</color>
+    <color name="selected_tab">#E8F0FE</color>
+    <color name="crimson_red">#DC143C</color>
+    
+    <!-- Launcher icon colors -->
+    <color name="launcher_background">#FFFFFF</color>
+    <color name="launcher_bubble_light">#BCD9F2</color>
+    <color name="launcher_bubble_medium">#9DCBF4</color>
+    <color name="launcher_bubble_medium_dark">#75ADDF</color>
+    <color name="launcher_bubble_dark">#389AD6</color>
+    <color name="launcher_stroke">#2A5081</color>
+
+    <!-- Read mode colors -->
+    <color name="read_mode_background_light">#FAFAFA</color>
+    <color name="read_mode_text_light">#212121</color>
+    <color name="read_mode_background_dark">#121212</color>
+    <color name="read_mode_text_dark">#E0E0E0</color>
+    <color name="read_mode_background_sepia">#F9F2E7</color>
+    <color name="read_mode_text_sepia">#5B4636</color>
+    <color name="read_mode_link_light">#1976D2</color>
+    <color name="read_mode_link_dark">#90CAF9</color>
+    <color name="read_mode_link_sepia">#8E644B</color>
+
+    <color name="primaryColorDark">#303F9F</color>
+    <color name="primaryDarkColorDark">#1A237E</color>
+    <color name="primaryTextColorDark">#FFFFFF</color>
+    <color name="secondaryColorDark">#5C6BC0</color>
+    <color name="secondaryDarkColorDark">#3949AB</color>
+    <color name="secondaryTextColorDark">#FFFFFF</color>
+
+    <color name="bubble_inactive">#5C6BC0</color>
+    <color name="tab_selected_background">#303F9F</color>
+    <color name="tab_selected_text">#FFFFFF</color>
+
+    <!-- Theme color palettes -->
+    <!-- Blue theme (default) -->
+    <color name="blue_primary">#2196F3</color>
+    <color name="blue_primary_dark">#1976D2</color>
+    <color name="blue_accent">#448AFF</color>
+
+    <!-- Green theme -->
+    <color name="green_primary">#4CAF50</color>
+    <color name="green_primary_dark">#388E3C</color>
+    <color name="green_accent">#69F0AE</color>
+
+    <!-- Red theme -->
+    <color name="red_primary">#F44336</color>
+    <color name="red_primary_dark">#D32F2F</color>
+    <color name="red_accent">#FF5252</color>
+
+    <!-- Purple theme (lighter version) -->
+    <color name="purple_primary">#AB47BC</color>
+    <color name="purple_primary_dark">#8E24AA</color>
+    <color name="purple_accent">#EA80FC</color>
+    
+    <!-- Lavender theme (even lighter purple) -->
+    <color name="lavender_primary">#9575CD</color>
+    <color name="lavender_primary_dark">#7986CB</color>
+    <color name="lavender_accent">#B388FF</color>
+
+    <!-- Orange theme -->
+    <color name="orange_primary">#FF9800</color>
+    <color name="orange_primary_dark">#F57C00</color>
+    <color name="orange_accent">#FFAB40</color>
+
+    <!-- Teal theme -->
+    <color name="teal_primary">#009688</color>
+    <color name="teal_primary_dark">#00796B</color>
+    <color name="teal_accent">#64FFDA</color>
+
+    <!-- Pink theme -->
+    <color name="pink_primary">#E91E63</color>
+    <color name="pink_primary_dark">#C2185B</color>
+    <color name="pink_accent">#FF4081</color>
+
+    <!-- Indigo theme -->
+    <color name="indigo_primary">#3F51B5</color>
+    <color name="indigo_primary_dark">#303F9F</color>
+    <color name="indigo_accent">#536DFE</color>
+
+    <!-- Cyan theme -->
+    <color name="cyan_primary">#00BCD4</color>
+    <color name="cyan_primary_dark">#0097A7</color>
+    <color name="cyan_accent">#18FFFF</color>
+
+    <!-- Amber theme -->
+    <color name="amber_primary">#FFC107</color>
+    <color name="amber_primary_dark">#FFA000</color>
+    <color name="amber_accent">#FFD740</color>
+
+    <!-- Deep Purple theme -->
+    <color name="deep_purple_primary">#673AB7</color>
+    <color name="deep_purple_primary_dark">#512DA8</color>
+    <color name="deep_purple_accent">#7C4DFF</color>
+
+    <!-- Light Blue theme -->
+    <color name="light_blue_primary">#03A9F4</color>
+    <color name="light_blue_primary_dark">#0288D1</color>
+    <color name="light_blue_accent">#40C4FF</color>
+    
+    <!-- Additional colors for history cards -->
+    <color name="light_gray">#F5F5F5</color>
+    <color name="card_overlay">#40000000</color>
+    <color name="black_overlay">#80000000</color>
+</resources>
\ No newline at end of file
diff --git a/app/src/main/res/values/dimens.xml b/app/src/main/res/values/dimens.xml
new file mode 100644
index 0000000..502de7c
--- /dev/null
+++ b/app/src/main/res/values/dimens.xml
@@ -0,0 +1,9 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <dimen name="fab_size">56dp</dimen>
+    <dimen name="fab_margin">16dp</dimen>
+    
+    <!-- Bubble expanded container default dimensions -->
+    <dimen name="bubble_expanded_default_width">360dp</dimen>
+    <dimen name="bubble_expanded_default_height">440dp</dimen>
+</resources>
diff --git a/app/src/main/res/values/ids.xml b/app/src/main/res/values/ids.xml
new file mode 100644
index 0000000..5cfabde
--- /dev/null
+++ b/app/src/main/res/values/ids.xml
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <item name="menu_search" type="id" />
+    <item name="menu_delete" type="id" />
+</resources>
\ No newline at end of file
diff --git a/app/src/main/res/values/strings.xml b/app/src/main/res/values/strings.xml
new file mode 100644
index 0000000..c7b01e2
--- /dev/null
+++ b/app/src/main/res/values/strings.xml
@@ -0,0 +1,223 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <string name="app_name">Quick Browser</string>
+
+    <!-- Bubble UI -->
+    <string name="bubble_description">Web page bubble</string>
+    <string name="close_bubble">Close bubble</string>
+    <string name="close_tab">Close tab</string>
+    <string name="open_in_full_view">Open in full view</string>
+    <string name="read_mode">Reader mode</string>
+    <string name="save_article">Save article</string>
+    <string name="save_for_offline">Save for offline</string>
+    <string name="page_saved_offline">Page saved for offline reading</string>
+    <string name="add_new_bubble">Add new bubble</string>
+    <string name="no_bubbles">No open tabs</string>
+    <string name="favicon">Website icon</string>
+    <string name="bubble_icon">Bubble icon</string>
+    <string name="open_tabs">Open Tabs</string>
+    <string name="favicon_description">Website Icon</string>
+    <string name="reader_mode_loaded">Reader mode loaded</string>
+    <string name="failed_to_load_reader_mode">Failed to load reader mode</string>
+    <string name="resize_handle">Resize handle</string>
+    <string name="site_icon">Site icon</string>
+    <string name="minimize_bubble">Minimize bubble</string>
+    <string name="bookmarked">Bookmarked</string>
+    <string name="more_options">More options</string>
+    <string name="open">Open</string>
+    <string name="enter_url_hint">Enter URL or search...</string>
+    <string name="go_to_url">Go to URL</string>
+
+    <!-- Settings -->
+    <string name="settings_title">Settings</string>
+    <string name="settings_ad_blocking">Ad Blocking</string>
+    <string name="settings_ad_blocking_summary">Block ads and trackers</string>
+    <string name="settings_bubble_size">Bubble Size</string>
+    <string name="settings_bubble_opacity">Bubble Opacity</string>
+    <string name="settings_save_bubble_position">Remember Bubble Positions</string>
+    <string name="settings_save_bubble_position_summary">Save and restore bubble positions for websites</string>
+    <string name="size_small">Small</string>
+    <string name="size_medium">Medium</string>
+    <string name="size_large">Large</string>
+    <string name="size_extra_large">Extra Large</string>
+    <string name="speed_slow">Slow</string>
+    <string name="speed_medium">Medium</string>
+    <string name="speed_fast">Fast</string>
+    <string name="speed_very_fast">Very Fast</string>
+    <string name="bubble_size">Bubble Size</string>
+    <string name="size_normal">Normal</string>
+    <string name="animation_speed">Animation Speed</string>
+    <string name="speed_normal">Normal</string>
+    <string name="bubble_position_right">Position on right side</string>
+
+    <!-- Main Screen -->
+    <string name="app_logo">Quick Browser Logo</string>
+    <string name="app_description">Fast and lightweight browser</string>
+    <string name="start_bubble_browser">Start quick browser</string>
+    <string name="usage_hint">Enter a URL in the address bar below to open it in a bubble</string>
+
+    <!-- Settings Screen -->
+    <string name="browser_settings">Browser Settings</string>
+    <string name="enable_javascript">Enable JavaScript</string>
+    <string name="block_ads">Block ads</string>
+    <string name="block_ads_and_trackers">Block ads and trackers</string>
+    <string name="appearance">Appearance</string>
+    <string name="night_mode">Night Mode</string>
+    <string name="dark_mode">Dark Mode</string>
+    <string name="zoom">Zoom</string>
+    <string name="theme_color">Theme Color</string>
+    <string name="choose_theme_color">Choose Theme Color</string>
+    <string name="theme_color_changed">Theme color changed to %1$s</string>
+    <string name="selected_color">Selected color</string>
+    <string name="apply">Apply</string>
+    <string name="use_dynamic_colors">Use dynamic colors from wallpaper</string>
+    <string name="dynamic_colors_enabled">Dynamic colors enabled</string>
+    <string name="dynamic_colors_disabled">Dynamic colors disabled</string>
+    <string name="privacy">Privacy</string>
+    <string name="save_browsing_history">Save browsing history</string>
+    <string name="encrypt_saved_pages">Encrypt saved pages</string>
+    <string name="show_url_bar">Show URL Bar</string>
+
+    <!-- History Screen -->
+    <string name="browsing_history">Browsing History</string>
+    <string name="search_history">Search history</string>
+    <string name="sites_visited">Sites Visited</string>
+    <string name="yesterday">Yesterday</string>
+    <string name="this_week">This Week</string>
+    <string name="offline">Offline</string>
+    <string name="list_view">List View</string>
+    <string name="grid_view">Grid View</string>
+    <string name="start_browsing_hint">Start browsing to see your history here</string>
+    <string name="no_history_found">No browsing history found</string>
+    <string name="clear_history">Clear history</string>
+    <string name="delete">Delete</string>
+    <string name="clear_history_confirmation">Clear History?</string>
+    <string name="yes">Yes</string>
+    <string name="no">No</string>
+    <string name="history_empty_message">Your browsing history will appear here</string>
+
+    <!-- Read Mode -->
+    <string name="web_view_mode">Switched to web view mode</string>
+    <string name="increase_text_size">Increase text size</string>
+    <string name="decrease_text_size">Decrease text size</string>
+    <string name="toggle_night_mode">Toggle night mode</string>
+    <string name="text_to_speech">Read aloud</string>
+    <string name="error_loading_content">Error loading content</string>
+    
+    <!-- Reader Mode Settings -->
+    <string name="reader_settings_title">Reader Settings</string>
+    <string name="reader_font_size">Font Size</string>
+    <string name="reader_background">Background</string>
+    <string name="reader_text_align">Text Alignment</string>
+    <string name="reader_save_offline">Save for Offline</string>
+    <string name="reader_bg_white">White</string>
+    <string name="reader_bg_sepia">Sepia</string>
+    <string name="reader_bg_dark">Dark</string>
+    <string name="reader_align_left">Left</string>
+    <string name="reader_align_center">Center</string>
+    <string name="reader_align_right">Right</string>
+    <string name="reader_align_justify">Justify</string>
+    <string name="article_saved_success">Article saved for offline reading</string>
+    <string name="article_save_failed">Failed to save article</string>
+    
+    <!-- Accessibility Settings -->
+    <string name="accessibility">Accessibility</string>
+    <string name="automatic_font_sizing">Automatic Font Sizing</string>
+    <string name="automatic_font_sizing_desc">Use system font size settings</string>
+    <string name="font_size">Font Size</string>
+    <string name="font_size_desc">Make text on web sites smaller or larger</string>
+    <string name="font_size_preview">Preview text size: %1$d</string>
+    <string name="font_size_sample_text">This is sample text. It is here to show how text will appear when you increase or decrease the size with this setting.</string>
+    <string name="article_already_saved">Article already saved</string>
+    <string name="article_extraction_failed">Failed to extract article content</string>
+    <string name="original_page_saved_success">Original page saved for offline reading</string>
+    <string name="original_page_save_failed">Failed to save original page</string>
+    <string name="offline_reader">Offline Reader</string>
+    <string name="font_size_small">Small</string>
+    <string name="font_size_medium">Medium</string>
+    <string name="font_size_large">Large</string>
+    <string name="font_size_xl">Extra Large</string>
+
+    <!-- Offline Pages -->
+    <string name="offline_pages">Offline Pages</string>
+    <string name="no_offline_pages">No offline pages saved</string>
+    <string name="delete_all">Delete all</string>
+    <string name="delete_page">Delete Page</string>
+    <string name="delete_page_confirmation">Are you sure you want to delete \'%1$s\'?</string>
+    <string name="cancel">Cancel</string>
+    <string name="delete_all_pages">Delete All Pages</string>
+    <string name="delete_all_confirmation">Are you sure you want to delete all offline pages? This cannot be undone.</string>
+    <string name="delete_all_button">Delete All</string>
+    <string name="page_deleted">Page deleted</string>
+    <string name="error_deleting_page">Error deleting page</string>
+    <string name="pages_deleted">Deleted %1$d pages</string>
+    <string name="save_for_offline_reading">Save for offline reading</string>
+    <string name="page_saved_for_offline">Page saved for offline reading</string>
+    <string name="saving_page_offline">Saving page for offline reading...</string>
+    <string name="error_saving_page">Error saving page</string>
+    <string name="error_loading_page">Error loading offline page</string>
+    <string name="saving_page">Saving page...</string>
+    <string name="downloading_resources">Downloading resources...</string>
+    <string name="saved_on_date">Saved on %1$s</string>
+    <string name="sharing_not_implemented">Sharing not implemented</string>
+    <string name="untitled_page">Untitled</string>
+
+    <!-- Web Actions -->
+    <string name="refresh">Refresh</string>
+    <string name="share">Share</string>
+    <string name="summarize">Summarize</string>
+    <string name="summarizing">Summarizing article...</string>
+    <string name="showing_summary">Showing article summary</string>
+    <string name="showing_web_view">Showing web view</string>
+    <string name="show_web_view">Show web view</string>
+    <string name="summary_title">Article Summary</string>
+    <string name="summary_error">Could not summarize this article</string>
+    <string name="summary_error_no_content">No content found to summarize</string>
+    <string name="summary_not_article">This page does not appear to be an article</string>
+    <string name="summary_timeout">Summarization timed out. The article may be too long or complex.</string>
+    <string name="open_in_browser">Open in Browser</string>
+    <string name="share_via">Share via</string>
+    <string name="share_failed">Failed to share link</string>
+
+    <!-- Activities -->
+    <string name="title_activity_settings">Settings</string>
+    <string name="title_activity_read_mode">Reader Mode</string>
+    <string name="web_view">Web View</string>
+    <string name="settings">Settings</string>
+    <string name="history">History</string>
+    <string name="history_title">History</string>
+    <string name="saved_articles">Saved Articles</string>
+    <string name="no_saved_articles_found">No saved articles found</string>
+    <string name="saved_articles_empty_message">Your saved articles will appear here</string>
+
+    <string name="back">Back</string>
+    <string name="forward">Forward</string>
+
+    <!-- Service -->
+    <string name="bubble_service_channel_name">Browser Service</string>
+    <string name="bubble_service_channel_description">Keeps the quick browser running in background</string>
+    <string name="bubble_service_notification_text">Browser is running in bubble mode</string>
+    
+    <!-- Menu items -->
+    <string name="menu">Menu</string>
+    <string name="menu_delete_today">Delete Today</string>
+    <string name="menu_delete_last_month">Delete Last Month</string>
+    <string name="menu_delete_all">Delete All</string>
+    
+    <!-- Folder-related strings -->
+    <string name="all_articles">All Articles</string>
+    <string name="folders">Folders</string>
+    <string name="add_folder">Add folder</string>
+    <string name="folder">Folder</string>
+    <string name="delete_folder">Delete folder</string>
+    <string name="enter_folder_name">Enter folder name</string>
+    <string name="create_folder">Create folder</string>
+    <string name="folder_name_required">Folder name is required</string>
+    <string name="folder_created">Folder created</string>
+    <string name="folder_deleted">Folder deleted</string>
+    <string name="select_folder">Select folder</string>
+    <string name="create_new_folder">Create new folder</string>
+    <string name="no_folders_found">No folders found</string>
+    <string name="close">Close</string>
+    <string name="delete_folder_confirmation">Are you sure you want to delete the folder \"%1$s\"?</string>
+</resources>
\ No newline at end of file
diff --git a/app/src/main/res/values/styles.xml b/app/src/main/res/values/styles.xml
new file mode 100644
index 0000000..d272f79
--- /dev/null
+++ b/app/src/main/res/values/styles.xml
@@ -0,0 +1,73 @@
+<resources>
+    <!-- Base text styles -->
+    <style name="TextAppearance.QBrowser.Headline" parent="TextAppearance.MaterialComponents.Headline5">
+        <item name="android:textSize">24sp</item>
+        <item name="android:textStyle">bold</item>
+    </style>
+
+    <style name="TextAppearance.QBrowser.Title" parent="TextAppearance.MaterialComponents.Headline6">
+        <item name="android:textSize">20sp</item>
+        <item name="android:textStyle">bold</item>
+    </style>
+    
+    <style name="TextAppearance.QBrowser.Body" parent="TextAppearance.MaterialComponents.Body1">
+        <item name="android:textSize">16sp</item>
+        <item name="android:lineSpacingMultiplier">1.2</item>
+    </style>
+
+    <!-- Bubble specific styles -->
+    <style name="Bubble.Button" parent="Widget.MaterialComponents.Button.TextButton">
+        <item name="android:minWidth">36dp</item>
+        <item name="android:minHeight">36dp</item>
+        <item name="android:padding">8dp</item>
+        <item name="android:textColor">?attr/colorOnSurface</item>
+        <item name="android:background">?attr/selectableItemBackgroundBorderless</item>
+    </style>
+    
+    <!-- Read mode styles -->
+    <style name="ReadMode.Title" parent="TextAppearance.QBrowser.Headline">
+        <item name="android:textSize">22sp</item>
+        <item name="android:textColor">?android:attr/textColorPrimary</item>
+        <item name="android:layout_marginBottom">16dp</item>
+    </style>
+    
+    <style name="ReadMode.Content" parent="TextAppearance.QBrowser.Body">
+        <item name="android:textSize">18sp</item>
+        <item name="android:textColor">?android:attr/textColorPrimary</item>
+        <item name="android:lineSpacingMultiplier">1.5</item>
+    </style>
+    
+    <!-- Popup menu style for consistent appearance -->
+    <style name="PopupMenu.QBrowser" parent="Widget.MaterialComponents.PopupMenu">
+        <item name="android:popupBackground">?attr/colorSurface</item>
+        <item name="android:textColor">?android:attr/textColorPrimary</item>
+    </style>
+    
+    <!-- Circular toolbar button style -->
+    <style name="Widget.QBrowser.Button.CircularIcon" parent="Widget.MaterialComponents.Button.TextButton.Icon">
+        <item name="android:insetLeft">0dp</item>
+        <item name="android:insetTop">0dp</item>
+        <item name="android:insetRight">0dp</item>
+        <item name="android:insetBottom">0dp</item>
+        <item name="iconPadding">0dp</item>
+        <item name="android:padding">8dp</item>
+        <item name="shapeAppearanceOverlay">@style/ShapeAppearance.QBrowser.CircleButton</item>
+        <item name="backgroundTint">@android:color/transparent</item>
+    </style>
+    
+    <!-- Circle shape appearance for buttons -->
+    <style name="ShapeAppearance.QBrowser.CircleButton" parent="">
+        <item name="cornerFamily">rounded</item>
+        <item name="cornerSize">50%</item>
+    </style>
+    
+
+    <!-- Expanded Container with only bottom corners rounded -->
+    <style name="ExpandedContainerBottomRoundedCorners" parent="">
+        <item name="cornerFamily">rounded</item>
+        <item name="cornerSizeTopLeft">0dp</item>
+        <item name="cornerSizeTopRight">0dp</item>
+        <item name="cornerSizeBottomLeft">16dp</item>
+        <item name="cornerSizeBottomRight">16dp</item>
+    </style>
+</resources>
diff --git a/app/src/main/res/values/themes.xml b/app/src/main/res/values/themes.xml
new file mode 100644
index 0000000..9a74dad
--- /dev/null
+++ b/app/src/main/res/values/themes.xml
@@ -0,0 +1,35 @@
+<resources xmlns:tools="http://schemas.android.com/tools">
+    <!-- Base application theme. -->
+    <style name="Theme.QBrowser" parent="Theme.MaterialComponents.DayNight.NoActionBar">
+        <!-- Primary brand color. -->
+        <item name="colorPrimary">@color/colorPrimary</item>
+        <item name="colorPrimaryVariant">@color/colorPrimaryDark</item>
+        <item name="colorOnPrimary">@color/primaryTextColor</item>
+        <!-- Secondary brand color. -->
+        <item name="colorSecondary">@color/secondaryColor</item>
+        <item name="colorSecondaryVariant">@color/secondaryDarkColor</item>
+        <item name="colorOnSecondary">@color/secondaryTextColor</item>
+        <!-- Status bar color. -->
+        <item name="android:statusBarColor">@color/colorPrimaryDark</item>
+        <!-- Customize your theme here. -->
+        <item name="android:navigationBarColor">@color/colorPrimaryDark</item>
+
+        <!-- Uniform text colors -->
+        <item name="android:textColorPrimary">@color/textColorPrimary</item>
+        <item name="android:textColorSecondary">@color/textColorSecondary</item>
+
+        <!-- Uniform background colors -->
+        <item name="android:colorBackground">@color/backgroundColor</item>
+        <item name="colorSurface">@color/surfaceColor</item>
+        <item name="colorOnSurface">@color/onSurfaceColor</item>
+
+        <!-- Menu and popup styles -->
+        <item name="popupMenuStyle">@style/PopupMenu.QBrowser</item>
+        <item name="actionOverflowMenuStyle">@style/PopupMenu.QBrowser</item>
+    </style>
+
+    <style name="Theme.QBrowser.ReadMode" parent="Theme.QBrowser">
+        <item name="android:background">@color/read_mode_background_light</item>
+        <item name="android:textColor">@color/read_mode_text_light</item>
+    </style>
+</resources>
diff --git a/app/src/main/res/xml/file_paths.xml b/app/src/main/res/xml/file_paths.xml
new file mode 100644
index 0000000..1fe554c
--- /dev/null
+++ b/app/src/main/res/xml/file_paths.xml
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="utf-8"?>
+<paths xmlns:android="http://schemas.android.com/apk/res/android">
+    <!-- Share files from app's internal storage -->
+    <files-path
+        name="offline_pages"
+        path="offline_pages/" />
+    
+    <!-- Share files from external storage -->
+    <external-files-path
+        name="external_offline_pages"
+        path="offline_pages/" />
+    
+    <!-- Share files from app cache -->
+    <cache-path
+        name="offline_cache"
+        path="offline_pages/" />
+</paths>
\ No newline at end of file
diff --git a/app/src/test/java/com/quick/browser/data/local/dao/WebPageDaoTest.kt b/app/src/test/java/com/quick/browser/data/local/dao/WebPageDaoTest.kt
new file mode 100644
index 0000000..438446c
--- /dev/null
+++ b/app/src/test/java/com/quick/browser/data/local/dao/WebPageDaoTest.kt
@@ -0,0 +1,13 @@
+package com.quick.browser.data.local.dao
+
+import org.junit.Assert.assertTrue
+import org.junit.Test
+
+class WebPageDaoTest {
+    @Test
+    fun insertAndGetWebPage() {
+        // This is a placeholder test
+        // In a real implementation, we would test the database operations
+        assertTrue(true)
+    }
+}
\ No newline at end of file
diff --git a/app/src/test/java/com/quick/browser/data/repository/SettingsRepositoryImplTest.kt b/app/src/test/java/com/quick/browser/data/repository/SettingsRepositoryImplTest.kt
new file mode 100644
index 0000000..ea49bba
--- /dev/null
+++ b/app/src/test/java/com/quick/browser/data/repository/SettingsRepositoryImplTest.kt
@@ -0,0 +1,111 @@
+package com.quick.browser.data.repository
+
+import com.quick.browser.data.local.dao.SettingsDao
+import com.quick.browser.data.local.entity.Settings
+import kotlinx.coroutines.runBlocking
+import org.junit.Before
+import org.junit.Test
+import org.mockito.Mock
+import org.mockito.Mockito.verify
+import org.mockito.Mockito.`when`
+import org.mockito.MockitoAnnotations
+import com.quick.browser.domain.model.Settings as DomainSettings
+
+class SettingsRepositoryImplTest {
+
+    @Mock
+    private lateinit var settingsDao: SettingsDao
+
+    private lateinit var settingsRepositoryImpl: SettingsRepositoryImpl
+
+    @Before
+    fun setup() {
+        MockitoAnnotations.openMocks(this)
+        settingsRepositoryImpl = SettingsRepositoryImpl(settingsDao)
+    }
+
+    @Test
+    fun `getSettings should return settings from dao`() = runBlocking {
+        // Given
+        val settingsEntity = Settings(
+            id = 1,
+            size = "medium",
+            animationSpeed = "medium",
+            savePositions = true,
+            blockAds = true,
+            defaultColor = "#2196F3",
+            javascriptEnabled = true,
+            darkTheme = false,
+            bubbleSize = 1.0f,
+            expandedBubbleSize = 1.5f,
+            animSpeed = 1.0f,
+            saveHistory = true,
+            encryptData = true,
+            bubblePositionRight = false
+        )
+        `when`(settingsDao.getSettings()).thenReturn(settingsEntity)
+
+        // When
+        val result = settingsRepositoryImpl.getSettings()
+
+        // Then
+        assert(result?.id == settingsEntity.id)
+        assert(result?.size == settingsEntity.size)
+        assert(result?.animationSpeed == settingsEntity.animationSpeed)
+        assert(result?.savePositions == settingsEntity.savePositions)
+        assert(result?.blockAds == settingsEntity.blockAds)
+        assert(result?.defaultColor == settingsEntity.defaultColor)
+        assert(result?.javascriptEnabled == settingsEntity.javascriptEnabled)
+        assert(result?.darkTheme == settingsEntity.darkTheme)
+        assert(result?.bubbleSize == settingsEntity.bubbleSize)
+        assert(result?.expandedBubbleSize == settingsEntity.expandedBubbleSize)
+        assert(result?.animSpeed == settingsEntity.animSpeed)
+        assert(result?.saveHistory == settingsEntity.saveHistory)
+        assert(result?.encryptData == settingsEntity.encryptData)
+        assert(result?.bubblePositionRight == settingsEntity.bubblePositionRight)
+    }
+
+    @Test
+    fun `updateSettings should call dao to update settings`() = runBlocking {
+        // Given
+        val settings = DomainSettings(
+            id = 1,
+            size = "medium",
+            animationSpeed = "medium",
+            savePositions = true,
+            blockAds = true,
+            defaultColor = "#2196F3",
+            javascriptEnabled = true,
+            darkTheme = false,
+            bubbleSize = 1.0f,
+            expandedBubbleSize = 1.5f,
+            animSpeed = 1.0f,
+            saveHistory = true,
+            encryptData = true,
+            bubblePositionRight = false
+        )
+
+        // When
+        settingsRepositoryImpl.updateSettings(settings)
+
+        // Then
+        verify(settingsDao).updateSettings(
+            Settings(
+                id = settings.id,
+                size = settings.size,
+                animationSpeed = settings.animationSpeed,
+                savePositions = settings.savePositions,
+                blockAds = settings.blockAds,
+                defaultColor = settings.defaultColor,
+                javascriptEnabled = settings.javascriptEnabled,
+                darkTheme = settings.darkTheme,
+                bubbleSize = settings.bubbleSize,
+                expandedBubbleSize = settings.expandedBubbleSize,
+                animSpeed = settings.animSpeed,
+                saveHistory = settings.saveHistory,
+                encryptData = settings.encryptData,
+                bubblePositionRight = settings.bubblePositionRight
+            )
+        )
+    }
+}
\ No newline at end of file
diff --git a/app/src/test/java/com/quick/browser/domain/usecase/GetSettingsUseCaseTest.kt b/app/src/test/java/com/quick/browser/domain/usecase/GetSettingsUseCaseTest.kt
new file mode 100644
index 0000000..1bf6c85
--- /dev/null
+++ b/app/src/test/java/com/quick/browser/domain/usecase/GetSettingsUseCaseTest.kt
@@ -0,0 +1,54 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.model.Settings
+import com.quick.browser.domain.repository.SettingsRepository
+import com.quick.browser.domain.result.Result
+import kotlinx.coroutines.runBlocking
+import org.junit.Before
+import org.junit.Test
+import org.mockito.Mock
+import org.mockito.Mockito.`when`
+import org.mockito.MockitoAnnotations
+
+class GetSettingsUseCaseTest {
+
+    @Mock
+    private lateinit var settingsRepository: SettingsRepository
+
+    private lateinit var getSettingsUseCase: GetSettingsUseCase
+
+    @Before
+    fun setup() {
+        MockitoAnnotations.openMocks(this)
+        getSettingsUseCase = GetSettingsUseCase(settingsRepository)
+    }
+
+    @Test
+    fun `invoke should return settings from repository`() = runBlocking {
+        // Given
+        val expectedSettings = Settings(
+            id = 1,
+            size = "medium",
+            animationSpeed = "medium",
+            savePositions = true,
+            blockAds = true,
+            defaultColor = "#2196F3",
+            javascriptEnabled = true,
+            darkTheme = false,
+            bubbleSize = 1.0f,
+            expandedBubbleSize = 1.5f,
+            animSpeed = 1.0f,
+            saveHistory = true,
+            encryptData = true,
+            bubblePositionRight = false
+        )
+        `when`(settingsRepository.getSettings()).thenReturn(expectedSettings)
+
+        // When
+        val result = getSettingsUseCase()
+
+        // Then
+        assert(result is Result.Success)
+        assert((result as Result.Success).data == expectedSettings)
+    }
+}
\ No newline at end of file
diff --git a/app/src/test/java/com/quick/browser/domain/usecase/SaveArticleUseCaseTest.kt b/app/src/test/java/com/quick/browser/domain/usecase/SaveArticleUseCaseTest.kt
new file mode 100644
index 0000000..b146832
--- /dev/null
+++ b/app/src/test/java/com/quick/browser/domain/usecase/SaveArticleUseCaseTest.kt
@@ -0,0 +1,50 @@
+package com.quick.browser.domain.usecase
+
+import com.quick.browser.domain.model.SavedArticle
+import com.quick.browser.domain.repository.ArticleRepository
+import com.quick.browser.domain.result.Result
+import kotlinx.coroutines.runBlocking
+import org.junit.Before
+import org.junit.Test
+import org.mockito.Mock
+import org.mockito.Mockito.verify
+import org.mockito.Mockito.`when`
+import org.mockito.MockitoAnnotations
+
+class SaveArticleUseCaseTest {
+
+    @Mock
+    private lateinit var articleRepository: ArticleRepository
+
+    private lateinit var saveArticleUseCase: SaveArticleUseCase
+
+    @Before
+    fun setup() {
+        MockitoAnnotations.openMocks(this)
+        saveArticleUseCase = SaveArticleUseCase(articleRepository)
+    }
+
+    @Test
+    fun `invoke should call repository to save article`() = runBlocking {
+        // Given
+        val article = SavedArticle(
+            url = "https://example.com",
+            title = "Example Article",
+            content = "This is an example article",
+            savedDate = System.currentTimeMillis(),
+            author = "Author Name",
+            siteName = "Example Site",
+            publishDate = "2023-01-01",
+            excerpt = "This is an excerpt"
+        )
+        
+        `when`(articleRepository.saveArticle(article)).thenReturn(Unit)
+
+        // When
+        val result = saveArticleUseCase(article)
+
+        // Then
+        assert(result is Result.Success)
+        verify(articleRepository).saveArticle(article)
+    }
+}
\ No newline at end of file
diff --git a/app/src/test/java/com/quick/browser/service/AdBlockingServiceTest.kt b/app/src/test/java/com/quick/browser/service/AdBlockingServiceTest.kt
new file mode 100644
index 0000000..3e1e1ac
--- /dev/null
+++ b/app/src/test/java/com/quick/browser/service/AdBlockingServiceTest.kt
@@ -0,0 +1,76 @@
+package com.quick.browser.service
+
+import android.content.Context
+import com.quick.browser.domain.service.EncryptedPreferencesService
+import org.junit.Before
+import org.junit.Test
+import org.mockito.Mock
+import org.mockito.MockitoAnnotations
+
+/**
+ * Unit test for AdBlockingService
+ */
+class AdBlockingServiceTest {
+
+    @Mock
+    private lateinit var context: Context
+
+    @Mock
+    private lateinit var encryptedPrefs: EncryptedPreferencesService
+
+    private lateinit var adBlockingService: AdBlockingService
+
+    @Before
+    fun setup() {
+        MockitoAnnotations.openMocks(this)
+        adBlockingService = AdBlockingService(context, encryptedPrefs)
+    }
+
+    @Test
+    fun `shouldBlockRequest should return null for non-ad URLs`() {
+        // Given
+        val url = "https://example.com/index.html"
+
+        // When
+        val result = adBlockingService.shouldBlockRequest(url)
+
+        // Then
+        assert(result == null)
+    }
+
+    @Test
+    fun `shouldBlockRequest should return blocked response for known ad URLs`() {
+        // Given
+        val url = "http://ad.doubleclick.net/ads/somead"
+
+        // When
+        val result = adBlockingService.shouldBlockRequest(url)
+
+        // Then
+        assert(result != null)
+    }
+
+    @Test
+    fun `isWhitelisted should return false for non-whitelisted domains`() {
+        // Given
+        val domain = "example.com"
+
+        // When
+        val result = adBlockingService.isWhitelisted(domain)
+
+        // Then
+        assert(result == false)
+    }
+
+    @Test
+    fun `isBlacklisted should return false for non-blacklisted domains`() {
+        // Given
+        val domain = "example.com"
+
+        // When
+        val result = adBlockingService.isBlacklisted(domain)
+
+        // Then
+        assert(result == false)
+    }
+}
\ No newline at end of file
diff --git a/app/src/test/java/com/quick/browser/service/SettingsServiceTest.kt b/app/src/test/java/com/quick/browser/service/SettingsServiceTest.kt
new file mode 100644
index 0000000..70bb98f
--- /dev/null
+++ b/app/src/test/java/com/quick/browser/service/SettingsServiceTest.kt
@@ -0,0 +1,81 @@
+package com.quick.browser.service
+
+import android.content.Context
+import android.content.SharedPreferences
+import androidx.preference.PreferenceManager
+import com.quick.browser.domain.service.EncryptedPreferencesService
+import org.junit.Before
+import org.junit.Test
+import org.mockito.Mock
+import org.mockito.Mockito.`when`
+import org.mockito.MockitoAnnotations
+
+class SettingsServiceTest {
+
+    @Mock
+    private lateinit var context: Context
+
+    @Mock
+    private lateinit var defaultSharedPreferences: SharedPreferences
+
+    @Mock
+    private lateinit var bubbleSharedPreferences: SharedPreferences
+
+    @Mock
+    private lateinit var encryptedPrefs: EncryptedPreferencesService
+
+    @Mock
+    private lateinit var editor: SharedPreferences.Editor
+
+    private lateinit var settingsService: SettingsService
+
+    @Before
+    fun setup() {
+        MockitoAnnotations.openMocks(this)
+        `when`(PreferenceManager.getDefaultSharedPreferences(context)).thenReturn(defaultSharedPreferences)
+        `when`(context.getSharedPreferences("bubble_settings", Context.MODE_PRIVATE)).thenReturn(bubbleSharedPreferences)
+        `when`(defaultSharedPreferences.edit()).thenReturn(editor)
+        `when`(bubbleSharedPreferences.edit()).thenReturn(editor)
+        `when`(editor.putBoolean("pref_ad_blocking", true)).thenReturn(editor)
+        `when`(editor.putBoolean("pref_javascript", true)).thenReturn(editor)
+        `when`(editor.putBoolean("pref_dark_theme", false)).thenReturn(editor)
+        `when`(editor.putInt("pref_bubble_size", 100)).thenReturn(editor)
+        settingsService = SettingsService(context, encryptedPrefs)
+    }
+
+    @Test
+    fun `isAdBlockEnabled should return value from preferences`() {
+        // Given
+        `when`(defaultSharedPreferences.getBoolean("pref_ad_blocking", true)).thenReturn(true)
+
+        // When
+        val result = settingsService.isAdBlockEnabled()
+
+        // Then
+        assert(result == true)
+    }
+
+    @Test
+    fun `isJavaScriptEnabled should return value from preferences`() {
+        // Given
+        `when`(defaultSharedPreferences.getBoolean("pref_javascript", true)).thenReturn(true)
+
+        // When
+        val result = settingsService.isJavaScriptEnabled()
+
+        // Then
+        assert(result == true)
+    }
+
+    @Test
+    fun `getBubbleSize should return value from preferences`() {
+        // Given
+        `when`(defaultSharedPreferences.getInt("pref_bubble_size", 100)).thenReturn(100)
+
+        // When
+        val result = settingsService.getBubbleSize()
+
+        // Then
+        assert(result == 1.0f)
+    }
+}
\ No newline at end of file
diff --git a/app/src/test/java/com/quick/browser/utils/JavaScriptSanitizerTest.kt b/app/src/test/java/com/quick/browser/utils/JavaScriptSanitizerTest.kt
new file mode 100644
index 0000000..bfecc7c
--- /dev/null
+++ b/app/src/test/java/com/quick/browser/utils/JavaScriptSanitizerTest.kt
@@ -0,0 +1,48 @@
+package com.quick.browser.utils
+
+import org.junit.Test
+
+class JavaScriptSanitizerTest {
+
+    @Test
+    fun testSanitizeJavaScriptWithSafeScript() {
+        val script = "console.log('hello world');"
+        val result = JavaScriptSanitizer.sanitizeJavaScript(script)
+        assert(result.contains("console.log"))
+    }
+
+    @Test
+    fun testSanitizeJavaScriptWithDangerousEval() {
+        val script = "eval('alert(\"xss\")');"
+        val result = JavaScriptSanitizer.sanitizeJavaScript(script)
+        assert(!result.contains("eval"))
+    }
+
+    @Test
+    fun testSanitizeJavaScriptWithDangerousDocumentWrite() {
+        val script = "document.write('<script>alert(\"xss\")</script>');"
+        val result = JavaScriptSanitizer.sanitizeJavaScript(script)
+        assert(!result.contains("document.write"))
+    }
+
+    @Test
+    fun testIsJavaScriptSafeWithSafeScript() {
+        val script = "console.log('hello world');"
+        val result = JavaScriptSanitizer.isJavaScriptSafe(script)
+        assert(result == true)
+    }
+
+    @Test
+    fun testIsJavaScriptSafeWithDangerousScript() {
+        val script = "eval('alert(\"xss\")');"
+        val result = JavaScriptSanitizer.isJavaScriptSafe(script)
+        assert(result == false)
+    }
+
+    @Test
+    fun testGenerateCSPHeader() {
+        val csp = JavaScriptSanitizer.generateCSPHeader()
+        assert(csp.contains("default-src *"))
+        assert(csp.contains("script-src *"))
+    }
+}
\ No newline at end of file
diff --git a/app/src/test/java/com/quick/browser/utils/UrlUtilsTest.kt b/app/src/test/java/com/quick/browser/utils/UrlUtilsTest.kt
new file mode 100644
index 0000000..eb92089
--- /dev/null
+++ b/app/src/test/java/com/quick/browser/utils/UrlUtilsTest.kt
@@ -0,0 +1,15 @@
+package com.quick.browser.utils
+
+import org.junit.Test
+
+/**
+ * Unit test for URL formatting utilities
+ */
+class UrlUtilsTest {
+
+    @Test
+    fun testUrlFormatting() {
+        // This is a placeholder test to verify our testing infrastructure works
+        assert(true)
+    }
+}
\ No newline at end of file
diff --git a/build.gradle b/build.gradle
new file mode 100644
index 0000000..c658ba1
--- /dev/null
+++ b/build.gradle
@@ -0,0 +1,47 @@
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
+buildscript {
+    ext {
+        kotlin_version = '2.0.0'
+    }
+    repositories {
+        google()
+        mavenCentral()
+        gradlePluginPortal()
+        maven { url "https://repo1.maven.org/maven2/" }
+        maven { url "https://maven.aliyun.com/repository/central" }
+        maven { url "https://maven.aliyun.com/repository/google" }
+        mavenLocal()
+    }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:8.10.1'
+        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
+        classpath 'com.google.dagger:hilt-android-gradle-plugin:2.56'
+        classpath "com.google.devtools.ksp:com.google.devtools.ksp.gradle.plugin:2.0.0-1.0.24"
+    }
+}
+
+allprojects {
+    repositories {
+        google()
+        mavenCentral()
+        gradlePluginPortal()
+        maven { url "https://repo1.maven.org/maven2/" }
+        maven { url "https://maven.aliyun.com/repository/central" }
+        maven { url "https://maven.aliyun.com/repository/google" }
+        mavenLocal()
+    }
+}
+
+// Configure Java toolchain for all projects
+subprojects {
+    afterEvaluate {
+        if (project.hasProperty('android')) {
+            android {
+                compileOptions {
+                    sourceCompatibility JavaVersion.VERSION_21
+                    targetCompatibility JavaVersion.VERSION_21
+                }
+            }
+        }
+    }
+}
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
index 0000000..e339a91
--- /dev/null
+++ b/gradle.properties
@@ -0,0 +1,42 @@
+# Project-wide Gradle settings.
+# IDE (e.g. Android Studio) users:
+# Gradle settings configured through the IDE *will override*
+# any settings specified in this file.
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Updated for JDK 21 with optimized settings
+org.gradle.jvmargs=-Xmx4096m -Dfile.encoding=UTF-8 --add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
+# AndroidX package structure to make it clearer which packages are bundled with the
+# Android operating system, and which are packaged with your app's APK
+# https://developer.android.com/topic/libraries/support-library/androidx-rn
+android.useAndroidX=true
+# Kotlin code style for this project: "official" or "obsolete":
+kotlin.code.style=official
+# Enables namespacing of each library's R class so that its R class includes only the
+# resources declared in the library itself and none from the library's dependencies,
+# thereby reducing the size of the R class for that library
+android.nonTransitiveRClass=true
+android.suppressUnsupportedCompileSdk=33
+# Suppress namespace warnings for TensorFlow Lite
+android.suppressDuplicateNamespaceWarning=true
+android.enableJetifier=false
+org.gradle.configuration-cache=false
+# Network configuration for better dependency resolution
+systemProp.http.connectionTimeout=300000
+systemProp.http.socketTimeout=300000
+systemProp.https.connectionTimeout=300000
+systemProp.https.socketTimeout=300000
+# Allow insecure protocols as fallback
+systemProp.http.nonProxyHosts=localhost|127.*|[::1]
+# Gradle daemon configuration
+org.gradle.daemon=true
+org.gradle.parallel=true
+
+# JDK 21 specific settings
+kotlin.jvm.target.validation.mode=warning
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 0000000000000000000000000000000000000000..033e24c4cdf41af1ab109bc7f253b2b887023340
GIT binary patch
literal 63375
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
E0aA=+Q2+n{

literal 0
HcmV?d00001

diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 0000000..c1d5e01
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,7 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.11.1-all.zip
+networkTimeout=10000
+validateDistributionUrl=true
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
diff --git a/gradlew b/gradlew
new file mode 100755
index 0000000..fcb6fca
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,248 @@
+#!/bin/sh
+
+#
+# Copyright © 2015-2021 the original authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+#
+#   Gradle start up script for POSIX generated by Gradle.
+#
+#   Important for running:
+#
+#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
+#       noncompliant, but you have some other compliant shell such as ksh or
+#       bash, then to run this script, type that shell name before the whole
+#       command line, like:
+#
+#           ksh Gradle
+#
+#       Busybox and similar reduced shells will NOT work, because this script
+#       requires all of these POSIX shell features:
+#         * functions;
+#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
+#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
+#         * compound commands having a testable exit status, especially «case»;
+#         * various built-in commands including «command», «set», and «ulimit».
+#
+#   Important for patching:
+#
+#   (2) This script targets any POSIX shell, so it avoids extensions provided
+#       by Bash, Ksh, etc; in particular arrays are avoided.
+#
+#       The "traditional" practice of packing multiple parameters into a
+#       space-separated string is a well documented source of bugs and security
+#       problems, so this is (mostly) avoided, by progressively accumulating
+#       options in "$@", and eventually passing that to Java.
+#
+#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
+#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
+#       see the in-line comments for details.
+#
+#       There are tweaks for specific operating systems such as AIX, CygWin,
+#       Darwin, MinGW, and NonStop.
+#
+#   (3) This script is generated from the Groovy template
+#       https://github.com/gradle/gradle/blob/HEAD/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
+#       within the Gradle project.
+#
+#       You can find Gradle at https://github.com/gradle/gradle/.
+#
+##############################################################################
+
+# Attempt to set APP_HOME
+
+# Resolve links: $0 may be a link
+app_path=$0
+
+# Need this for daisy-chained symlinks.
+while
+    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
+    [ -h "$app_path" ]
+do
+    ls=$( ls -ld "$app_path" )
+    link=${ls#*' -> '}
+    case $link in             #(
+      /*)   app_path=$link ;; #(
+      *)    app_path=$APP_HOME$link ;;
+    esac
+done
+
+# This is normally unused
+# shellcheck disable=SC2034
+APP_BASE_NAME=${0##*/}
+APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD=maximum
+
+warn () {
+    echo "$*"
+} >&2
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+} >&2
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "$( uname )" in                #(
+  CYGWIN* )         cygwin=true  ;; #(
+  Darwin* )         darwin=true  ;; #(
+  MSYS* | MINGW* )  msys=true    ;; #(
+  NONSTOP* )        nonstop=true ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD=$JAVA_HOME/jre/sh/java
+    else
+        JAVACMD=$JAVA_HOME/bin/java
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD=java
+    if ! command -v java >/dev/null 2>&1
+    then
+        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+fi
+
+# Increase the maximum file descriptors if we can.
+if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
+    case $MAX_FD in #(
+      max*)
+        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
+        # shellcheck disable=SC3045
+        MAX_FD=$( ulimit -H -n ) ||
+            warn "Could not query maximum file descriptor limit"
+    esac
+    case $MAX_FD in  #(
+      '' | soft) :;; #(
+      *)
+        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
+        # shellcheck disable=SC3045
+        ulimit -n "$MAX_FD" ||
+            warn "Could not set maximum file descriptor limit to $MAX_FD"
+    esac
+fi
+
+# Collect all arguments for the java command, stacking in reverse order:
+#   * args from the command line
+#   * the main class name
+#   * -classpath
+#   * -D...appname settings
+#   * --module-path (only if needed)
+#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if "$cygwin" || "$msys" ; then
+    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
+    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )
+
+    JAVACMD=$( cygpath --unix "$JAVACMD" )
+
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    for arg do
+        if
+            case $arg in                                #(
+              -*)   false ;;                            # don't mess with options #(
+              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
+                    [ -e "$t" ] ;;                      #(
+              *)    false ;;
+            esac
+        then
+            arg=$( cygpath --path --ignore --mixed "$arg" )
+        fi
+        # Roll the args list around exactly as many times as the number of
+        # args, so each arg winds up back in the position where it started, but
+        # possibly modified.
+        #
+        # NB: a `for` loop captures its iteration list before it begins, so
+        # changing the positional parameters here affects neither the number of
+        # iterations, nor the values presented in `arg`.
+        shift                   # remove old arg
+        set -- "$@" "$arg"      # push replacement arg
+    done
+fi
+
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Collect all arguments for the java command;
+#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of
+#     shell script including quotes and variable substitutions, so put them in
+#     double quotes to make sure that they get re-expanded; and
+#   * put everything else in single quotes, so that it's not re-expanded.
+
+set -- \
+        "-Dorg.gradle.appname=$APP_BASE_NAME" \
+        -classpath "$CLASSPATH" \
+        org.gradle.wrapper.GradleWrapperMain \
+        "$@"
+
+# Stop when "xargs" is not available.
+if ! command -v xargs >/dev/null 2>&1
+then
+    die "xargs is not available"
+fi
+
+# Use "xargs" to parse quoted args.
+#
+# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
+#
+# In Bash we could simply go:
+#
+#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
+#   set -- "${ARGS[@]}" "$@"
+#
+# but POSIX shell has neither arrays nor command substitution, so instead we
+# post-process each arg (as a line of input to sed) to backslash-escape any
+# character that might be a shell metacharacter, then use eval to reverse
+# that process (while maintaining the separation between arguments), and wrap
+# the whole thing up as a single "set" statement.
+#
+# This will of course break if any of these variables contains a newline or
+# an unmatched quote.
+#
+
+eval "set -- $(
+        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
+        xargs -n1 |
+        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
+        tr '\n' ' '
+    )" '"$@"'
+
+exec "$JAVACMD" "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 0000000..93e3f59
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,92 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%"=="" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%"=="" set DIRNAME=.
+@rem This is normally unused
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if %ERRORLEVEL% equ 0 goto execute
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if %ERRORLEVEL% equ 0 goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+set EXIT_CODE=%ERRORLEVEL%
+if %EXIT_CODE% equ 0 set EXIT_CODE=1
+if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
+exit /b %EXIT_CODE%
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/local.properties b/local.properties
new file mode 100644
index 0000000..a861f7c
--- /dev/null
+++ b/local.properties
@@ -0,0 +1,5 @@
+# Path to the Android SDK
+sdk.dir=/Users/mukeshkumar.makwana/Library/Android/sdk
+
+# Note: The embedded android-sdk directory in the project root should be removed
+# and this external SDK reference should be used instead.
\ No newline at end of file
diff --git a/replace_logs.py b/replace_logs.py
new file mode 100644
index 0000000..ea8cb8c
--- /dev/null
+++ b/replace_logs.py
@@ -0,0 +1,49 @@
+#!/usr/bin/env python3
+
+import os
+import re
+
+# Directory to search
+directory = "app/src/main/java"
+
+# Function to replace Log calls with Logger calls
+def replace_log_calls(file_path):
+    with open(file_path, 'r') as file:
+        content = file.read()
+    
+    # Replace Log.d(TAG, "message") with Logger.d(TAG, "message")
+    content = re.sub(r'Log\.d\(([^,]+),\s*("[^"]*")\)', r'Logger.d(\1, \2)', content)
+    
+    # Replace Log.e(TAG, "message") with Logger.e(TAG, "message")
+    content = re.sub(r'Log\.e\(([^,]+),\s*("[^"]*")\)', r'Logger.e(\1, \2)', content)
+    
+    # Replace Log.w(TAG, "message") with Logger.w(TAG, "message")
+    content = re.sub(r'Log\.w\(([^,]+),\s*("[^"]*")\)', r'Logger.w(\1, \2)', content)
+    
+    # Replace Log.i(TAG, "message") with Logger.i(TAG, "message")
+    content = re.sub(r'Log\.i\(([^,]+),\s*("[^"]*")\)', r'Logger.i(\1, \2)', content)
+    
+    # Replace Log.v(TAG, "message") with Logger.v(TAG, "message")
+    content = re.sub(r'Log\.v\(([^,]+),\s*("[^"]*")\)', r'Logger.v(\1, \2)', content)
+    
+    # Replace Log.e(TAG, "message", throwable) with Logger.e(TAG, "message", throwable)
+    content = re.sub(r'Log\.e\(([^,]+),\s*("[^"]*"),\s*([^\)]+)\)', r'Logger.e(\1, \2, \3)', content)
+    
+    # Replace Log.w(TAG, "message", throwable) with Logger.w(TAG, "message", throwable)
+    content = re.sub(r'Log\.w\(([^,]+),\s*("[^"]*"),\s*([^\)]+)\)', r'Logger.w(\1, \2, \3)', content)
+    
+    # Replace import android.util.Log with import com.quick.browser.util.Logger
+    content = re.sub(r'import android\.util\.Log', 'import com.quick.browser.util.Logger', content)
+    
+    with open(file_path, 'w') as file:
+        file.write(content)
+
+# Walk through directory and process .kt files
+for root, dirs, files in os.walk(directory):
+    for file in files:
+        if file.endswith(".kt"):
+            file_path = os.path.join(root, file)
+            replace_log_calls(file_path)
+            print(f"Processed {file_path}")
+
+print("Finished processing all Kotlin files")
\ No newline at end of file
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 0000000..79823bf
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1,25 @@
+pluginManagement {
+    repositories {
+        google()
+        mavenCentral()
+        gradlePluginPortal()
+        maven { url "https://repo1.maven.org/maven2/" }
+        maven { url "https://maven.aliyun.com/repository/central" }
+        maven { url "https://maven.aliyun.com/repository/google" }
+        mavenLocal()
+    }
+}
+
+dependencyResolutionManagement {
+    repositories {
+        google()
+        mavenCentral()
+        maven { url "https://repo1.maven.org/maven2/" }
+        maven { url "https://maven.aliyun.com/repository/central" }
+        maven { url "https://maven.aliyun.com/repository/google" }
+        gradlePluginPortal()
+        mavenLocal()
+    }
+}
+rootProject.name = "quick-browser"
+include ':app'
\ No newline at end of file
-- 
2.39.5 (Apple Git-154)


From 4f63cd3e02e79cd87c0531cb01bee7ef66ab6f97 Mon Sep 17 00:00:00 2001
From: Mukesh Makwana <mukeshkumar.makwana@tesco.com>
Date: Fri, 19 Sep 2025 10:38:00 +0530
Subject: [PATCH 2/2] Removed unnecessary files.

---
 QWEN.md | 68 ---------------------------------------------------------
 1 file changed, 68 deletions(-)
 delete mode 100644 QWEN.md

diff --git a/QWEN.md b/QWEN.md
deleted file mode 100644
index cd80c30..0000000
--- a/QWEN.md
+++ /dev/null
@@ -1,68 +0,0 @@
-# Quick Browser - Android Project Context
-
-## Project Overview
-
-Quick Browser is an Android application that provides a floating, draggable browser bubble interface. Users can browse the web in a small overlay window that can be moved around the screen and resized. The app includes features like web content summarization, read mode for better text readability, and settings for customization.
-
-Key technologies and architecture:
-- **Language**: Kotlin
-- **Framework**: Android with Android Jetpack components
-- **Architecture**: MVVM (Model-View-ViewModel) with dependency injection
-- **Dependency Injection**: Hilt
-- **Database**: Room
-- **Build System**: Gradle with Kotlin DSL
-- **Min SDK**: Not explicitly stated in explored files, but uses modern Android features
-- **Target SDK**: Not explicitly stated in explored files
-
-## Project Structure
-
-The project follows a standard Android application structure with a focus on separation of concerns:
-
-- `app/src/main/java/com/quick/browser/`
-  - `data/`: Data layer including local storage (Room DAOs, database), network, repository implementations, and security utilities.
-  - `domain/`: Domain layer containing models, repository interfaces, use cases, errors, and results.
-  - `di/`: Dependency injection modules (Hilt).
-  - `presentation/`: Presentation layer with UI components (Activities, ViewModels, custom Views) organized by feature.
-  - `service/`: Background services, primarily the `BubbleService` which manages the floating bubbles.
-  - `utils/`: Utility classes and constants.
-
-## Core Components
-
-1.  **BubbleService (`service/BubbleService.kt`)**: The core foreground service responsible for managing the lifecycle of floating bubbles. It coordinates various managers and runs in the foreground to ensure bubbles remain visible.
-2.  **BubbleView (`presentation/ui/browser/BubbleView.kt`)**: The custom View that represents a single floating bubble. It handles UI, touch events (dragging, resizing), WebView management, and interactions like summarization and read mode.
-3.  **MainActivity (`presentation/ui/main/MainActivity.kt`)**: The main entry point Activity of the application. It provides an address bar and menu for user interaction before launching the bubble service.
-4.  **Data Layer**: Uses Room for local data persistence (history, settings, saved articles) with DAOs (`data/local/dao/`) and repositories (`data/repository/`).
-5.  **Domain Layer**: Encapsulates business logic in use cases (`domain/usecase/`) and defines contracts through repository interfaces (`domain/repository/`).
-
-## Building and Running
-
-Based on the `build.gradle` files:
-
-1.  **Setup**:
-    *   Ensure you have the Android SDK installed.
-    *   The project uses Kotlin version 2.0.0.
-    *   It targets Java compatibility version 21.
-
-2.  **Build**:
-    *   Use the standard Android Gradle commands:
-        *   `./gradlew assembleDebug` (Build debug APK)
-        *   `./gradlew assembleRelease` (Build release APK)
-
-3.  **Run**:
-    *   `./gradlew installDebug` (Install debug build on a connected device/emulator)
-    *   The app can then be launched from the device's app drawer.
-
-4.  **Development**:
-    *   Open the project in Android Studio.
-    *   Sync the project with Gradle files.
-    *   Run the 'app' configuration.
-
-## Development Conventions
-
-- **Kotlin**: The primary language, utilizing coroutines for asynchronous operations.
-- **Hilt**: Used for dependency injection across the application, reducing boilerplate and improving testability.
-- **MVVM**: ViewModels (`presentation/ui/*/...ViewModel.kt`) handle UI-related data and logic, separating it from the Views (Activities, Fragments, custom Views).
-- **Use Cases**: Business logic is encapsulated in domain use cases (`domain/usecase/`) for better modularity and testability.
-- **Room**: Used for local data persistence with LiveData for reactive UI updates.
-- **Constants**: Centralized in `utils/Constants.kt`.
-- **Logging**: Custom logger utility `utils/Logger.kt`.
\ No newline at end of file
-- 
2.39.5 (Apple Git-154)

